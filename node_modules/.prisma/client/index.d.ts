
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Baby
 * 
 */
export type Baby = $Result.DefaultSelection<Prisma.$BabyPayload>
/**
 * Model FeedLog
 * 
 */
export type FeedLog = $Result.DefaultSelection<Prisma.$FeedLogPayload>
/**
 * Model DiaperLog
 * 
 */
export type DiaperLog = $Result.DefaultSelection<Prisma.$DiaperLogPayload>
/**
 * Model SleepLog
 * 
 */
export type SleepLog = $Result.DefaultSelection<Prisma.$SleepLogPayload>
/**
 * Model OtpVerification
 * 
 */
export type OtpVerification = $Result.DefaultSelection<Prisma.$OtpVerificationPayload>
/**
 * Model ZipCode
 * 
 */
export type ZipCode = $Result.DefaultSelection<Prisma.$ZipCodePayload>
/**
 * Model MilkRequest
 * 
 */
export type MilkRequest = $Result.DefaultSelection<Prisma.$MilkRequestPayload>
/**
 * Model RequestNotification
 * 
 */
export type RequestNotification = $Result.DefaultSelection<Prisma.$RequestNotificationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserType: {
  DONOR: 'DONOR',
  BUYER: 'BUYER',
  ADMIN: 'ADMIN'
};

export type UserType = (typeof UserType)[keyof typeof UserType]


export const Gender: {
  BOY: 'BOY',
  GIRL: 'GIRL',
  OTHER: 'OTHER'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const FeedType: {
  BREAST: 'BREAST',
  BOTTLE: 'BOTTLE',
  OTHER: 'OTHER'
};

export type FeedType = (typeof FeedType)[keyof typeof FeedType]


export const Position: {
  LEFT: 'LEFT',
  RIGHT: 'RIGHT',
  BOTH: 'BOTH'
};

export type Position = (typeof Position)[keyof typeof Position]


export const DiaperType: {
  SOLID: 'SOLID',
  LIQUID: 'LIQUID',
  BOTH: 'BOTH'
};

export type DiaperType = (typeof DiaperType)[keyof typeof DiaperType]


export const SleepLocation: {
  CRIB: 'CRIB',
  BED: 'BED',
  STROLLER: 'STROLLER',
  OTHER: 'OTHER'
};

export type SleepLocation = (typeof SleepLocation)[keyof typeof SleepLocation]


export const RequestType: {
  MILK_REQUEST: 'MILK_REQUEST',
  MILK_OFFER: 'MILK_OFFER'
};

export type RequestType = (typeof RequestType)[keyof typeof RequestType]


export const RequestStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type RequestStatus = (typeof RequestStatus)[keyof typeof RequestStatus]

}

export type UserType = $Enums.UserType

export const UserType: typeof $Enums.UserType

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type FeedType = $Enums.FeedType

export const FeedType: typeof $Enums.FeedType

export type Position = $Enums.Position

export const Position: typeof $Enums.Position

export type DiaperType = $Enums.DiaperType

export const DiaperType: typeof $Enums.DiaperType

export type SleepLocation = $Enums.SleepLocation

export const SleepLocation: typeof $Enums.SleepLocation

export type RequestType = $Enums.RequestType

export const RequestType: typeof $Enums.RequestType

export type RequestStatus = $Enums.RequestStatus

export const RequestStatus: typeof $Enums.RequestStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.baby`: Exposes CRUD operations for the **Baby** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Babies
    * const babies = await prisma.baby.findMany()
    * ```
    */
  get baby(): Prisma.BabyDelegate<ExtArgs>;

  /**
   * `prisma.feedLog`: Exposes CRUD operations for the **FeedLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedLogs
    * const feedLogs = await prisma.feedLog.findMany()
    * ```
    */
  get feedLog(): Prisma.FeedLogDelegate<ExtArgs>;

  /**
   * `prisma.diaperLog`: Exposes CRUD operations for the **DiaperLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DiaperLogs
    * const diaperLogs = await prisma.diaperLog.findMany()
    * ```
    */
  get diaperLog(): Prisma.DiaperLogDelegate<ExtArgs>;

  /**
   * `prisma.sleepLog`: Exposes CRUD operations for the **SleepLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SleepLogs
    * const sleepLogs = await prisma.sleepLog.findMany()
    * ```
    */
  get sleepLog(): Prisma.SleepLogDelegate<ExtArgs>;

  /**
   * `prisma.otpVerification`: Exposes CRUD operations for the **OtpVerification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OtpVerifications
    * const otpVerifications = await prisma.otpVerification.findMany()
    * ```
    */
  get otpVerification(): Prisma.OtpVerificationDelegate<ExtArgs>;

  /**
   * `prisma.zipCode`: Exposes CRUD operations for the **ZipCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ZipCodes
    * const zipCodes = await prisma.zipCode.findMany()
    * ```
    */
  get zipCode(): Prisma.ZipCodeDelegate<ExtArgs>;

  /**
   * `prisma.milkRequest`: Exposes CRUD operations for the **MilkRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MilkRequests
    * const milkRequests = await prisma.milkRequest.findMany()
    * ```
    */
  get milkRequest(): Prisma.MilkRequestDelegate<ExtArgs>;

  /**
   * `prisma.requestNotification`: Exposes CRUD operations for the **RequestNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RequestNotifications
    * const requestNotifications = await prisma.requestNotification.findMany()
    * ```
    */
  get requestNotification(): Prisma.RequestNotificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Baby: 'Baby',
    FeedLog: 'FeedLog',
    DiaperLog: 'DiaperLog',
    SleepLog: 'SleepLog',
    OtpVerification: 'OtpVerification',
    ZipCode: 'ZipCode',
    MilkRequest: 'MilkRequest',
    RequestNotification: 'RequestNotification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "baby" | "feedLog" | "diaperLog" | "sleepLog" | "otpVerification" | "zipCode" | "milkRequest" | "requestNotification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Baby: {
        payload: Prisma.$BabyPayload<ExtArgs>
        fields: Prisma.BabyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BabyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BabyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BabyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BabyPayload>
          }
          findFirst: {
            args: Prisma.BabyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BabyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BabyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BabyPayload>
          }
          findMany: {
            args: Prisma.BabyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BabyPayload>[]
          }
          create: {
            args: Prisma.BabyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BabyPayload>
          }
          createMany: {
            args: Prisma.BabyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BabyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BabyPayload>
          }
          update: {
            args: Prisma.BabyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BabyPayload>
          }
          deleteMany: {
            args: Prisma.BabyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BabyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BabyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BabyPayload>
          }
          aggregate: {
            args: Prisma.BabyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBaby>
          }
          groupBy: {
            args: Prisma.BabyGroupByArgs<ExtArgs>
            result: $Utils.Optional<BabyGroupByOutputType>[]
          }
          count: {
            args: Prisma.BabyCountArgs<ExtArgs>
            result: $Utils.Optional<BabyCountAggregateOutputType> | number
          }
        }
      }
      FeedLog: {
        payload: Prisma.$FeedLogPayload<ExtArgs>
        fields: Prisma.FeedLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLogPayload>
          }
          findFirst: {
            args: Prisma.FeedLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLogPayload>
          }
          findMany: {
            args: Prisma.FeedLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLogPayload>[]
          }
          create: {
            args: Prisma.FeedLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLogPayload>
          }
          createMany: {
            args: Prisma.FeedLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FeedLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLogPayload>
          }
          update: {
            args: Prisma.FeedLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLogPayload>
          }
          deleteMany: {
            args: Prisma.FeedLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeedLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedLogPayload>
          }
          aggregate: {
            args: Prisma.FeedLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedLog>
          }
          groupBy: {
            args: Prisma.FeedLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedLogCountArgs<ExtArgs>
            result: $Utils.Optional<FeedLogCountAggregateOutputType> | number
          }
        }
      }
      DiaperLog: {
        payload: Prisma.$DiaperLogPayload<ExtArgs>
        fields: Prisma.DiaperLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiaperLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiaperLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiaperLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiaperLogPayload>
          }
          findFirst: {
            args: Prisma.DiaperLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiaperLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiaperLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiaperLogPayload>
          }
          findMany: {
            args: Prisma.DiaperLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiaperLogPayload>[]
          }
          create: {
            args: Prisma.DiaperLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiaperLogPayload>
          }
          createMany: {
            args: Prisma.DiaperLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DiaperLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiaperLogPayload>
          }
          update: {
            args: Prisma.DiaperLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiaperLogPayload>
          }
          deleteMany: {
            args: Prisma.DiaperLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiaperLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DiaperLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiaperLogPayload>
          }
          aggregate: {
            args: Prisma.DiaperLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiaperLog>
          }
          groupBy: {
            args: Prisma.DiaperLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiaperLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiaperLogCountArgs<ExtArgs>
            result: $Utils.Optional<DiaperLogCountAggregateOutputType> | number
          }
        }
      }
      SleepLog: {
        payload: Prisma.$SleepLogPayload<ExtArgs>
        fields: Prisma.SleepLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SleepLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SleepLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          findFirst: {
            args: Prisma.SleepLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SleepLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          findMany: {
            args: Prisma.SleepLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>[]
          }
          create: {
            args: Prisma.SleepLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          createMany: {
            args: Prisma.SleepLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SleepLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          update: {
            args: Prisma.SleepLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          deleteMany: {
            args: Prisma.SleepLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SleepLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SleepLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SleepLogPayload>
          }
          aggregate: {
            args: Prisma.SleepLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSleepLog>
          }
          groupBy: {
            args: Prisma.SleepLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SleepLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SleepLogCountArgs<ExtArgs>
            result: $Utils.Optional<SleepLogCountAggregateOutputType> | number
          }
        }
      }
      OtpVerification: {
        payload: Prisma.$OtpVerificationPayload<ExtArgs>
        fields: Prisma.OtpVerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OtpVerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpVerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OtpVerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpVerificationPayload>
          }
          findFirst: {
            args: Prisma.OtpVerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpVerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OtpVerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpVerificationPayload>
          }
          findMany: {
            args: Prisma.OtpVerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpVerificationPayload>[]
          }
          create: {
            args: Prisma.OtpVerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpVerificationPayload>
          }
          createMany: {
            args: Prisma.OtpVerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OtpVerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpVerificationPayload>
          }
          update: {
            args: Prisma.OtpVerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpVerificationPayload>
          }
          deleteMany: {
            args: Prisma.OtpVerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OtpVerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OtpVerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpVerificationPayload>
          }
          aggregate: {
            args: Prisma.OtpVerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOtpVerification>
          }
          groupBy: {
            args: Prisma.OtpVerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OtpVerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OtpVerificationCountArgs<ExtArgs>
            result: $Utils.Optional<OtpVerificationCountAggregateOutputType> | number
          }
        }
      }
      ZipCode: {
        payload: Prisma.$ZipCodePayload<ExtArgs>
        fields: Prisma.ZipCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ZipCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZipCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ZipCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZipCodePayload>
          }
          findFirst: {
            args: Prisma.ZipCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZipCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ZipCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZipCodePayload>
          }
          findMany: {
            args: Prisma.ZipCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZipCodePayload>[]
          }
          create: {
            args: Prisma.ZipCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZipCodePayload>
          }
          createMany: {
            args: Prisma.ZipCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ZipCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZipCodePayload>
          }
          update: {
            args: Prisma.ZipCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZipCodePayload>
          }
          deleteMany: {
            args: Prisma.ZipCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ZipCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ZipCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZipCodePayload>
          }
          aggregate: {
            args: Prisma.ZipCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateZipCode>
          }
          groupBy: {
            args: Prisma.ZipCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ZipCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ZipCodeCountArgs<ExtArgs>
            result: $Utils.Optional<ZipCodeCountAggregateOutputType> | number
          }
        }
      }
      MilkRequest: {
        payload: Prisma.$MilkRequestPayload<ExtArgs>
        fields: Prisma.MilkRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MilkRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilkRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MilkRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilkRequestPayload>
          }
          findFirst: {
            args: Prisma.MilkRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilkRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MilkRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilkRequestPayload>
          }
          findMany: {
            args: Prisma.MilkRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilkRequestPayload>[]
          }
          create: {
            args: Prisma.MilkRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilkRequestPayload>
          }
          createMany: {
            args: Prisma.MilkRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MilkRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilkRequestPayload>
          }
          update: {
            args: Prisma.MilkRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilkRequestPayload>
          }
          deleteMany: {
            args: Prisma.MilkRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MilkRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MilkRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MilkRequestPayload>
          }
          aggregate: {
            args: Prisma.MilkRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMilkRequest>
          }
          groupBy: {
            args: Prisma.MilkRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<MilkRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.MilkRequestCountArgs<ExtArgs>
            result: $Utils.Optional<MilkRequestCountAggregateOutputType> | number
          }
        }
      }
      RequestNotification: {
        payload: Prisma.$RequestNotificationPayload<ExtArgs>
        fields: Prisma.RequestNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RequestNotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RequestNotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotificationPayload>
          }
          findFirst: {
            args: Prisma.RequestNotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RequestNotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotificationPayload>
          }
          findMany: {
            args: Prisma.RequestNotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotificationPayload>[]
          }
          create: {
            args: Prisma.RequestNotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotificationPayload>
          }
          createMany: {
            args: Prisma.RequestNotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RequestNotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotificationPayload>
          }
          update: {
            args: Prisma.RequestNotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotificationPayload>
          }
          deleteMany: {
            args: Prisma.RequestNotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RequestNotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RequestNotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RequestNotificationPayload>
          }
          aggregate: {
            args: Prisma.RequestNotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRequestNotification>
          }
          groupBy: {
            args: Prisma.RequestNotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RequestNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RequestNotificationCountArgs<ExtArgs>
            result: $Utils.Optional<RequestNotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    babies: number
    otpVerifications: number
    sentRequests: number
    receivedRequests: number
    notifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    babies?: boolean | UserCountOutputTypeCountBabiesArgs
    otpVerifications?: boolean | UserCountOutputTypeCountOtpVerificationsArgs
    sentRequests?: boolean | UserCountOutputTypeCountSentRequestsArgs
    receivedRequests?: boolean | UserCountOutputTypeCountReceivedRequestsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBabiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BabyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOtpVerificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpVerificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MilkRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MilkRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestNotificationWhereInput
  }


  /**
   * Count Type BabyCountOutputType
   */

  export type BabyCountOutputType = {
    feedLogs: number
    diaperLogs: number
    sleepLogs: number
  }

  export type BabyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedLogs?: boolean | BabyCountOutputTypeCountFeedLogsArgs
    diaperLogs?: boolean | BabyCountOutputTypeCountDiaperLogsArgs
    sleepLogs?: boolean | BabyCountOutputTypeCountSleepLogsArgs
  }

  // Custom InputTypes
  /**
   * BabyCountOutputType without action
   */
  export type BabyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BabyCountOutputType
     */
    select?: BabyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BabyCountOutputType without action
   */
  export type BabyCountOutputTypeCountFeedLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedLogWhereInput
  }

  /**
   * BabyCountOutputType without action
   */
  export type BabyCountOutputTypeCountDiaperLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiaperLogWhereInput
  }

  /**
   * BabyCountOutputType without action
   */
  export type BabyCountOutputTypeCountSleepLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SleepLogWhereInput
  }


  /**
   * Count Type MilkRequestCountOutputType
   */

  export type MilkRequestCountOutputType = {
    notifications: number
  }

  export type MilkRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | MilkRequestCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * MilkRequestCountOutputType without action
   */
  export type MilkRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequestCountOutputType
     */
    select?: MilkRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MilkRequestCountOutputType without action
   */
  export type MilkRequestCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestNotificationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    zipcode: string | null
    userType: $Enums.UserType | null
    isNew: boolean | null
    isActive: boolean | null
    fcmToken: string | null
    lastLoginAt: Date | null
    description: string | null
    bloodGroup: string | null
    babyDeliveryDate: Date | null
    healthStyle: string | null
    ableToShareMedicalRecord: boolean | null
    isAvailable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    zipcode: string | null
    userType: $Enums.UserType | null
    isNew: boolean | null
    isActive: boolean | null
    fcmToken: string | null
    lastLoginAt: Date | null
    description: string | null
    bloodGroup: string | null
    babyDeliveryDate: Date | null
    healthStyle: string | null
    ableToShareMedicalRecord: boolean | null
    isAvailable: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    zipcode: number
    userType: number
    isNew: number
    isActive: number
    fcmToken: number
    lastLoginAt: number
    description: number
    bloodGroup: number
    babyDeliveryDate: number
    healthStyle: number
    ableToShareMedicalRecord: number
    isAvailable: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    zipcode?: true
    userType?: true
    isNew?: true
    isActive?: true
    fcmToken?: true
    lastLoginAt?: true
    description?: true
    bloodGroup?: true
    babyDeliveryDate?: true
    healthStyle?: true
    ableToShareMedicalRecord?: true
    isAvailable?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    zipcode?: true
    userType?: true
    isNew?: true
    isActive?: true
    fcmToken?: true
    lastLoginAt?: true
    description?: true
    bloodGroup?: true
    babyDeliveryDate?: true
    healthStyle?: true
    ableToShareMedicalRecord?: true
    isAvailable?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    zipcode?: true
    userType?: true
    isNew?: true
    isActive?: true
    fcmToken?: true
    lastLoginAt?: true
    description?: true
    bloodGroup?: true
    babyDeliveryDate?: true
    healthStyle?: true
    ableToShareMedicalRecord?: true
    isAvailable?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew: boolean
    isActive: boolean
    fcmToken: string | null
    lastLoginAt: Date | null
    description: string | null
    bloodGroup: string | null
    babyDeliveryDate: Date | null
    healthStyle: string | null
    ableToShareMedicalRecord: boolean | null
    isAvailable: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    zipcode?: boolean
    userType?: boolean
    isNew?: boolean
    isActive?: boolean
    fcmToken?: boolean
    lastLoginAt?: boolean
    description?: boolean
    bloodGroup?: boolean
    babyDeliveryDate?: boolean
    healthStyle?: boolean
    ableToShareMedicalRecord?: boolean
    isAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    babies?: boolean | User$babiesArgs<ExtArgs>
    otpVerifications?: boolean | User$otpVerificationsArgs<ExtArgs>
    sentRequests?: boolean | User$sentRequestsArgs<ExtArgs>
    receivedRequests?: boolean | User$receivedRequestsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    zipcode?: boolean
    userType?: boolean
    isNew?: boolean
    isActive?: boolean
    fcmToken?: boolean
    lastLoginAt?: boolean
    description?: boolean
    bloodGroup?: boolean
    babyDeliveryDate?: boolean
    healthStyle?: boolean
    ableToShareMedicalRecord?: boolean
    isAvailable?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    babies?: boolean | User$babiesArgs<ExtArgs>
    otpVerifications?: boolean | User$otpVerificationsArgs<ExtArgs>
    sentRequests?: boolean | User$sentRequestsArgs<ExtArgs>
    receivedRequests?: boolean | User$receivedRequestsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      babies: Prisma.$BabyPayload<ExtArgs>[]
      otpVerifications: Prisma.$OtpVerificationPayload<ExtArgs>[]
      sentRequests: Prisma.$MilkRequestPayload<ExtArgs>[]
      receivedRequests: Prisma.$MilkRequestPayload<ExtArgs>[]
      notifications: Prisma.$RequestNotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string
      zipcode: string
      userType: $Enums.UserType
      isNew: boolean
      isActive: boolean
      fcmToken: string | null
      lastLoginAt: Date | null
      description: string | null
      bloodGroup: string | null
      babyDeliveryDate: Date | null
      healthStyle: string | null
      ableToShareMedicalRecord: boolean | null
      isAvailable: boolean | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    babies<T extends User$babiesArgs<ExtArgs> = {}>(args?: Subset<T, User$babiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "findMany"> | Null>
    otpVerifications<T extends User$otpVerificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$otpVerificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpVerificationPayload<ExtArgs>, T, "findMany"> | Null>
    sentRequests<T extends User$sentRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$sentRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "findMany"> | Null>
    receivedRequests<T extends User$receivedRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestNotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly zipcode: FieldRef<"User", 'String'>
    readonly userType: FieldRef<"User", 'UserType'>
    readonly isNew: FieldRef<"User", 'Boolean'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly fcmToken: FieldRef<"User", 'String'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly description: FieldRef<"User", 'String'>
    readonly bloodGroup: FieldRef<"User", 'String'>
    readonly babyDeliveryDate: FieldRef<"User", 'DateTime'>
    readonly healthStyle: FieldRef<"User", 'String'>
    readonly ableToShareMedicalRecord: FieldRef<"User", 'Boolean'>
    readonly isAvailable: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.babies
   */
  export type User$babiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baby
     */
    select?: BabySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BabyInclude<ExtArgs> | null
    where?: BabyWhereInput
    orderBy?: BabyOrderByWithRelationInput | BabyOrderByWithRelationInput[]
    cursor?: BabyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BabyScalarFieldEnum | BabyScalarFieldEnum[]
  }

  /**
   * User.otpVerifications
   */
  export type User$otpVerificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpVerification
     */
    select?: OtpVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpVerificationInclude<ExtArgs> | null
    where?: OtpVerificationWhereInput
    orderBy?: OtpVerificationOrderByWithRelationInput | OtpVerificationOrderByWithRelationInput[]
    cursor?: OtpVerificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OtpVerificationScalarFieldEnum | OtpVerificationScalarFieldEnum[]
  }

  /**
   * User.sentRequests
   */
  export type User$sentRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    where?: MilkRequestWhereInput
    orderBy?: MilkRequestOrderByWithRelationInput | MilkRequestOrderByWithRelationInput[]
    cursor?: MilkRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MilkRequestScalarFieldEnum | MilkRequestScalarFieldEnum[]
  }

  /**
   * User.receivedRequests
   */
  export type User$receivedRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    where?: MilkRequestWhereInput
    orderBy?: MilkRequestOrderByWithRelationInput | MilkRequestOrderByWithRelationInput[]
    cursor?: MilkRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MilkRequestScalarFieldEnum | MilkRequestScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
    where?: RequestNotificationWhereInput
    orderBy?: RequestNotificationOrderByWithRelationInput | RequestNotificationOrderByWithRelationInput[]
    cursor?: RequestNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestNotificationScalarFieldEnum | RequestNotificationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Baby
   */

  export type AggregateBaby = {
    _count: BabyCountAggregateOutputType | null
    _avg: BabyAvgAggregateOutputType | null
    _sum: BabySumAggregateOutputType | null
    _min: BabyMinAggregateOutputType | null
    _max: BabyMaxAggregateOutputType | null
  }

  export type BabyAvgAggregateOutputType = {
    id: number | null
    weight: number | null
    height: number | null
    userId: number | null
  }

  export type BabySumAggregateOutputType = {
    id: number | null
    weight: number | null
    height: number | null
    userId: number | null
  }

  export type BabyMinAggregateOutputType = {
    id: number | null
    name: string | null
    gender: $Enums.Gender | null
    deliveryDate: Date | null
    bloodGroup: string | null
    weight: number | null
    height: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BabyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    gender: $Enums.Gender | null
    deliveryDate: Date | null
    bloodGroup: string | null
    weight: number | null
    height: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BabyCountAggregateOutputType = {
    id: number
    name: number
    gender: number
    deliveryDate: number
    bloodGroup: number
    weight: number
    height: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BabyAvgAggregateInputType = {
    id?: true
    weight?: true
    height?: true
    userId?: true
  }

  export type BabySumAggregateInputType = {
    id?: true
    weight?: true
    height?: true
    userId?: true
  }

  export type BabyMinAggregateInputType = {
    id?: true
    name?: true
    gender?: true
    deliveryDate?: true
    bloodGroup?: true
    weight?: true
    height?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BabyMaxAggregateInputType = {
    id?: true
    name?: true
    gender?: true
    deliveryDate?: true
    bloodGroup?: true
    weight?: true
    height?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BabyCountAggregateInputType = {
    id?: true
    name?: true
    gender?: true
    deliveryDate?: true
    bloodGroup?: true
    weight?: true
    height?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BabyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Baby to aggregate.
     */
    where?: BabyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Babies to fetch.
     */
    orderBy?: BabyOrderByWithRelationInput | BabyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BabyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Babies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Babies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Babies
    **/
    _count?: true | BabyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BabyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BabySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BabyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BabyMaxAggregateInputType
  }

  export type GetBabyAggregateType<T extends BabyAggregateArgs> = {
        [P in keyof T & keyof AggregateBaby]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBaby[P]>
      : GetScalarType<T[P], AggregateBaby[P]>
  }




  export type BabyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BabyWhereInput
    orderBy?: BabyOrderByWithAggregationInput | BabyOrderByWithAggregationInput[]
    by: BabyScalarFieldEnum[] | BabyScalarFieldEnum
    having?: BabyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BabyCountAggregateInputType | true
    _avg?: BabyAvgAggregateInputType
    _sum?: BabySumAggregateInputType
    _min?: BabyMinAggregateInputType
    _max?: BabyMaxAggregateInputType
  }

  export type BabyGroupByOutputType = {
    id: number
    name: string
    gender: $Enums.Gender
    deliveryDate: Date
    bloodGroup: string | null
    weight: number | null
    height: number | null
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: BabyCountAggregateOutputType | null
    _avg: BabyAvgAggregateOutputType | null
    _sum: BabySumAggregateOutputType | null
    _min: BabyMinAggregateOutputType | null
    _max: BabyMaxAggregateOutputType | null
  }

  type GetBabyGroupByPayload<T extends BabyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BabyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BabyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BabyGroupByOutputType[P]>
            : GetScalarType<T[P], BabyGroupByOutputType[P]>
        }
      >
    >


  export type BabySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    gender?: boolean
    deliveryDate?: boolean
    bloodGroup?: boolean
    weight?: boolean
    height?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    feedLogs?: boolean | Baby$feedLogsArgs<ExtArgs>
    diaperLogs?: boolean | Baby$diaperLogsArgs<ExtArgs>
    sleepLogs?: boolean | Baby$sleepLogsArgs<ExtArgs>
    _count?: boolean | BabyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["baby"]>


  export type BabySelectScalar = {
    id?: boolean
    name?: boolean
    gender?: boolean
    deliveryDate?: boolean
    bloodGroup?: boolean
    weight?: boolean
    height?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BabyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    feedLogs?: boolean | Baby$feedLogsArgs<ExtArgs>
    diaperLogs?: boolean | Baby$diaperLogsArgs<ExtArgs>
    sleepLogs?: boolean | Baby$sleepLogsArgs<ExtArgs>
    _count?: boolean | BabyCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BabyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Baby"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      feedLogs: Prisma.$FeedLogPayload<ExtArgs>[]
      diaperLogs: Prisma.$DiaperLogPayload<ExtArgs>[]
      sleepLogs: Prisma.$SleepLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      gender: $Enums.Gender
      deliveryDate: Date
      bloodGroup: string | null
      weight: number | null
      height: number | null
      userId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["baby"]>
    composites: {}
  }

  type BabyGetPayload<S extends boolean | null | undefined | BabyDefaultArgs> = $Result.GetResult<Prisma.$BabyPayload, S>

  type BabyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BabyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BabyCountAggregateInputType | true
    }

  export interface BabyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Baby'], meta: { name: 'Baby' } }
    /**
     * Find zero or one Baby that matches the filter.
     * @param {BabyFindUniqueArgs} args - Arguments to find a Baby
     * @example
     * // Get one Baby
     * const baby = await prisma.baby.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BabyFindUniqueArgs>(args: SelectSubset<T, BabyFindUniqueArgs<ExtArgs>>): Prisma__BabyClient<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Baby that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BabyFindUniqueOrThrowArgs} args - Arguments to find a Baby
     * @example
     * // Get one Baby
     * const baby = await prisma.baby.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BabyFindUniqueOrThrowArgs>(args: SelectSubset<T, BabyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BabyClient<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Baby that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BabyFindFirstArgs} args - Arguments to find a Baby
     * @example
     * // Get one Baby
     * const baby = await prisma.baby.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BabyFindFirstArgs>(args?: SelectSubset<T, BabyFindFirstArgs<ExtArgs>>): Prisma__BabyClient<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Baby that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BabyFindFirstOrThrowArgs} args - Arguments to find a Baby
     * @example
     * // Get one Baby
     * const baby = await prisma.baby.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BabyFindFirstOrThrowArgs>(args?: SelectSubset<T, BabyFindFirstOrThrowArgs<ExtArgs>>): Prisma__BabyClient<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Babies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BabyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Babies
     * const babies = await prisma.baby.findMany()
     * 
     * // Get first 10 Babies
     * const babies = await prisma.baby.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const babyWithIdOnly = await prisma.baby.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BabyFindManyArgs>(args?: SelectSubset<T, BabyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Baby.
     * @param {BabyCreateArgs} args - Arguments to create a Baby.
     * @example
     * // Create one Baby
     * const Baby = await prisma.baby.create({
     *   data: {
     *     // ... data to create a Baby
     *   }
     * })
     * 
     */
    create<T extends BabyCreateArgs>(args: SelectSubset<T, BabyCreateArgs<ExtArgs>>): Prisma__BabyClient<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Babies.
     * @param {BabyCreateManyArgs} args - Arguments to create many Babies.
     * @example
     * // Create many Babies
     * const baby = await prisma.baby.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BabyCreateManyArgs>(args?: SelectSubset<T, BabyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Baby.
     * @param {BabyDeleteArgs} args - Arguments to delete one Baby.
     * @example
     * // Delete one Baby
     * const Baby = await prisma.baby.delete({
     *   where: {
     *     // ... filter to delete one Baby
     *   }
     * })
     * 
     */
    delete<T extends BabyDeleteArgs>(args: SelectSubset<T, BabyDeleteArgs<ExtArgs>>): Prisma__BabyClient<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Baby.
     * @param {BabyUpdateArgs} args - Arguments to update one Baby.
     * @example
     * // Update one Baby
     * const baby = await prisma.baby.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BabyUpdateArgs>(args: SelectSubset<T, BabyUpdateArgs<ExtArgs>>): Prisma__BabyClient<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Babies.
     * @param {BabyDeleteManyArgs} args - Arguments to filter Babies to delete.
     * @example
     * // Delete a few Babies
     * const { count } = await prisma.baby.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BabyDeleteManyArgs>(args?: SelectSubset<T, BabyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Babies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BabyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Babies
     * const baby = await prisma.baby.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BabyUpdateManyArgs>(args: SelectSubset<T, BabyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Baby.
     * @param {BabyUpsertArgs} args - Arguments to update or create a Baby.
     * @example
     * // Update or create a Baby
     * const baby = await prisma.baby.upsert({
     *   create: {
     *     // ... data to create a Baby
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Baby we want to update
     *   }
     * })
     */
    upsert<T extends BabyUpsertArgs>(args: SelectSubset<T, BabyUpsertArgs<ExtArgs>>): Prisma__BabyClient<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Babies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BabyCountArgs} args - Arguments to filter Babies to count.
     * @example
     * // Count the number of Babies
     * const count = await prisma.baby.count({
     *   where: {
     *     // ... the filter for the Babies we want to count
     *   }
     * })
    **/
    count<T extends BabyCountArgs>(
      args?: Subset<T, BabyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BabyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Baby.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BabyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BabyAggregateArgs>(args: Subset<T, BabyAggregateArgs>): Prisma.PrismaPromise<GetBabyAggregateType<T>>

    /**
     * Group by Baby.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BabyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BabyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BabyGroupByArgs['orderBy'] }
        : { orderBy?: BabyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BabyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBabyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Baby model
   */
  readonly fields: BabyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Baby.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BabyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    feedLogs<T extends Baby$feedLogsArgs<ExtArgs> = {}>(args?: Subset<T, Baby$feedLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedLogPayload<ExtArgs>, T, "findMany"> | Null>
    diaperLogs<T extends Baby$diaperLogsArgs<ExtArgs> = {}>(args?: Subset<T, Baby$diaperLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiaperLogPayload<ExtArgs>, T, "findMany"> | Null>
    sleepLogs<T extends Baby$sleepLogsArgs<ExtArgs> = {}>(args?: Subset<T, Baby$sleepLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Baby model
   */ 
  interface BabyFieldRefs {
    readonly id: FieldRef<"Baby", 'Int'>
    readonly name: FieldRef<"Baby", 'String'>
    readonly gender: FieldRef<"Baby", 'Gender'>
    readonly deliveryDate: FieldRef<"Baby", 'DateTime'>
    readonly bloodGroup: FieldRef<"Baby", 'String'>
    readonly weight: FieldRef<"Baby", 'Float'>
    readonly height: FieldRef<"Baby", 'Float'>
    readonly userId: FieldRef<"Baby", 'Int'>
    readonly createdAt: FieldRef<"Baby", 'DateTime'>
    readonly updatedAt: FieldRef<"Baby", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Baby findUnique
   */
  export type BabyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baby
     */
    select?: BabySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BabyInclude<ExtArgs> | null
    /**
     * Filter, which Baby to fetch.
     */
    where: BabyWhereUniqueInput
  }

  /**
   * Baby findUniqueOrThrow
   */
  export type BabyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baby
     */
    select?: BabySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BabyInclude<ExtArgs> | null
    /**
     * Filter, which Baby to fetch.
     */
    where: BabyWhereUniqueInput
  }

  /**
   * Baby findFirst
   */
  export type BabyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baby
     */
    select?: BabySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BabyInclude<ExtArgs> | null
    /**
     * Filter, which Baby to fetch.
     */
    where?: BabyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Babies to fetch.
     */
    orderBy?: BabyOrderByWithRelationInput | BabyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Babies.
     */
    cursor?: BabyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Babies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Babies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Babies.
     */
    distinct?: BabyScalarFieldEnum | BabyScalarFieldEnum[]
  }

  /**
   * Baby findFirstOrThrow
   */
  export type BabyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baby
     */
    select?: BabySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BabyInclude<ExtArgs> | null
    /**
     * Filter, which Baby to fetch.
     */
    where?: BabyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Babies to fetch.
     */
    orderBy?: BabyOrderByWithRelationInput | BabyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Babies.
     */
    cursor?: BabyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Babies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Babies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Babies.
     */
    distinct?: BabyScalarFieldEnum | BabyScalarFieldEnum[]
  }

  /**
   * Baby findMany
   */
  export type BabyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baby
     */
    select?: BabySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BabyInclude<ExtArgs> | null
    /**
     * Filter, which Babies to fetch.
     */
    where?: BabyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Babies to fetch.
     */
    orderBy?: BabyOrderByWithRelationInput | BabyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Babies.
     */
    cursor?: BabyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Babies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Babies.
     */
    skip?: number
    distinct?: BabyScalarFieldEnum | BabyScalarFieldEnum[]
  }

  /**
   * Baby create
   */
  export type BabyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baby
     */
    select?: BabySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BabyInclude<ExtArgs> | null
    /**
     * The data needed to create a Baby.
     */
    data: XOR<BabyCreateInput, BabyUncheckedCreateInput>
  }

  /**
   * Baby createMany
   */
  export type BabyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Babies.
     */
    data: BabyCreateManyInput | BabyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Baby update
   */
  export type BabyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baby
     */
    select?: BabySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BabyInclude<ExtArgs> | null
    /**
     * The data needed to update a Baby.
     */
    data: XOR<BabyUpdateInput, BabyUncheckedUpdateInput>
    /**
     * Choose, which Baby to update.
     */
    where: BabyWhereUniqueInput
  }

  /**
   * Baby updateMany
   */
  export type BabyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Babies.
     */
    data: XOR<BabyUpdateManyMutationInput, BabyUncheckedUpdateManyInput>
    /**
     * Filter which Babies to update
     */
    where?: BabyWhereInput
  }

  /**
   * Baby upsert
   */
  export type BabyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baby
     */
    select?: BabySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BabyInclude<ExtArgs> | null
    /**
     * The filter to search for the Baby to update in case it exists.
     */
    where: BabyWhereUniqueInput
    /**
     * In case the Baby found by the `where` argument doesn't exist, create a new Baby with this data.
     */
    create: XOR<BabyCreateInput, BabyUncheckedCreateInput>
    /**
     * In case the Baby was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BabyUpdateInput, BabyUncheckedUpdateInput>
  }

  /**
   * Baby delete
   */
  export type BabyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baby
     */
    select?: BabySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BabyInclude<ExtArgs> | null
    /**
     * Filter which Baby to delete.
     */
    where: BabyWhereUniqueInput
  }

  /**
   * Baby deleteMany
   */
  export type BabyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Babies to delete
     */
    where?: BabyWhereInput
  }

  /**
   * Baby.feedLogs
   */
  export type Baby$feedLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLog
     */
    select?: FeedLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLogInclude<ExtArgs> | null
    where?: FeedLogWhereInput
    orderBy?: FeedLogOrderByWithRelationInput | FeedLogOrderByWithRelationInput[]
    cursor?: FeedLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedLogScalarFieldEnum | FeedLogScalarFieldEnum[]
  }

  /**
   * Baby.diaperLogs
   */
  export type Baby$diaperLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaperLog
     */
    select?: DiaperLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiaperLogInclude<ExtArgs> | null
    where?: DiaperLogWhereInput
    orderBy?: DiaperLogOrderByWithRelationInput | DiaperLogOrderByWithRelationInput[]
    cursor?: DiaperLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiaperLogScalarFieldEnum | DiaperLogScalarFieldEnum[]
  }

  /**
   * Baby.sleepLogs
   */
  export type Baby$sleepLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    where?: SleepLogWhereInput
    orderBy?: SleepLogOrderByWithRelationInput | SleepLogOrderByWithRelationInput[]
    cursor?: SleepLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SleepLogScalarFieldEnum | SleepLogScalarFieldEnum[]
  }

  /**
   * Baby without action
   */
  export type BabyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Baby
     */
    select?: BabySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BabyInclude<ExtArgs> | null
  }


  /**
   * Model FeedLog
   */

  export type AggregateFeedLog = {
    _count: FeedLogCountAggregateOutputType | null
    _avg: FeedLogAvgAggregateOutputType | null
    _sum: FeedLogSumAggregateOutputType | null
    _min: FeedLogMinAggregateOutputType | null
    _max: FeedLogMaxAggregateOutputType | null
  }

  export type FeedLogAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    babyId: number | null
  }

  export type FeedLogSumAggregateOutputType = {
    id: number | null
    amount: number | null
    babyId: number | null
  }

  export type FeedLogMinAggregateOutputType = {
    id: number | null
    feedingDate: Date | null
    startTime: Date | null
    endTime: Date | null
    feedType: $Enums.FeedType | null
    position: $Enums.Position | null
    amount: number | null
    note: string | null
    babyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedLogMaxAggregateOutputType = {
    id: number | null
    feedingDate: Date | null
    startTime: Date | null
    endTime: Date | null
    feedType: $Enums.FeedType | null
    position: $Enums.Position | null
    amount: number | null
    note: string | null
    babyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedLogCountAggregateOutputType = {
    id: number
    feedingDate: number
    startTime: number
    endTime: number
    feedType: number
    position: number
    amount: number
    note: number
    babyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FeedLogAvgAggregateInputType = {
    id?: true
    amount?: true
    babyId?: true
  }

  export type FeedLogSumAggregateInputType = {
    id?: true
    amount?: true
    babyId?: true
  }

  export type FeedLogMinAggregateInputType = {
    id?: true
    feedingDate?: true
    startTime?: true
    endTime?: true
    feedType?: true
    position?: true
    amount?: true
    note?: true
    babyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedLogMaxAggregateInputType = {
    id?: true
    feedingDate?: true
    startTime?: true
    endTime?: true
    feedType?: true
    position?: true
    amount?: true
    note?: true
    babyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedLogCountAggregateInputType = {
    id?: true
    feedingDate?: true
    startTime?: true
    endTime?: true
    feedType?: true
    position?: true
    amount?: true
    note?: true
    babyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FeedLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedLog to aggregate.
     */
    where?: FeedLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedLogs to fetch.
     */
    orderBy?: FeedLogOrderByWithRelationInput | FeedLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeedLogs
    **/
    _count?: true | FeedLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedLogMaxAggregateInputType
  }

  export type GetFeedLogAggregateType<T extends FeedLogAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedLog[P]>
      : GetScalarType<T[P], AggregateFeedLog[P]>
  }




  export type FeedLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedLogWhereInput
    orderBy?: FeedLogOrderByWithAggregationInput | FeedLogOrderByWithAggregationInput[]
    by: FeedLogScalarFieldEnum[] | FeedLogScalarFieldEnum
    having?: FeedLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedLogCountAggregateInputType | true
    _avg?: FeedLogAvgAggregateInputType
    _sum?: FeedLogSumAggregateInputType
    _min?: FeedLogMinAggregateInputType
    _max?: FeedLogMaxAggregateInputType
  }

  export type FeedLogGroupByOutputType = {
    id: number
    feedingDate: Date
    startTime: Date
    endTime: Date
    feedType: $Enums.FeedType
    position: $Enums.Position | null
    amount: number | null
    note: string | null
    babyId: number
    createdAt: Date
    updatedAt: Date
    _count: FeedLogCountAggregateOutputType | null
    _avg: FeedLogAvgAggregateOutputType | null
    _sum: FeedLogSumAggregateOutputType | null
    _min: FeedLogMinAggregateOutputType | null
    _max: FeedLogMaxAggregateOutputType | null
  }

  type GetFeedLogGroupByPayload<T extends FeedLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedLogGroupByOutputType[P]>
            : GetScalarType<T[P], FeedLogGroupByOutputType[P]>
        }
      >
    >


  export type FeedLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    feedingDate?: boolean
    startTime?: boolean
    endTime?: boolean
    feedType?: boolean
    position?: boolean
    amount?: boolean
    note?: boolean
    babyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    baby?: boolean | BabyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedLog"]>


  export type FeedLogSelectScalar = {
    id?: boolean
    feedingDate?: boolean
    startTime?: boolean
    endTime?: boolean
    feedType?: boolean
    position?: boolean
    amount?: boolean
    note?: boolean
    babyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FeedLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    baby?: boolean | BabyDefaultArgs<ExtArgs>
  }

  export type $FeedLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeedLog"
    objects: {
      baby: Prisma.$BabyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      feedingDate: Date
      startTime: Date
      endTime: Date
      feedType: $Enums.FeedType
      position: $Enums.Position | null
      amount: number | null
      note: string | null
      babyId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["feedLog"]>
    composites: {}
  }

  type FeedLogGetPayload<S extends boolean | null | undefined | FeedLogDefaultArgs> = $Result.GetResult<Prisma.$FeedLogPayload, S>

  type FeedLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedLogCountAggregateInputType | true
    }

  export interface FeedLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedLog'], meta: { name: 'FeedLog' } }
    /**
     * Find zero or one FeedLog that matches the filter.
     * @param {FeedLogFindUniqueArgs} args - Arguments to find a FeedLog
     * @example
     * // Get one FeedLog
     * const feedLog = await prisma.feedLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedLogFindUniqueArgs>(args: SelectSubset<T, FeedLogFindUniqueArgs<ExtArgs>>): Prisma__FeedLogClient<$Result.GetResult<Prisma.$FeedLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FeedLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FeedLogFindUniqueOrThrowArgs} args - Arguments to find a FeedLog
     * @example
     * // Get one FeedLog
     * const feedLog = await prisma.feedLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedLogFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedLogClient<$Result.GetResult<Prisma.$FeedLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FeedLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLogFindFirstArgs} args - Arguments to find a FeedLog
     * @example
     * // Get one FeedLog
     * const feedLog = await prisma.feedLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedLogFindFirstArgs>(args?: SelectSubset<T, FeedLogFindFirstArgs<ExtArgs>>): Prisma__FeedLogClient<$Result.GetResult<Prisma.$FeedLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FeedLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLogFindFirstOrThrowArgs} args - Arguments to find a FeedLog
     * @example
     * // Get one FeedLog
     * const feedLog = await prisma.feedLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedLogFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedLogClient<$Result.GetResult<Prisma.$FeedLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FeedLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedLogs
     * const feedLogs = await prisma.feedLog.findMany()
     * 
     * // Get first 10 FeedLogs
     * const feedLogs = await prisma.feedLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedLogWithIdOnly = await prisma.feedLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedLogFindManyArgs>(args?: SelectSubset<T, FeedLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FeedLog.
     * @param {FeedLogCreateArgs} args - Arguments to create a FeedLog.
     * @example
     * // Create one FeedLog
     * const FeedLog = await prisma.feedLog.create({
     *   data: {
     *     // ... data to create a FeedLog
     *   }
     * })
     * 
     */
    create<T extends FeedLogCreateArgs>(args: SelectSubset<T, FeedLogCreateArgs<ExtArgs>>): Prisma__FeedLogClient<$Result.GetResult<Prisma.$FeedLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FeedLogs.
     * @param {FeedLogCreateManyArgs} args - Arguments to create many FeedLogs.
     * @example
     * // Create many FeedLogs
     * const feedLog = await prisma.feedLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedLogCreateManyArgs>(args?: SelectSubset<T, FeedLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeedLog.
     * @param {FeedLogDeleteArgs} args - Arguments to delete one FeedLog.
     * @example
     * // Delete one FeedLog
     * const FeedLog = await prisma.feedLog.delete({
     *   where: {
     *     // ... filter to delete one FeedLog
     *   }
     * })
     * 
     */
    delete<T extends FeedLogDeleteArgs>(args: SelectSubset<T, FeedLogDeleteArgs<ExtArgs>>): Prisma__FeedLogClient<$Result.GetResult<Prisma.$FeedLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FeedLog.
     * @param {FeedLogUpdateArgs} args - Arguments to update one FeedLog.
     * @example
     * // Update one FeedLog
     * const feedLog = await prisma.feedLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedLogUpdateArgs>(args: SelectSubset<T, FeedLogUpdateArgs<ExtArgs>>): Prisma__FeedLogClient<$Result.GetResult<Prisma.$FeedLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FeedLogs.
     * @param {FeedLogDeleteManyArgs} args - Arguments to filter FeedLogs to delete.
     * @example
     * // Delete a few FeedLogs
     * const { count } = await prisma.feedLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedLogDeleteManyArgs>(args?: SelectSubset<T, FeedLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedLogs
     * const feedLog = await prisma.feedLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedLogUpdateManyArgs>(args: SelectSubset<T, FeedLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeedLog.
     * @param {FeedLogUpsertArgs} args - Arguments to update or create a FeedLog.
     * @example
     * // Update or create a FeedLog
     * const feedLog = await prisma.feedLog.upsert({
     *   create: {
     *     // ... data to create a FeedLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedLog we want to update
     *   }
     * })
     */
    upsert<T extends FeedLogUpsertArgs>(args: SelectSubset<T, FeedLogUpsertArgs<ExtArgs>>): Prisma__FeedLogClient<$Result.GetResult<Prisma.$FeedLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FeedLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLogCountArgs} args - Arguments to filter FeedLogs to count.
     * @example
     * // Count the number of FeedLogs
     * const count = await prisma.feedLog.count({
     *   where: {
     *     // ... the filter for the FeedLogs we want to count
     *   }
     * })
    **/
    count<T extends FeedLogCountArgs>(
      args?: Subset<T, FeedLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedLogAggregateArgs>(args: Subset<T, FeedLogAggregateArgs>): Prisma.PrismaPromise<GetFeedLogAggregateType<T>>

    /**
     * Group by FeedLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedLogGroupByArgs['orderBy'] }
        : { orderBy?: FeedLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedLog model
   */
  readonly fields: FeedLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    baby<T extends BabyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BabyDefaultArgs<ExtArgs>>): Prisma__BabyClient<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeedLog model
   */ 
  interface FeedLogFieldRefs {
    readonly id: FieldRef<"FeedLog", 'Int'>
    readonly feedingDate: FieldRef<"FeedLog", 'DateTime'>
    readonly startTime: FieldRef<"FeedLog", 'DateTime'>
    readonly endTime: FieldRef<"FeedLog", 'DateTime'>
    readonly feedType: FieldRef<"FeedLog", 'FeedType'>
    readonly position: FieldRef<"FeedLog", 'Position'>
    readonly amount: FieldRef<"FeedLog", 'Float'>
    readonly note: FieldRef<"FeedLog", 'String'>
    readonly babyId: FieldRef<"FeedLog", 'Int'>
    readonly createdAt: FieldRef<"FeedLog", 'DateTime'>
    readonly updatedAt: FieldRef<"FeedLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FeedLog findUnique
   */
  export type FeedLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLog
     */
    select?: FeedLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLogInclude<ExtArgs> | null
    /**
     * Filter, which FeedLog to fetch.
     */
    where: FeedLogWhereUniqueInput
  }

  /**
   * FeedLog findUniqueOrThrow
   */
  export type FeedLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLog
     */
    select?: FeedLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLogInclude<ExtArgs> | null
    /**
     * Filter, which FeedLog to fetch.
     */
    where: FeedLogWhereUniqueInput
  }

  /**
   * FeedLog findFirst
   */
  export type FeedLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLog
     */
    select?: FeedLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLogInclude<ExtArgs> | null
    /**
     * Filter, which FeedLog to fetch.
     */
    where?: FeedLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedLogs to fetch.
     */
    orderBy?: FeedLogOrderByWithRelationInput | FeedLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedLogs.
     */
    cursor?: FeedLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedLogs.
     */
    distinct?: FeedLogScalarFieldEnum | FeedLogScalarFieldEnum[]
  }

  /**
   * FeedLog findFirstOrThrow
   */
  export type FeedLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLog
     */
    select?: FeedLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLogInclude<ExtArgs> | null
    /**
     * Filter, which FeedLog to fetch.
     */
    where?: FeedLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedLogs to fetch.
     */
    orderBy?: FeedLogOrderByWithRelationInput | FeedLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedLogs.
     */
    cursor?: FeedLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedLogs.
     */
    distinct?: FeedLogScalarFieldEnum | FeedLogScalarFieldEnum[]
  }

  /**
   * FeedLog findMany
   */
  export type FeedLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLog
     */
    select?: FeedLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLogInclude<ExtArgs> | null
    /**
     * Filter, which FeedLogs to fetch.
     */
    where?: FeedLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedLogs to fetch.
     */
    orderBy?: FeedLogOrderByWithRelationInput | FeedLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeedLogs.
     */
    cursor?: FeedLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedLogs.
     */
    skip?: number
    distinct?: FeedLogScalarFieldEnum | FeedLogScalarFieldEnum[]
  }

  /**
   * FeedLog create
   */
  export type FeedLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLog
     */
    select?: FeedLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLogInclude<ExtArgs> | null
    /**
     * The data needed to create a FeedLog.
     */
    data: XOR<FeedLogCreateInput, FeedLogUncheckedCreateInput>
  }

  /**
   * FeedLog createMany
   */
  export type FeedLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeedLogs.
     */
    data: FeedLogCreateManyInput | FeedLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeedLog update
   */
  export type FeedLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLog
     */
    select?: FeedLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLogInclude<ExtArgs> | null
    /**
     * The data needed to update a FeedLog.
     */
    data: XOR<FeedLogUpdateInput, FeedLogUncheckedUpdateInput>
    /**
     * Choose, which FeedLog to update.
     */
    where: FeedLogWhereUniqueInput
  }

  /**
   * FeedLog updateMany
   */
  export type FeedLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeedLogs.
     */
    data: XOR<FeedLogUpdateManyMutationInput, FeedLogUncheckedUpdateManyInput>
    /**
     * Filter which FeedLogs to update
     */
    where?: FeedLogWhereInput
  }

  /**
   * FeedLog upsert
   */
  export type FeedLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLog
     */
    select?: FeedLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLogInclude<ExtArgs> | null
    /**
     * The filter to search for the FeedLog to update in case it exists.
     */
    where: FeedLogWhereUniqueInput
    /**
     * In case the FeedLog found by the `where` argument doesn't exist, create a new FeedLog with this data.
     */
    create: XOR<FeedLogCreateInput, FeedLogUncheckedCreateInput>
    /**
     * In case the FeedLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedLogUpdateInput, FeedLogUncheckedUpdateInput>
  }

  /**
   * FeedLog delete
   */
  export type FeedLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLog
     */
    select?: FeedLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLogInclude<ExtArgs> | null
    /**
     * Filter which FeedLog to delete.
     */
    where: FeedLogWhereUniqueInput
  }

  /**
   * FeedLog deleteMany
   */
  export type FeedLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedLogs to delete
     */
    where?: FeedLogWhereInput
  }

  /**
   * FeedLog without action
   */
  export type FeedLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedLog
     */
    select?: FeedLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedLogInclude<ExtArgs> | null
  }


  /**
   * Model DiaperLog
   */

  export type AggregateDiaperLog = {
    _count: DiaperLogCountAggregateOutputType | null
    _avg: DiaperLogAvgAggregateOutputType | null
    _sum: DiaperLogSumAggregateOutputType | null
    _min: DiaperLogMinAggregateOutputType | null
    _max: DiaperLogMaxAggregateOutputType | null
  }

  export type DiaperLogAvgAggregateOutputType = {
    id: number | null
    babyId: number | null
  }

  export type DiaperLogSumAggregateOutputType = {
    id: number | null
    babyId: number | null
  }

  export type DiaperLogMinAggregateOutputType = {
    id: number | null
    date: Date | null
    time: Date | null
    diaperType: $Enums.DiaperType | null
    note: string | null
    babyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiaperLogMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    time: Date | null
    diaperType: $Enums.DiaperType | null
    note: string | null
    babyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DiaperLogCountAggregateOutputType = {
    id: number
    date: number
    time: number
    diaperType: number
    note: number
    babyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DiaperLogAvgAggregateInputType = {
    id?: true
    babyId?: true
  }

  export type DiaperLogSumAggregateInputType = {
    id?: true
    babyId?: true
  }

  export type DiaperLogMinAggregateInputType = {
    id?: true
    date?: true
    time?: true
    diaperType?: true
    note?: true
    babyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiaperLogMaxAggregateInputType = {
    id?: true
    date?: true
    time?: true
    diaperType?: true
    note?: true
    babyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DiaperLogCountAggregateInputType = {
    id?: true
    date?: true
    time?: true
    diaperType?: true
    note?: true
    babyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DiaperLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiaperLog to aggregate.
     */
    where?: DiaperLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiaperLogs to fetch.
     */
    orderBy?: DiaperLogOrderByWithRelationInput | DiaperLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiaperLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiaperLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiaperLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DiaperLogs
    **/
    _count?: true | DiaperLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiaperLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiaperLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiaperLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiaperLogMaxAggregateInputType
  }

  export type GetDiaperLogAggregateType<T extends DiaperLogAggregateArgs> = {
        [P in keyof T & keyof AggregateDiaperLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiaperLog[P]>
      : GetScalarType<T[P], AggregateDiaperLog[P]>
  }




  export type DiaperLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiaperLogWhereInput
    orderBy?: DiaperLogOrderByWithAggregationInput | DiaperLogOrderByWithAggregationInput[]
    by: DiaperLogScalarFieldEnum[] | DiaperLogScalarFieldEnum
    having?: DiaperLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiaperLogCountAggregateInputType | true
    _avg?: DiaperLogAvgAggregateInputType
    _sum?: DiaperLogSumAggregateInputType
    _min?: DiaperLogMinAggregateInputType
    _max?: DiaperLogMaxAggregateInputType
  }

  export type DiaperLogGroupByOutputType = {
    id: number
    date: Date
    time: Date
    diaperType: $Enums.DiaperType
    note: string | null
    babyId: number
    createdAt: Date
    updatedAt: Date
    _count: DiaperLogCountAggregateOutputType | null
    _avg: DiaperLogAvgAggregateOutputType | null
    _sum: DiaperLogSumAggregateOutputType | null
    _min: DiaperLogMinAggregateOutputType | null
    _max: DiaperLogMaxAggregateOutputType | null
  }

  type GetDiaperLogGroupByPayload<T extends DiaperLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiaperLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiaperLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiaperLogGroupByOutputType[P]>
            : GetScalarType<T[P], DiaperLogGroupByOutputType[P]>
        }
      >
    >


  export type DiaperLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    time?: boolean
    diaperType?: boolean
    note?: boolean
    babyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    baby?: boolean | BabyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["diaperLog"]>


  export type DiaperLogSelectScalar = {
    id?: boolean
    date?: boolean
    time?: boolean
    diaperType?: boolean
    note?: boolean
    babyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DiaperLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    baby?: boolean | BabyDefaultArgs<ExtArgs>
  }

  export type $DiaperLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DiaperLog"
    objects: {
      baby: Prisma.$BabyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      time: Date
      diaperType: $Enums.DiaperType
      note: string | null
      babyId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["diaperLog"]>
    composites: {}
  }

  type DiaperLogGetPayload<S extends boolean | null | undefined | DiaperLogDefaultArgs> = $Result.GetResult<Prisma.$DiaperLogPayload, S>

  type DiaperLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DiaperLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DiaperLogCountAggregateInputType | true
    }

  export interface DiaperLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DiaperLog'], meta: { name: 'DiaperLog' } }
    /**
     * Find zero or one DiaperLog that matches the filter.
     * @param {DiaperLogFindUniqueArgs} args - Arguments to find a DiaperLog
     * @example
     * // Get one DiaperLog
     * const diaperLog = await prisma.diaperLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiaperLogFindUniqueArgs>(args: SelectSubset<T, DiaperLogFindUniqueArgs<ExtArgs>>): Prisma__DiaperLogClient<$Result.GetResult<Prisma.$DiaperLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DiaperLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DiaperLogFindUniqueOrThrowArgs} args - Arguments to find a DiaperLog
     * @example
     * // Get one DiaperLog
     * const diaperLog = await prisma.diaperLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiaperLogFindUniqueOrThrowArgs>(args: SelectSubset<T, DiaperLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiaperLogClient<$Result.GetResult<Prisma.$DiaperLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DiaperLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaperLogFindFirstArgs} args - Arguments to find a DiaperLog
     * @example
     * // Get one DiaperLog
     * const diaperLog = await prisma.diaperLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiaperLogFindFirstArgs>(args?: SelectSubset<T, DiaperLogFindFirstArgs<ExtArgs>>): Prisma__DiaperLogClient<$Result.GetResult<Prisma.$DiaperLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DiaperLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaperLogFindFirstOrThrowArgs} args - Arguments to find a DiaperLog
     * @example
     * // Get one DiaperLog
     * const diaperLog = await prisma.diaperLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiaperLogFindFirstOrThrowArgs>(args?: SelectSubset<T, DiaperLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiaperLogClient<$Result.GetResult<Prisma.$DiaperLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DiaperLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaperLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DiaperLogs
     * const diaperLogs = await prisma.diaperLog.findMany()
     * 
     * // Get first 10 DiaperLogs
     * const diaperLogs = await prisma.diaperLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const diaperLogWithIdOnly = await prisma.diaperLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiaperLogFindManyArgs>(args?: SelectSubset<T, DiaperLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiaperLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DiaperLog.
     * @param {DiaperLogCreateArgs} args - Arguments to create a DiaperLog.
     * @example
     * // Create one DiaperLog
     * const DiaperLog = await prisma.diaperLog.create({
     *   data: {
     *     // ... data to create a DiaperLog
     *   }
     * })
     * 
     */
    create<T extends DiaperLogCreateArgs>(args: SelectSubset<T, DiaperLogCreateArgs<ExtArgs>>): Prisma__DiaperLogClient<$Result.GetResult<Prisma.$DiaperLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DiaperLogs.
     * @param {DiaperLogCreateManyArgs} args - Arguments to create many DiaperLogs.
     * @example
     * // Create many DiaperLogs
     * const diaperLog = await prisma.diaperLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiaperLogCreateManyArgs>(args?: SelectSubset<T, DiaperLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DiaperLog.
     * @param {DiaperLogDeleteArgs} args - Arguments to delete one DiaperLog.
     * @example
     * // Delete one DiaperLog
     * const DiaperLog = await prisma.diaperLog.delete({
     *   where: {
     *     // ... filter to delete one DiaperLog
     *   }
     * })
     * 
     */
    delete<T extends DiaperLogDeleteArgs>(args: SelectSubset<T, DiaperLogDeleteArgs<ExtArgs>>): Prisma__DiaperLogClient<$Result.GetResult<Prisma.$DiaperLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DiaperLog.
     * @param {DiaperLogUpdateArgs} args - Arguments to update one DiaperLog.
     * @example
     * // Update one DiaperLog
     * const diaperLog = await prisma.diaperLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiaperLogUpdateArgs>(args: SelectSubset<T, DiaperLogUpdateArgs<ExtArgs>>): Prisma__DiaperLogClient<$Result.GetResult<Prisma.$DiaperLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DiaperLogs.
     * @param {DiaperLogDeleteManyArgs} args - Arguments to filter DiaperLogs to delete.
     * @example
     * // Delete a few DiaperLogs
     * const { count } = await prisma.diaperLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiaperLogDeleteManyArgs>(args?: SelectSubset<T, DiaperLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DiaperLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaperLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DiaperLogs
     * const diaperLog = await prisma.diaperLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiaperLogUpdateManyArgs>(args: SelectSubset<T, DiaperLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DiaperLog.
     * @param {DiaperLogUpsertArgs} args - Arguments to update or create a DiaperLog.
     * @example
     * // Update or create a DiaperLog
     * const diaperLog = await prisma.diaperLog.upsert({
     *   create: {
     *     // ... data to create a DiaperLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DiaperLog we want to update
     *   }
     * })
     */
    upsert<T extends DiaperLogUpsertArgs>(args: SelectSubset<T, DiaperLogUpsertArgs<ExtArgs>>): Prisma__DiaperLogClient<$Result.GetResult<Prisma.$DiaperLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DiaperLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaperLogCountArgs} args - Arguments to filter DiaperLogs to count.
     * @example
     * // Count the number of DiaperLogs
     * const count = await prisma.diaperLog.count({
     *   where: {
     *     // ... the filter for the DiaperLogs we want to count
     *   }
     * })
    **/
    count<T extends DiaperLogCountArgs>(
      args?: Subset<T, DiaperLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiaperLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DiaperLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaperLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiaperLogAggregateArgs>(args: Subset<T, DiaperLogAggregateArgs>): Prisma.PrismaPromise<GetDiaperLogAggregateType<T>>

    /**
     * Group by DiaperLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiaperLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiaperLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiaperLogGroupByArgs['orderBy'] }
        : { orderBy?: DiaperLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiaperLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiaperLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DiaperLog model
   */
  readonly fields: DiaperLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DiaperLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiaperLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    baby<T extends BabyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BabyDefaultArgs<ExtArgs>>): Prisma__BabyClient<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DiaperLog model
   */ 
  interface DiaperLogFieldRefs {
    readonly id: FieldRef<"DiaperLog", 'Int'>
    readonly date: FieldRef<"DiaperLog", 'DateTime'>
    readonly time: FieldRef<"DiaperLog", 'DateTime'>
    readonly diaperType: FieldRef<"DiaperLog", 'DiaperType'>
    readonly note: FieldRef<"DiaperLog", 'String'>
    readonly babyId: FieldRef<"DiaperLog", 'Int'>
    readonly createdAt: FieldRef<"DiaperLog", 'DateTime'>
    readonly updatedAt: FieldRef<"DiaperLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DiaperLog findUnique
   */
  export type DiaperLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaperLog
     */
    select?: DiaperLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiaperLogInclude<ExtArgs> | null
    /**
     * Filter, which DiaperLog to fetch.
     */
    where: DiaperLogWhereUniqueInput
  }

  /**
   * DiaperLog findUniqueOrThrow
   */
  export type DiaperLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaperLog
     */
    select?: DiaperLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiaperLogInclude<ExtArgs> | null
    /**
     * Filter, which DiaperLog to fetch.
     */
    where: DiaperLogWhereUniqueInput
  }

  /**
   * DiaperLog findFirst
   */
  export type DiaperLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaperLog
     */
    select?: DiaperLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiaperLogInclude<ExtArgs> | null
    /**
     * Filter, which DiaperLog to fetch.
     */
    where?: DiaperLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiaperLogs to fetch.
     */
    orderBy?: DiaperLogOrderByWithRelationInput | DiaperLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiaperLogs.
     */
    cursor?: DiaperLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiaperLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiaperLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiaperLogs.
     */
    distinct?: DiaperLogScalarFieldEnum | DiaperLogScalarFieldEnum[]
  }

  /**
   * DiaperLog findFirstOrThrow
   */
  export type DiaperLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaperLog
     */
    select?: DiaperLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiaperLogInclude<ExtArgs> | null
    /**
     * Filter, which DiaperLog to fetch.
     */
    where?: DiaperLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiaperLogs to fetch.
     */
    orderBy?: DiaperLogOrderByWithRelationInput | DiaperLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DiaperLogs.
     */
    cursor?: DiaperLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiaperLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiaperLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DiaperLogs.
     */
    distinct?: DiaperLogScalarFieldEnum | DiaperLogScalarFieldEnum[]
  }

  /**
   * DiaperLog findMany
   */
  export type DiaperLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaperLog
     */
    select?: DiaperLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiaperLogInclude<ExtArgs> | null
    /**
     * Filter, which DiaperLogs to fetch.
     */
    where?: DiaperLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DiaperLogs to fetch.
     */
    orderBy?: DiaperLogOrderByWithRelationInput | DiaperLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DiaperLogs.
     */
    cursor?: DiaperLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DiaperLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DiaperLogs.
     */
    skip?: number
    distinct?: DiaperLogScalarFieldEnum | DiaperLogScalarFieldEnum[]
  }

  /**
   * DiaperLog create
   */
  export type DiaperLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaperLog
     */
    select?: DiaperLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiaperLogInclude<ExtArgs> | null
    /**
     * The data needed to create a DiaperLog.
     */
    data: XOR<DiaperLogCreateInput, DiaperLogUncheckedCreateInput>
  }

  /**
   * DiaperLog createMany
   */
  export type DiaperLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DiaperLogs.
     */
    data: DiaperLogCreateManyInput | DiaperLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DiaperLog update
   */
  export type DiaperLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaperLog
     */
    select?: DiaperLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiaperLogInclude<ExtArgs> | null
    /**
     * The data needed to update a DiaperLog.
     */
    data: XOR<DiaperLogUpdateInput, DiaperLogUncheckedUpdateInput>
    /**
     * Choose, which DiaperLog to update.
     */
    where: DiaperLogWhereUniqueInput
  }

  /**
   * DiaperLog updateMany
   */
  export type DiaperLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DiaperLogs.
     */
    data: XOR<DiaperLogUpdateManyMutationInput, DiaperLogUncheckedUpdateManyInput>
    /**
     * Filter which DiaperLogs to update
     */
    where?: DiaperLogWhereInput
  }

  /**
   * DiaperLog upsert
   */
  export type DiaperLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaperLog
     */
    select?: DiaperLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiaperLogInclude<ExtArgs> | null
    /**
     * The filter to search for the DiaperLog to update in case it exists.
     */
    where: DiaperLogWhereUniqueInput
    /**
     * In case the DiaperLog found by the `where` argument doesn't exist, create a new DiaperLog with this data.
     */
    create: XOR<DiaperLogCreateInput, DiaperLogUncheckedCreateInput>
    /**
     * In case the DiaperLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiaperLogUpdateInput, DiaperLogUncheckedUpdateInput>
  }

  /**
   * DiaperLog delete
   */
  export type DiaperLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaperLog
     */
    select?: DiaperLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiaperLogInclude<ExtArgs> | null
    /**
     * Filter which DiaperLog to delete.
     */
    where: DiaperLogWhereUniqueInput
  }

  /**
   * DiaperLog deleteMany
   */
  export type DiaperLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DiaperLogs to delete
     */
    where?: DiaperLogWhereInput
  }

  /**
   * DiaperLog without action
   */
  export type DiaperLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DiaperLog
     */
    select?: DiaperLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DiaperLogInclude<ExtArgs> | null
  }


  /**
   * Model SleepLog
   */

  export type AggregateSleepLog = {
    _count: SleepLogCountAggregateOutputType | null
    _avg: SleepLogAvgAggregateOutputType | null
    _sum: SleepLogSumAggregateOutputType | null
    _min: SleepLogMinAggregateOutputType | null
    _max: SleepLogMaxAggregateOutputType | null
  }

  export type SleepLogAvgAggregateOutputType = {
    id: number | null
    babyId: number | null
  }

  export type SleepLogSumAggregateOutputType = {
    id: number | null
    babyId: number | null
  }

  export type SleepLogMinAggregateOutputType = {
    id: number | null
    date: Date | null
    startTime: Date | null
    endTime: Date | null
    sleepQuality: string | null
    location: $Enums.SleepLocation | null
    note: string | null
    babyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SleepLogMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    startTime: Date | null
    endTime: Date | null
    sleepQuality: string | null
    location: $Enums.SleepLocation | null
    note: string | null
    babyId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SleepLogCountAggregateOutputType = {
    id: number
    date: number
    startTime: number
    endTime: number
    sleepQuality: number
    location: number
    note: number
    babyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SleepLogAvgAggregateInputType = {
    id?: true
    babyId?: true
  }

  export type SleepLogSumAggregateInputType = {
    id?: true
    babyId?: true
  }

  export type SleepLogMinAggregateInputType = {
    id?: true
    date?: true
    startTime?: true
    endTime?: true
    sleepQuality?: true
    location?: true
    note?: true
    babyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SleepLogMaxAggregateInputType = {
    id?: true
    date?: true
    startTime?: true
    endTime?: true
    sleepQuality?: true
    location?: true
    note?: true
    babyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SleepLogCountAggregateInputType = {
    id?: true
    date?: true
    startTime?: true
    endTime?: true
    sleepQuality?: true
    location?: true
    note?: true
    babyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SleepLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SleepLog to aggregate.
     */
    where?: SleepLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SleepLogs to fetch.
     */
    orderBy?: SleepLogOrderByWithRelationInput | SleepLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SleepLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SleepLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SleepLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SleepLogs
    **/
    _count?: true | SleepLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SleepLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SleepLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SleepLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SleepLogMaxAggregateInputType
  }

  export type GetSleepLogAggregateType<T extends SleepLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSleepLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSleepLog[P]>
      : GetScalarType<T[P], AggregateSleepLog[P]>
  }




  export type SleepLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SleepLogWhereInput
    orderBy?: SleepLogOrderByWithAggregationInput | SleepLogOrderByWithAggregationInput[]
    by: SleepLogScalarFieldEnum[] | SleepLogScalarFieldEnum
    having?: SleepLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SleepLogCountAggregateInputType | true
    _avg?: SleepLogAvgAggregateInputType
    _sum?: SleepLogSumAggregateInputType
    _min?: SleepLogMinAggregateInputType
    _max?: SleepLogMaxAggregateInputType
  }

  export type SleepLogGroupByOutputType = {
    id: number
    date: Date
    startTime: Date
    endTime: Date
    sleepQuality: string | null
    location: $Enums.SleepLocation
    note: string | null
    babyId: number
    createdAt: Date
    updatedAt: Date
    _count: SleepLogCountAggregateOutputType | null
    _avg: SleepLogAvgAggregateOutputType | null
    _sum: SleepLogSumAggregateOutputType | null
    _min: SleepLogMinAggregateOutputType | null
    _max: SleepLogMaxAggregateOutputType | null
  }

  type GetSleepLogGroupByPayload<T extends SleepLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SleepLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SleepLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SleepLogGroupByOutputType[P]>
            : GetScalarType<T[P], SleepLogGroupByOutputType[P]>
        }
      >
    >


  export type SleepLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    sleepQuality?: boolean
    location?: boolean
    note?: boolean
    babyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    baby?: boolean | BabyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sleepLog"]>


  export type SleepLogSelectScalar = {
    id?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    sleepQuality?: boolean
    location?: boolean
    note?: boolean
    babyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SleepLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    baby?: boolean | BabyDefaultArgs<ExtArgs>
  }

  export type $SleepLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SleepLog"
    objects: {
      baby: Prisma.$BabyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      startTime: Date
      endTime: Date
      sleepQuality: string | null
      location: $Enums.SleepLocation
      note: string | null
      babyId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sleepLog"]>
    composites: {}
  }

  type SleepLogGetPayload<S extends boolean | null | undefined | SleepLogDefaultArgs> = $Result.GetResult<Prisma.$SleepLogPayload, S>

  type SleepLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SleepLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SleepLogCountAggregateInputType | true
    }

  export interface SleepLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SleepLog'], meta: { name: 'SleepLog' } }
    /**
     * Find zero or one SleepLog that matches the filter.
     * @param {SleepLogFindUniqueArgs} args - Arguments to find a SleepLog
     * @example
     * // Get one SleepLog
     * const sleepLog = await prisma.sleepLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SleepLogFindUniqueArgs>(args: SelectSubset<T, SleepLogFindUniqueArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SleepLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SleepLogFindUniqueOrThrowArgs} args - Arguments to find a SleepLog
     * @example
     * // Get one SleepLog
     * const sleepLog = await prisma.sleepLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SleepLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SleepLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SleepLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogFindFirstArgs} args - Arguments to find a SleepLog
     * @example
     * // Get one SleepLog
     * const sleepLog = await prisma.sleepLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SleepLogFindFirstArgs>(args?: SelectSubset<T, SleepLogFindFirstArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SleepLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogFindFirstOrThrowArgs} args - Arguments to find a SleepLog
     * @example
     * // Get one SleepLog
     * const sleepLog = await prisma.sleepLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SleepLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SleepLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SleepLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SleepLogs
     * const sleepLogs = await prisma.sleepLog.findMany()
     * 
     * // Get first 10 SleepLogs
     * const sleepLogs = await prisma.sleepLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sleepLogWithIdOnly = await prisma.sleepLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SleepLogFindManyArgs>(args?: SelectSubset<T, SleepLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SleepLog.
     * @param {SleepLogCreateArgs} args - Arguments to create a SleepLog.
     * @example
     * // Create one SleepLog
     * const SleepLog = await prisma.sleepLog.create({
     *   data: {
     *     // ... data to create a SleepLog
     *   }
     * })
     * 
     */
    create<T extends SleepLogCreateArgs>(args: SelectSubset<T, SleepLogCreateArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SleepLogs.
     * @param {SleepLogCreateManyArgs} args - Arguments to create many SleepLogs.
     * @example
     * // Create many SleepLogs
     * const sleepLog = await prisma.sleepLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SleepLogCreateManyArgs>(args?: SelectSubset<T, SleepLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SleepLog.
     * @param {SleepLogDeleteArgs} args - Arguments to delete one SleepLog.
     * @example
     * // Delete one SleepLog
     * const SleepLog = await prisma.sleepLog.delete({
     *   where: {
     *     // ... filter to delete one SleepLog
     *   }
     * })
     * 
     */
    delete<T extends SleepLogDeleteArgs>(args: SelectSubset<T, SleepLogDeleteArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SleepLog.
     * @param {SleepLogUpdateArgs} args - Arguments to update one SleepLog.
     * @example
     * // Update one SleepLog
     * const sleepLog = await prisma.sleepLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SleepLogUpdateArgs>(args: SelectSubset<T, SleepLogUpdateArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SleepLogs.
     * @param {SleepLogDeleteManyArgs} args - Arguments to filter SleepLogs to delete.
     * @example
     * // Delete a few SleepLogs
     * const { count } = await prisma.sleepLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SleepLogDeleteManyArgs>(args?: SelectSubset<T, SleepLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SleepLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SleepLogs
     * const sleepLog = await prisma.sleepLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SleepLogUpdateManyArgs>(args: SelectSubset<T, SleepLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SleepLog.
     * @param {SleepLogUpsertArgs} args - Arguments to update or create a SleepLog.
     * @example
     * // Update or create a SleepLog
     * const sleepLog = await prisma.sleepLog.upsert({
     *   create: {
     *     // ... data to create a SleepLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SleepLog we want to update
     *   }
     * })
     */
    upsert<T extends SleepLogUpsertArgs>(args: SelectSubset<T, SleepLogUpsertArgs<ExtArgs>>): Prisma__SleepLogClient<$Result.GetResult<Prisma.$SleepLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SleepLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogCountArgs} args - Arguments to filter SleepLogs to count.
     * @example
     * // Count the number of SleepLogs
     * const count = await prisma.sleepLog.count({
     *   where: {
     *     // ... the filter for the SleepLogs we want to count
     *   }
     * })
    **/
    count<T extends SleepLogCountArgs>(
      args?: Subset<T, SleepLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SleepLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SleepLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SleepLogAggregateArgs>(args: Subset<T, SleepLogAggregateArgs>): Prisma.PrismaPromise<GetSleepLogAggregateType<T>>

    /**
     * Group by SleepLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SleepLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SleepLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SleepLogGroupByArgs['orderBy'] }
        : { orderBy?: SleepLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SleepLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSleepLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SleepLog model
   */
  readonly fields: SleepLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SleepLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SleepLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    baby<T extends BabyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BabyDefaultArgs<ExtArgs>>): Prisma__BabyClient<$Result.GetResult<Prisma.$BabyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SleepLog model
   */ 
  interface SleepLogFieldRefs {
    readonly id: FieldRef<"SleepLog", 'Int'>
    readonly date: FieldRef<"SleepLog", 'DateTime'>
    readonly startTime: FieldRef<"SleepLog", 'DateTime'>
    readonly endTime: FieldRef<"SleepLog", 'DateTime'>
    readonly sleepQuality: FieldRef<"SleepLog", 'String'>
    readonly location: FieldRef<"SleepLog", 'SleepLocation'>
    readonly note: FieldRef<"SleepLog", 'String'>
    readonly babyId: FieldRef<"SleepLog", 'Int'>
    readonly createdAt: FieldRef<"SleepLog", 'DateTime'>
    readonly updatedAt: FieldRef<"SleepLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SleepLog findUnique
   */
  export type SleepLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter, which SleepLog to fetch.
     */
    where: SleepLogWhereUniqueInput
  }

  /**
   * SleepLog findUniqueOrThrow
   */
  export type SleepLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter, which SleepLog to fetch.
     */
    where: SleepLogWhereUniqueInput
  }

  /**
   * SleepLog findFirst
   */
  export type SleepLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter, which SleepLog to fetch.
     */
    where?: SleepLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SleepLogs to fetch.
     */
    orderBy?: SleepLogOrderByWithRelationInput | SleepLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SleepLogs.
     */
    cursor?: SleepLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SleepLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SleepLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SleepLogs.
     */
    distinct?: SleepLogScalarFieldEnum | SleepLogScalarFieldEnum[]
  }

  /**
   * SleepLog findFirstOrThrow
   */
  export type SleepLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter, which SleepLog to fetch.
     */
    where?: SleepLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SleepLogs to fetch.
     */
    orderBy?: SleepLogOrderByWithRelationInput | SleepLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SleepLogs.
     */
    cursor?: SleepLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SleepLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SleepLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SleepLogs.
     */
    distinct?: SleepLogScalarFieldEnum | SleepLogScalarFieldEnum[]
  }

  /**
   * SleepLog findMany
   */
  export type SleepLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter, which SleepLogs to fetch.
     */
    where?: SleepLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SleepLogs to fetch.
     */
    orderBy?: SleepLogOrderByWithRelationInput | SleepLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SleepLogs.
     */
    cursor?: SleepLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SleepLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SleepLogs.
     */
    skip?: number
    distinct?: SleepLogScalarFieldEnum | SleepLogScalarFieldEnum[]
  }

  /**
   * SleepLog create
   */
  export type SleepLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * The data needed to create a SleepLog.
     */
    data: XOR<SleepLogCreateInput, SleepLogUncheckedCreateInput>
  }

  /**
   * SleepLog createMany
   */
  export type SleepLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SleepLogs.
     */
    data: SleepLogCreateManyInput | SleepLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SleepLog update
   */
  export type SleepLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * The data needed to update a SleepLog.
     */
    data: XOR<SleepLogUpdateInput, SleepLogUncheckedUpdateInput>
    /**
     * Choose, which SleepLog to update.
     */
    where: SleepLogWhereUniqueInput
  }

  /**
   * SleepLog updateMany
   */
  export type SleepLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SleepLogs.
     */
    data: XOR<SleepLogUpdateManyMutationInput, SleepLogUncheckedUpdateManyInput>
    /**
     * Filter which SleepLogs to update
     */
    where?: SleepLogWhereInput
  }

  /**
   * SleepLog upsert
   */
  export type SleepLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * The filter to search for the SleepLog to update in case it exists.
     */
    where: SleepLogWhereUniqueInput
    /**
     * In case the SleepLog found by the `where` argument doesn't exist, create a new SleepLog with this data.
     */
    create: XOR<SleepLogCreateInput, SleepLogUncheckedCreateInput>
    /**
     * In case the SleepLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SleepLogUpdateInput, SleepLogUncheckedUpdateInput>
  }

  /**
   * SleepLog delete
   */
  export type SleepLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
    /**
     * Filter which SleepLog to delete.
     */
    where: SleepLogWhereUniqueInput
  }

  /**
   * SleepLog deleteMany
   */
  export type SleepLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SleepLogs to delete
     */
    where?: SleepLogWhereInput
  }

  /**
   * SleepLog without action
   */
  export type SleepLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SleepLog
     */
    select?: SleepLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SleepLogInclude<ExtArgs> | null
  }


  /**
   * Model OtpVerification
   */

  export type AggregateOtpVerification = {
    _count: OtpVerificationCountAggregateOutputType | null
    _avg: OtpVerificationAvgAggregateOutputType | null
    _sum: OtpVerificationSumAggregateOutputType | null
    _min: OtpVerificationMinAggregateOutputType | null
    _max: OtpVerificationMaxAggregateOutputType | null
  }

  export type OtpVerificationAvgAggregateOutputType = {
    id: number | null
    attempts: number | null
    userId: number | null
  }

  export type OtpVerificationSumAggregateOutputType = {
    id: number | null
    attempts: number | null
    userId: number | null
  }

  export type OtpVerificationMinAggregateOutputType = {
    id: number | null
    email: string | null
    otp: string | null
    expiresAt: Date | null
    isUsed: boolean | null
    attempts: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OtpVerificationMaxAggregateOutputType = {
    id: number | null
    email: string | null
    otp: string | null
    expiresAt: Date | null
    isUsed: boolean | null
    attempts: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OtpVerificationCountAggregateOutputType = {
    id: number
    email: number
    otp: number
    expiresAt: number
    isUsed: number
    attempts: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OtpVerificationAvgAggregateInputType = {
    id?: true
    attempts?: true
    userId?: true
  }

  export type OtpVerificationSumAggregateInputType = {
    id?: true
    attempts?: true
    userId?: true
  }

  export type OtpVerificationMinAggregateInputType = {
    id?: true
    email?: true
    otp?: true
    expiresAt?: true
    isUsed?: true
    attempts?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OtpVerificationMaxAggregateInputType = {
    id?: true
    email?: true
    otp?: true
    expiresAt?: true
    isUsed?: true
    attempts?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OtpVerificationCountAggregateInputType = {
    id?: true
    email?: true
    otp?: true
    expiresAt?: true
    isUsed?: true
    attempts?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OtpVerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtpVerification to aggregate.
     */
    where?: OtpVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpVerifications to fetch.
     */
    orderBy?: OtpVerificationOrderByWithRelationInput | OtpVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OtpVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OtpVerifications
    **/
    _count?: true | OtpVerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OtpVerificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OtpVerificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtpVerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtpVerificationMaxAggregateInputType
  }

  export type GetOtpVerificationAggregateType<T extends OtpVerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateOtpVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtpVerification[P]>
      : GetScalarType<T[P], AggregateOtpVerification[P]>
  }




  export type OtpVerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpVerificationWhereInput
    orderBy?: OtpVerificationOrderByWithAggregationInput | OtpVerificationOrderByWithAggregationInput[]
    by: OtpVerificationScalarFieldEnum[] | OtpVerificationScalarFieldEnum
    having?: OtpVerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtpVerificationCountAggregateInputType | true
    _avg?: OtpVerificationAvgAggregateInputType
    _sum?: OtpVerificationSumAggregateInputType
    _min?: OtpVerificationMinAggregateInputType
    _max?: OtpVerificationMaxAggregateInputType
  }

  export type OtpVerificationGroupByOutputType = {
    id: number
    email: string
    otp: string
    expiresAt: Date
    isUsed: boolean
    attempts: number
    userId: number | null
    createdAt: Date
    updatedAt: Date
    _count: OtpVerificationCountAggregateOutputType | null
    _avg: OtpVerificationAvgAggregateOutputType | null
    _sum: OtpVerificationSumAggregateOutputType | null
    _min: OtpVerificationMinAggregateOutputType | null
    _max: OtpVerificationMaxAggregateOutputType | null
  }

  type GetOtpVerificationGroupByPayload<T extends OtpVerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OtpVerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtpVerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtpVerificationGroupByOutputType[P]>
            : GetScalarType<T[P], OtpVerificationGroupByOutputType[P]>
        }
      >
    >


  export type OtpVerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    otp?: boolean
    expiresAt?: boolean
    isUsed?: boolean
    attempts?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | OtpVerification$userArgs<ExtArgs>
  }, ExtArgs["result"]["otpVerification"]>


  export type OtpVerificationSelectScalar = {
    id?: boolean
    email?: boolean
    otp?: boolean
    expiresAt?: boolean
    isUsed?: boolean
    attempts?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OtpVerificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | OtpVerification$userArgs<ExtArgs>
  }

  export type $OtpVerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OtpVerification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      otp: string
      expiresAt: Date
      isUsed: boolean
      attempts: number
      userId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["otpVerification"]>
    composites: {}
  }

  type OtpVerificationGetPayload<S extends boolean | null | undefined | OtpVerificationDefaultArgs> = $Result.GetResult<Prisma.$OtpVerificationPayload, S>

  type OtpVerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OtpVerificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OtpVerificationCountAggregateInputType | true
    }

  export interface OtpVerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OtpVerification'], meta: { name: 'OtpVerification' } }
    /**
     * Find zero or one OtpVerification that matches the filter.
     * @param {OtpVerificationFindUniqueArgs} args - Arguments to find a OtpVerification
     * @example
     * // Get one OtpVerification
     * const otpVerification = await prisma.otpVerification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OtpVerificationFindUniqueArgs>(args: SelectSubset<T, OtpVerificationFindUniqueArgs<ExtArgs>>): Prisma__OtpVerificationClient<$Result.GetResult<Prisma.$OtpVerificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OtpVerification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OtpVerificationFindUniqueOrThrowArgs} args - Arguments to find a OtpVerification
     * @example
     * // Get one OtpVerification
     * const otpVerification = await prisma.otpVerification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OtpVerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, OtpVerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OtpVerificationClient<$Result.GetResult<Prisma.$OtpVerificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OtpVerification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpVerificationFindFirstArgs} args - Arguments to find a OtpVerification
     * @example
     * // Get one OtpVerification
     * const otpVerification = await prisma.otpVerification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OtpVerificationFindFirstArgs>(args?: SelectSubset<T, OtpVerificationFindFirstArgs<ExtArgs>>): Prisma__OtpVerificationClient<$Result.GetResult<Prisma.$OtpVerificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OtpVerification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpVerificationFindFirstOrThrowArgs} args - Arguments to find a OtpVerification
     * @example
     * // Get one OtpVerification
     * const otpVerification = await prisma.otpVerification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OtpVerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, OtpVerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OtpVerificationClient<$Result.GetResult<Prisma.$OtpVerificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OtpVerifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpVerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OtpVerifications
     * const otpVerifications = await prisma.otpVerification.findMany()
     * 
     * // Get first 10 OtpVerifications
     * const otpVerifications = await prisma.otpVerification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const otpVerificationWithIdOnly = await prisma.otpVerification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OtpVerificationFindManyArgs>(args?: SelectSubset<T, OtpVerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpVerificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OtpVerification.
     * @param {OtpVerificationCreateArgs} args - Arguments to create a OtpVerification.
     * @example
     * // Create one OtpVerification
     * const OtpVerification = await prisma.otpVerification.create({
     *   data: {
     *     // ... data to create a OtpVerification
     *   }
     * })
     * 
     */
    create<T extends OtpVerificationCreateArgs>(args: SelectSubset<T, OtpVerificationCreateArgs<ExtArgs>>): Prisma__OtpVerificationClient<$Result.GetResult<Prisma.$OtpVerificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OtpVerifications.
     * @param {OtpVerificationCreateManyArgs} args - Arguments to create many OtpVerifications.
     * @example
     * // Create many OtpVerifications
     * const otpVerification = await prisma.otpVerification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OtpVerificationCreateManyArgs>(args?: SelectSubset<T, OtpVerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OtpVerification.
     * @param {OtpVerificationDeleteArgs} args - Arguments to delete one OtpVerification.
     * @example
     * // Delete one OtpVerification
     * const OtpVerification = await prisma.otpVerification.delete({
     *   where: {
     *     // ... filter to delete one OtpVerification
     *   }
     * })
     * 
     */
    delete<T extends OtpVerificationDeleteArgs>(args: SelectSubset<T, OtpVerificationDeleteArgs<ExtArgs>>): Prisma__OtpVerificationClient<$Result.GetResult<Prisma.$OtpVerificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OtpVerification.
     * @param {OtpVerificationUpdateArgs} args - Arguments to update one OtpVerification.
     * @example
     * // Update one OtpVerification
     * const otpVerification = await prisma.otpVerification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OtpVerificationUpdateArgs>(args: SelectSubset<T, OtpVerificationUpdateArgs<ExtArgs>>): Prisma__OtpVerificationClient<$Result.GetResult<Prisma.$OtpVerificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OtpVerifications.
     * @param {OtpVerificationDeleteManyArgs} args - Arguments to filter OtpVerifications to delete.
     * @example
     * // Delete a few OtpVerifications
     * const { count } = await prisma.otpVerification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OtpVerificationDeleteManyArgs>(args?: SelectSubset<T, OtpVerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OtpVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpVerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OtpVerifications
     * const otpVerification = await prisma.otpVerification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OtpVerificationUpdateManyArgs>(args: SelectSubset<T, OtpVerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OtpVerification.
     * @param {OtpVerificationUpsertArgs} args - Arguments to update or create a OtpVerification.
     * @example
     * // Update or create a OtpVerification
     * const otpVerification = await prisma.otpVerification.upsert({
     *   create: {
     *     // ... data to create a OtpVerification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OtpVerification we want to update
     *   }
     * })
     */
    upsert<T extends OtpVerificationUpsertArgs>(args: SelectSubset<T, OtpVerificationUpsertArgs<ExtArgs>>): Prisma__OtpVerificationClient<$Result.GetResult<Prisma.$OtpVerificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OtpVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpVerificationCountArgs} args - Arguments to filter OtpVerifications to count.
     * @example
     * // Count the number of OtpVerifications
     * const count = await prisma.otpVerification.count({
     *   where: {
     *     // ... the filter for the OtpVerifications we want to count
     *   }
     * })
    **/
    count<T extends OtpVerificationCountArgs>(
      args?: Subset<T, OtpVerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtpVerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OtpVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpVerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtpVerificationAggregateArgs>(args: Subset<T, OtpVerificationAggregateArgs>): Prisma.PrismaPromise<GetOtpVerificationAggregateType<T>>

    /**
     * Group by OtpVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpVerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtpVerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtpVerificationGroupByArgs['orderBy'] }
        : { orderBy?: OtpVerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtpVerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtpVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OtpVerification model
   */
  readonly fields: OtpVerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OtpVerification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OtpVerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends OtpVerification$userArgs<ExtArgs> = {}>(args?: Subset<T, OtpVerification$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OtpVerification model
   */ 
  interface OtpVerificationFieldRefs {
    readonly id: FieldRef<"OtpVerification", 'Int'>
    readonly email: FieldRef<"OtpVerification", 'String'>
    readonly otp: FieldRef<"OtpVerification", 'String'>
    readonly expiresAt: FieldRef<"OtpVerification", 'DateTime'>
    readonly isUsed: FieldRef<"OtpVerification", 'Boolean'>
    readonly attempts: FieldRef<"OtpVerification", 'Int'>
    readonly userId: FieldRef<"OtpVerification", 'Int'>
    readonly createdAt: FieldRef<"OtpVerification", 'DateTime'>
    readonly updatedAt: FieldRef<"OtpVerification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OtpVerification findUnique
   */
  export type OtpVerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpVerification
     */
    select?: OtpVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpVerificationInclude<ExtArgs> | null
    /**
     * Filter, which OtpVerification to fetch.
     */
    where: OtpVerificationWhereUniqueInput
  }

  /**
   * OtpVerification findUniqueOrThrow
   */
  export type OtpVerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpVerification
     */
    select?: OtpVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpVerificationInclude<ExtArgs> | null
    /**
     * Filter, which OtpVerification to fetch.
     */
    where: OtpVerificationWhereUniqueInput
  }

  /**
   * OtpVerification findFirst
   */
  export type OtpVerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpVerification
     */
    select?: OtpVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpVerificationInclude<ExtArgs> | null
    /**
     * Filter, which OtpVerification to fetch.
     */
    where?: OtpVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpVerifications to fetch.
     */
    orderBy?: OtpVerificationOrderByWithRelationInput | OtpVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtpVerifications.
     */
    cursor?: OtpVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtpVerifications.
     */
    distinct?: OtpVerificationScalarFieldEnum | OtpVerificationScalarFieldEnum[]
  }

  /**
   * OtpVerification findFirstOrThrow
   */
  export type OtpVerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpVerification
     */
    select?: OtpVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpVerificationInclude<ExtArgs> | null
    /**
     * Filter, which OtpVerification to fetch.
     */
    where?: OtpVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpVerifications to fetch.
     */
    orderBy?: OtpVerificationOrderByWithRelationInput | OtpVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OtpVerifications.
     */
    cursor?: OtpVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OtpVerifications.
     */
    distinct?: OtpVerificationScalarFieldEnum | OtpVerificationScalarFieldEnum[]
  }

  /**
   * OtpVerification findMany
   */
  export type OtpVerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpVerification
     */
    select?: OtpVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpVerificationInclude<ExtArgs> | null
    /**
     * Filter, which OtpVerifications to fetch.
     */
    where?: OtpVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OtpVerifications to fetch.
     */
    orderBy?: OtpVerificationOrderByWithRelationInput | OtpVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OtpVerifications.
     */
    cursor?: OtpVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OtpVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OtpVerifications.
     */
    skip?: number
    distinct?: OtpVerificationScalarFieldEnum | OtpVerificationScalarFieldEnum[]
  }

  /**
   * OtpVerification create
   */
  export type OtpVerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpVerification
     */
    select?: OtpVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpVerificationInclude<ExtArgs> | null
    /**
     * The data needed to create a OtpVerification.
     */
    data: XOR<OtpVerificationCreateInput, OtpVerificationUncheckedCreateInput>
  }

  /**
   * OtpVerification createMany
   */
  export type OtpVerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OtpVerifications.
     */
    data: OtpVerificationCreateManyInput | OtpVerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OtpVerification update
   */
  export type OtpVerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpVerification
     */
    select?: OtpVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpVerificationInclude<ExtArgs> | null
    /**
     * The data needed to update a OtpVerification.
     */
    data: XOR<OtpVerificationUpdateInput, OtpVerificationUncheckedUpdateInput>
    /**
     * Choose, which OtpVerification to update.
     */
    where: OtpVerificationWhereUniqueInput
  }

  /**
   * OtpVerification updateMany
   */
  export type OtpVerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OtpVerifications.
     */
    data: XOR<OtpVerificationUpdateManyMutationInput, OtpVerificationUncheckedUpdateManyInput>
    /**
     * Filter which OtpVerifications to update
     */
    where?: OtpVerificationWhereInput
  }

  /**
   * OtpVerification upsert
   */
  export type OtpVerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpVerification
     */
    select?: OtpVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpVerificationInclude<ExtArgs> | null
    /**
     * The filter to search for the OtpVerification to update in case it exists.
     */
    where: OtpVerificationWhereUniqueInput
    /**
     * In case the OtpVerification found by the `where` argument doesn't exist, create a new OtpVerification with this data.
     */
    create: XOR<OtpVerificationCreateInput, OtpVerificationUncheckedCreateInput>
    /**
     * In case the OtpVerification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OtpVerificationUpdateInput, OtpVerificationUncheckedUpdateInput>
  }

  /**
   * OtpVerification delete
   */
  export type OtpVerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpVerification
     */
    select?: OtpVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpVerificationInclude<ExtArgs> | null
    /**
     * Filter which OtpVerification to delete.
     */
    where: OtpVerificationWhereUniqueInput
  }

  /**
   * OtpVerification deleteMany
   */
  export type OtpVerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OtpVerifications to delete
     */
    where?: OtpVerificationWhereInput
  }

  /**
   * OtpVerification.user
   */
  export type OtpVerification$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * OtpVerification without action
   */
  export type OtpVerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OtpVerification
     */
    select?: OtpVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OtpVerificationInclude<ExtArgs> | null
  }


  /**
   * Model ZipCode
   */

  export type AggregateZipCode = {
    _count: ZipCodeCountAggregateOutputType | null
    _avg: ZipCodeAvgAggregateOutputType | null
    _sum: ZipCodeSumAggregateOutputType | null
    _min: ZipCodeMinAggregateOutputType | null
    _max: ZipCodeMaxAggregateOutputType | null
  }

  export type ZipCodeAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type ZipCodeSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type ZipCodeMinAggregateOutputType = {
    id: number | null
    country: string | null
    zipcode: string | null
    placeName: string | null
    latitude: number | null
    longitude: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ZipCodeMaxAggregateOutputType = {
    id: number | null
    country: string | null
    zipcode: string | null
    placeName: string | null
    latitude: number | null
    longitude: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ZipCodeCountAggregateOutputType = {
    id: number
    country: number
    zipcode: number
    placeName: number
    latitude: number
    longitude: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ZipCodeAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type ZipCodeSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type ZipCodeMinAggregateInputType = {
    id?: true
    country?: true
    zipcode?: true
    placeName?: true
    latitude?: true
    longitude?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ZipCodeMaxAggregateInputType = {
    id?: true
    country?: true
    zipcode?: true
    placeName?: true
    latitude?: true
    longitude?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ZipCodeCountAggregateInputType = {
    id?: true
    country?: true
    zipcode?: true
    placeName?: true
    latitude?: true
    longitude?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ZipCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ZipCode to aggregate.
     */
    where?: ZipCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZipCodes to fetch.
     */
    orderBy?: ZipCodeOrderByWithRelationInput | ZipCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ZipCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZipCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZipCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ZipCodes
    **/
    _count?: true | ZipCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ZipCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ZipCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ZipCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ZipCodeMaxAggregateInputType
  }

  export type GetZipCodeAggregateType<T extends ZipCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateZipCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZipCode[P]>
      : GetScalarType<T[P], AggregateZipCode[P]>
  }




  export type ZipCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZipCodeWhereInput
    orderBy?: ZipCodeOrderByWithAggregationInput | ZipCodeOrderByWithAggregationInput[]
    by: ZipCodeScalarFieldEnum[] | ZipCodeScalarFieldEnum
    having?: ZipCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ZipCodeCountAggregateInputType | true
    _avg?: ZipCodeAvgAggregateInputType
    _sum?: ZipCodeSumAggregateInputType
    _min?: ZipCodeMinAggregateInputType
    _max?: ZipCodeMaxAggregateInputType
  }

  export type ZipCodeGroupByOutputType = {
    id: number
    country: string
    zipcode: string
    placeName: string
    latitude: number
    longitude: number
    createdAt: Date
    updatedAt: Date
    _count: ZipCodeCountAggregateOutputType | null
    _avg: ZipCodeAvgAggregateOutputType | null
    _sum: ZipCodeSumAggregateOutputType | null
    _min: ZipCodeMinAggregateOutputType | null
    _max: ZipCodeMaxAggregateOutputType | null
  }

  type GetZipCodeGroupByPayload<T extends ZipCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ZipCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ZipCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ZipCodeGroupByOutputType[P]>
            : GetScalarType<T[P], ZipCodeGroupByOutputType[P]>
        }
      >
    >


  export type ZipCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    country?: boolean
    zipcode?: boolean
    placeName?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["zipCode"]>


  export type ZipCodeSelectScalar = {
    id?: boolean
    country?: boolean
    zipcode?: boolean
    placeName?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $ZipCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ZipCode"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      country: string
      zipcode: string
      placeName: string
      latitude: number
      longitude: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["zipCode"]>
    composites: {}
  }

  type ZipCodeGetPayload<S extends boolean | null | undefined | ZipCodeDefaultArgs> = $Result.GetResult<Prisma.$ZipCodePayload, S>

  type ZipCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ZipCodeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ZipCodeCountAggregateInputType | true
    }

  export interface ZipCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ZipCode'], meta: { name: 'ZipCode' } }
    /**
     * Find zero or one ZipCode that matches the filter.
     * @param {ZipCodeFindUniqueArgs} args - Arguments to find a ZipCode
     * @example
     * // Get one ZipCode
     * const zipCode = await prisma.zipCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ZipCodeFindUniqueArgs>(args: SelectSubset<T, ZipCodeFindUniqueArgs<ExtArgs>>): Prisma__ZipCodeClient<$Result.GetResult<Prisma.$ZipCodePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ZipCode that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ZipCodeFindUniqueOrThrowArgs} args - Arguments to find a ZipCode
     * @example
     * // Get one ZipCode
     * const zipCode = await prisma.zipCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ZipCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, ZipCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ZipCodeClient<$Result.GetResult<Prisma.$ZipCodePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ZipCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZipCodeFindFirstArgs} args - Arguments to find a ZipCode
     * @example
     * // Get one ZipCode
     * const zipCode = await prisma.zipCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ZipCodeFindFirstArgs>(args?: SelectSubset<T, ZipCodeFindFirstArgs<ExtArgs>>): Prisma__ZipCodeClient<$Result.GetResult<Prisma.$ZipCodePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ZipCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZipCodeFindFirstOrThrowArgs} args - Arguments to find a ZipCode
     * @example
     * // Get one ZipCode
     * const zipCode = await prisma.zipCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ZipCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, ZipCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ZipCodeClient<$Result.GetResult<Prisma.$ZipCodePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ZipCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZipCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ZipCodes
     * const zipCodes = await prisma.zipCode.findMany()
     * 
     * // Get first 10 ZipCodes
     * const zipCodes = await prisma.zipCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const zipCodeWithIdOnly = await prisma.zipCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ZipCodeFindManyArgs>(args?: SelectSubset<T, ZipCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZipCodePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ZipCode.
     * @param {ZipCodeCreateArgs} args - Arguments to create a ZipCode.
     * @example
     * // Create one ZipCode
     * const ZipCode = await prisma.zipCode.create({
     *   data: {
     *     // ... data to create a ZipCode
     *   }
     * })
     * 
     */
    create<T extends ZipCodeCreateArgs>(args: SelectSubset<T, ZipCodeCreateArgs<ExtArgs>>): Prisma__ZipCodeClient<$Result.GetResult<Prisma.$ZipCodePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ZipCodes.
     * @param {ZipCodeCreateManyArgs} args - Arguments to create many ZipCodes.
     * @example
     * // Create many ZipCodes
     * const zipCode = await prisma.zipCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ZipCodeCreateManyArgs>(args?: SelectSubset<T, ZipCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ZipCode.
     * @param {ZipCodeDeleteArgs} args - Arguments to delete one ZipCode.
     * @example
     * // Delete one ZipCode
     * const ZipCode = await prisma.zipCode.delete({
     *   where: {
     *     // ... filter to delete one ZipCode
     *   }
     * })
     * 
     */
    delete<T extends ZipCodeDeleteArgs>(args: SelectSubset<T, ZipCodeDeleteArgs<ExtArgs>>): Prisma__ZipCodeClient<$Result.GetResult<Prisma.$ZipCodePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ZipCode.
     * @param {ZipCodeUpdateArgs} args - Arguments to update one ZipCode.
     * @example
     * // Update one ZipCode
     * const zipCode = await prisma.zipCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ZipCodeUpdateArgs>(args: SelectSubset<T, ZipCodeUpdateArgs<ExtArgs>>): Prisma__ZipCodeClient<$Result.GetResult<Prisma.$ZipCodePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ZipCodes.
     * @param {ZipCodeDeleteManyArgs} args - Arguments to filter ZipCodes to delete.
     * @example
     * // Delete a few ZipCodes
     * const { count } = await prisma.zipCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ZipCodeDeleteManyArgs>(args?: SelectSubset<T, ZipCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ZipCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZipCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ZipCodes
     * const zipCode = await prisma.zipCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ZipCodeUpdateManyArgs>(args: SelectSubset<T, ZipCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ZipCode.
     * @param {ZipCodeUpsertArgs} args - Arguments to update or create a ZipCode.
     * @example
     * // Update or create a ZipCode
     * const zipCode = await prisma.zipCode.upsert({
     *   create: {
     *     // ... data to create a ZipCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ZipCode we want to update
     *   }
     * })
     */
    upsert<T extends ZipCodeUpsertArgs>(args: SelectSubset<T, ZipCodeUpsertArgs<ExtArgs>>): Prisma__ZipCodeClient<$Result.GetResult<Prisma.$ZipCodePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ZipCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZipCodeCountArgs} args - Arguments to filter ZipCodes to count.
     * @example
     * // Count the number of ZipCodes
     * const count = await prisma.zipCode.count({
     *   where: {
     *     // ... the filter for the ZipCodes we want to count
     *   }
     * })
    **/
    count<T extends ZipCodeCountArgs>(
      args?: Subset<T, ZipCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ZipCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ZipCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZipCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ZipCodeAggregateArgs>(args: Subset<T, ZipCodeAggregateArgs>): Prisma.PrismaPromise<GetZipCodeAggregateType<T>>

    /**
     * Group by ZipCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZipCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ZipCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ZipCodeGroupByArgs['orderBy'] }
        : { orderBy?: ZipCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ZipCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZipCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ZipCode model
   */
  readonly fields: ZipCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ZipCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ZipCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ZipCode model
   */ 
  interface ZipCodeFieldRefs {
    readonly id: FieldRef<"ZipCode", 'Int'>
    readonly country: FieldRef<"ZipCode", 'String'>
    readonly zipcode: FieldRef<"ZipCode", 'String'>
    readonly placeName: FieldRef<"ZipCode", 'String'>
    readonly latitude: FieldRef<"ZipCode", 'Float'>
    readonly longitude: FieldRef<"ZipCode", 'Float'>
    readonly createdAt: FieldRef<"ZipCode", 'DateTime'>
    readonly updatedAt: FieldRef<"ZipCode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ZipCode findUnique
   */
  export type ZipCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZipCode
     */
    select?: ZipCodeSelect<ExtArgs> | null
    /**
     * Filter, which ZipCode to fetch.
     */
    where: ZipCodeWhereUniqueInput
  }

  /**
   * ZipCode findUniqueOrThrow
   */
  export type ZipCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZipCode
     */
    select?: ZipCodeSelect<ExtArgs> | null
    /**
     * Filter, which ZipCode to fetch.
     */
    where: ZipCodeWhereUniqueInput
  }

  /**
   * ZipCode findFirst
   */
  export type ZipCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZipCode
     */
    select?: ZipCodeSelect<ExtArgs> | null
    /**
     * Filter, which ZipCode to fetch.
     */
    where?: ZipCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZipCodes to fetch.
     */
    orderBy?: ZipCodeOrderByWithRelationInput | ZipCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ZipCodes.
     */
    cursor?: ZipCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZipCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZipCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ZipCodes.
     */
    distinct?: ZipCodeScalarFieldEnum | ZipCodeScalarFieldEnum[]
  }

  /**
   * ZipCode findFirstOrThrow
   */
  export type ZipCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZipCode
     */
    select?: ZipCodeSelect<ExtArgs> | null
    /**
     * Filter, which ZipCode to fetch.
     */
    where?: ZipCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZipCodes to fetch.
     */
    orderBy?: ZipCodeOrderByWithRelationInput | ZipCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ZipCodes.
     */
    cursor?: ZipCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZipCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZipCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ZipCodes.
     */
    distinct?: ZipCodeScalarFieldEnum | ZipCodeScalarFieldEnum[]
  }

  /**
   * ZipCode findMany
   */
  export type ZipCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZipCode
     */
    select?: ZipCodeSelect<ExtArgs> | null
    /**
     * Filter, which ZipCodes to fetch.
     */
    where?: ZipCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZipCodes to fetch.
     */
    orderBy?: ZipCodeOrderByWithRelationInput | ZipCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ZipCodes.
     */
    cursor?: ZipCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZipCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZipCodes.
     */
    skip?: number
    distinct?: ZipCodeScalarFieldEnum | ZipCodeScalarFieldEnum[]
  }

  /**
   * ZipCode create
   */
  export type ZipCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZipCode
     */
    select?: ZipCodeSelect<ExtArgs> | null
    /**
     * The data needed to create a ZipCode.
     */
    data: XOR<ZipCodeCreateInput, ZipCodeUncheckedCreateInput>
  }

  /**
   * ZipCode createMany
   */
  export type ZipCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ZipCodes.
     */
    data: ZipCodeCreateManyInput | ZipCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ZipCode update
   */
  export type ZipCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZipCode
     */
    select?: ZipCodeSelect<ExtArgs> | null
    /**
     * The data needed to update a ZipCode.
     */
    data: XOR<ZipCodeUpdateInput, ZipCodeUncheckedUpdateInput>
    /**
     * Choose, which ZipCode to update.
     */
    where: ZipCodeWhereUniqueInput
  }

  /**
   * ZipCode updateMany
   */
  export type ZipCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ZipCodes.
     */
    data: XOR<ZipCodeUpdateManyMutationInput, ZipCodeUncheckedUpdateManyInput>
    /**
     * Filter which ZipCodes to update
     */
    where?: ZipCodeWhereInput
  }

  /**
   * ZipCode upsert
   */
  export type ZipCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZipCode
     */
    select?: ZipCodeSelect<ExtArgs> | null
    /**
     * The filter to search for the ZipCode to update in case it exists.
     */
    where: ZipCodeWhereUniqueInput
    /**
     * In case the ZipCode found by the `where` argument doesn't exist, create a new ZipCode with this data.
     */
    create: XOR<ZipCodeCreateInput, ZipCodeUncheckedCreateInput>
    /**
     * In case the ZipCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ZipCodeUpdateInput, ZipCodeUncheckedUpdateInput>
  }

  /**
   * ZipCode delete
   */
  export type ZipCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZipCode
     */
    select?: ZipCodeSelect<ExtArgs> | null
    /**
     * Filter which ZipCode to delete.
     */
    where: ZipCodeWhereUniqueInput
  }

  /**
   * ZipCode deleteMany
   */
  export type ZipCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ZipCodes to delete
     */
    where?: ZipCodeWhereInput
  }

  /**
   * ZipCode without action
   */
  export type ZipCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZipCode
     */
    select?: ZipCodeSelect<ExtArgs> | null
  }


  /**
   * Model MilkRequest
   */

  export type AggregateMilkRequest = {
    _count: MilkRequestCountAggregateOutputType | null
    _avg: MilkRequestAvgAggregateOutputType | null
    _sum: MilkRequestSumAggregateOutputType | null
    _min: MilkRequestMinAggregateOutputType | null
    _max: MilkRequestMaxAggregateOutputType | null
  }

  export type MilkRequestAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
    requesterId: number | null
    donorId: number | null
    distance: number | null
  }

  export type MilkRequestSumAggregateOutputType = {
    id: number | null
    quantity: number | null
    requesterId: number | null
    donorId: number | null
    distance: number | null
  }

  export type MilkRequestMinAggregateOutputType = {
    id: number | null
    requestType: $Enums.RequestType | null
    status: $Enums.RequestStatus | null
    title: string | null
    description: string | null
    quantity: number | null
    urgency: string | null
    requesterId: number | null
    donorId: number | null
    requesterZipcode: string | null
    donorZipcode: string | null
    distance: number | null
    neededBy: Date | null
    acceptedAt: Date | null
    completedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MilkRequestMaxAggregateOutputType = {
    id: number | null
    requestType: $Enums.RequestType | null
    status: $Enums.RequestStatus | null
    title: string | null
    description: string | null
    quantity: number | null
    urgency: string | null
    requesterId: number | null
    donorId: number | null
    requesterZipcode: string | null
    donorZipcode: string | null
    distance: number | null
    neededBy: Date | null
    acceptedAt: Date | null
    completedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MilkRequestCountAggregateOutputType = {
    id: number
    requestType: number
    status: number
    title: number
    description: number
    quantity: number
    urgency: number
    requesterId: number
    donorId: number
    requesterZipcode: number
    donorZipcode: number
    distance: number
    neededBy: number
    acceptedAt: number
    completedAt: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MilkRequestAvgAggregateInputType = {
    id?: true
    quantity?: true
    requesterId?: true
    donorId?: true
    distance?: true
  }

  export type MilkRequestSumAggregateInputType = {
    id?: true
    quantity?: true
    requesterId?: true
    donorId?: true
    distance?: true
  }

  export type MilkRequestMinAggregateInputType = {
    id?: true
    requestType?: true
    status?: true
    title?: true
    description?: true
    quantity?: true
    urgency?: true
    requesterId?: true
    donorId?: true
    requesterZipcode?: true
    donorZipcode?: true
    distance?: true
    neededBy?: true
    acceptedAt?: true
    completedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MilkRequestMaxAggregateInputType = {
    id?: true
    requestType?: true
    status?: true
    title?: true
    description?: true
    quantity?: true
    urgency?: true
    requesterId?: true
    donorId?: true
    requesterZipcode?: true
    donorZipcode?: true
    distance?: true
    neededBy?: true
    acceptedAt?: true
    completedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MilkRequestCountAggregateInputType = {
    id?: true
    requestType?: true
    status?: true
    title?: true
    description?: true
    quantity?: true
    urgency?: true
    requesterId?: true
    donorId?: true
    requesterZipcode?: true
    donorZipcode?: true
    distance?: true
    neededBy?: true
    acceptedAt?: true
    completedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MilkRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MilkRequest to aggregate.
     */
    where?: MilkRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MilkRequests to fetch.
     */
    orderBy?: MilkRequestOrderByWithRelationInput | MilkRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MilkRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MilkRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MilkRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MilkRequests
    **/
    _count?: true | MilkRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MilkRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MilkRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MilkRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MilkRequestMaxAggregateInputType
  }

  export type GetMilkRequestAggregateType<T extends MilkRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateMilkRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMilkRequest[P]>
      : GetScalarType<T[P], AggregateMilkRequest[P]>
  }




  export type MilkRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MilkRequestWhereInput
    orderBy?: MilkRequestOrderByWithAggregationInput | MilkRequestOrderByWithAggregationInput[]
    by: MilkRequestScalarFieldEnum[] | MilkRequestScalarFieldEnum
    having?: MilkRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MilkRequestCountAggregateInputType | true
    _avg?: MilkRequestAvgAggregateInputType
    _sum?: MilkRequestSumAggregateInputType
    _min?: MilkRequestMinAggregateInputType
    _max?: MilkRequestMaxAggregateInputType
  }

  export type MilkRequestGroupByOutputType = {
    id: number
    requestType: $Enums.RequestType
    status: $Enums.RequestStatus
    title: string
    description: string | null
    quantity: number | null
    urgency: string | null
    requesterId: number
    donorId: number | null
    requesterZipcode: string
    donorZipcode: string | null
    distance: number | null
    neededBy: Date | null
    acceptedAt: Date | null
    completedAt: Date | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: MilkRequestCountAggregateOutputType | null
    _avg: MilkRequestAvgAggregateOutputType | null
    _sum: MilkRequestSumAggregateOutputType | null
    _min: MilkRequestMinAggregateOutputType | null
    _max: MilkRequestMaxAggregateOutputType | null
  }

  type GetMilkRequestGroupByPayload<T extends MilkRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MilkRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MilkRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MilkRequestGroupByOutputType[P]>
            : GetScalarType<T[P], MilkRequestGroupByOutputType[P]>
        }
      >
    >


  export type MilkRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    requestType?: boolean
    status?: boolean
    title?: boolean
    description?: boolean
    quantity?: boolean
    urgency?: boolean
    requesterId?: boolean
    donorId?: boolean
    requesterZipcode?: boolean
    donorZipcode?: boolean
    distance?: boolean
    neededBy?: boolean
    acceptedAt?: boolean
    completedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requester?: boolean | UserDefaultArgs<ExtArgs>
    donor?: boolean | MilkRequest$donorArgs<ExtArgs>
    notifications?: boolean | MilkRequest$notificationsArgs<ExtArgs>
    _count?: boolean | MilkRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["milkRequest"]>


  export type MilkRequestSelectScalar = {
    id?: boolean
    requestType?: boolean
    status?: boolean
    title?: boolean
    description?: boolean
    quantity?: boolean
    urgency?: boolean
    requesterId?: boolean
    donorId?: boolean
    requesterZipcode?: boolean
    donorZipcode?: boolean
    distance?: boolean
    neededBy?: boolean
    acceptedAt?: boolean
    completedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MilkRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requester?: boolean | UserDefaultArgs<ExtArgs>
    donor?: boolean | MilkRequest$donorArgs<ExtArgs>
    notifications?: boolean | MilkRequest$notificationsArgs<ExtArgs>
    _count?: boolean | MilkRequestCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MilkRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MilkRequest"
    objects: {
      requester: Prisma.$UserPayload<ExtArgs>
      donor: Prisma.$UserPayload<ExtArgs> | null
      notifications: Prisma.$RequestNotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      requestType: $Enums.RequestType
      status: $Enums.RequestStatus
      title: string
      description: string | null
      quantity: number | null
      urgency: string | null
      requesterId: number
      donorId: number | null
      requesterZipcode: string
      donorZipcode: string | null
      distance: number | null
      neededBy: Date | null
      acceptedAt: Date | null
      completedAt: Date | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["milkRequest"]>
    composites: {}
  }

  type MilkRequestGetPayload<S extends boolean | null | undefined | MilkRequestDefaultArgs> = $Result.GetResult<Prisma.$MilkRequestPayload, S>

  type MilkRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MilkRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MilkRequestCountAggregateInputType | true
    }

  export interface MilkRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MilkRequest'], meta: { name: 'MilkRequest' } }
    /**
     * Find zero or one MilkRequest that matches the filter.
     * @param {MilkRequestFindUniqueArgs} args - Arguments to find a MilkRequest
     * @example
     * // Get one MilkRequest
     * const milkRequest = await prisma.milkRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MilkRequestFindUniqueArgs>(args: SelectSubset<T, MilkRequestFindUniqueArgs<ExtArgs>>): Prisma__MilkRequestClient<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MilkRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MilkRequestFindUniqueOrThrowArgs} args - Arguments to find a MilkRequest
     * @example
     * // Get one MilkRequest
     * const milkRequest = await prisma.milkRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MilkRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, MilkRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MilkRequestClient<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MilkRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilkRequestFindFirstArgs} args - Arguments to find a MilkRequest
     * @example
     * // Get one MilkRequest
     * const milkRequest = await prisma.milkRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MilkRequestFindFirstArgs>(args?: SelectSubset<T, MilkRequestFindFirstArgs<ExtArgs>>): Prisma__MilkRequestClient<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MilkRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilkRequestFindFirstOrThrowArgs} args - Arguments to find a MilkRequest
     * @example
     * // Get one MilkRequest
     * const milkRequest = await prisma.milkRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MilkRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, MilkRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__MilkRequestClient<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MilkRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilkRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MilkRequests
     * const milkRequests = await prisma.milkRequest.findMany()
     * 
     * // Get first 10 MilkRequests
     * const milkRequests = await prisma.milkRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const milkRequestWithIdOnly = await prisma.milkRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MilkRequestFindManyArgs>(args?: SelectSubset<T, MilkRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MilkRequest.
     * @param {MilkRequestCreateArgs} args - Arguments to create a MilkRequest.
     * @example
     * // Create one MilkRequest
     * const MilkRequest = await prisma.milkRequest.create({
     *   data: {
     *     // ... data to create a MilkRequest
     *   }
     * })
     * 
     */
    create<T extends MilkRequestCreateArgs>(args: SelectSubset<T, MilkRequestCreateArgs<ExtArgs>>): Prisma__MilkRequestClient<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MilkRequests.
     * @param {MilkRequestCreateManyArgs} args - Arguments to create many MilkRequests.
     * @example
     * // Create many MilkRequests
     * const milkRequest = await prisma.milkRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MilkRequestCreateManyArgs>(args?: SelectSubset<T, MilkRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MilkRequest.
     * @param {MilkRequestDeleteArgs} args - Arguments to delete one MilkRequest.
     * @example
     * // Delete one MilkRequest
     * const MilkRequest = await prisma.milkRequest.delete({
     *   where: {
     *     // ... filter to delete one MilkRequest
     *   }
     * })
     * 
     */
    delete<T extends MilkRequestDeleteArgs>(args: SelectSubset<T, MilkRequestDeleteArgs<ExtArgs>>): Prisma__MilkRequestClient<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MilkRequest.
     * @param {MilkRequestUpdateArgs} args - Arguments to update one MilkRequest.
     * @example
     * // Update one MilkRequest
     * const milkRequest = await prisma.milkRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MilkRequestUpdateArgs>(args: SelectSubset<T, MilkRequestUpdateArgs<ExtArgs>>): Prisma__MilkRequestClient<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MilkRequests.
     * @param {MilkRequestDeleteManyArgs} args - Arguments to filter MilkRequests to delete.
     * @example
     * // Delete a few MilkRequests
     * const { count } = await prisma.milkRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MilkRequestDeleteManyArgs>(args?: SelectSubset<T, MilkRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MilkRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilkRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MilkRequests
     * const milkRequest = await prisma.milkRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MilkRequestUpdateManyArgs>(args: SelectSubset<T, MilkRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MilkRequest.
     * @param {MilkRequestUpsertArgs} args - Arguments to update or create a MilkRequest.
     * @example
     * // Update or create a MilkRequest
     * const milkRequest = await prisma.milkRequest.upsert({
     *   create: {
     *     // ... data to create a MilkRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MilkRequest we want to update
     *   }
     * })
     */
    upsert<T extends MilkRequestUpsertArgs>(args: SelectSubset<T, MilkRequestUpsertArgs<ExtArgs>>): Prisma__MilkRequestClient<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MilkRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilkRequestCountArgs} args - Arguments to filter MilkRequests to count.
     * @example
     * // Count the number of MilkRequests
     * const count = await prisma.milkRequest.count({
     *   where: {
     *     // ... the filter for the MilkRequests we want to count
     *   }
     * })
    **/
    count<T extends MilkRequestCountArgs>(
      args?: Subset<T, MilkRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MilkRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MilkRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilkRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MilkRequestAggregateArgs>(args: Subset<T, MilkRequestAggregateArgs>): Prisma.PrismaPromise<GetMilkRequestAggregateType<T>>

    /**
     * Group by MilkRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MilkRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MilkRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MilkRequestGroupByArgs['orderBy'] }
        : { orderBy?: MilkRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MilkRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMilkRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MilkRequest model
   */
  readonly fields: MilkRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MilkRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MilkRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    requester<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    donor<T extends MilkRequest$donorArgs<ExtArgs> = {}>(args?: Subset<T, MilkRequest$donorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    notifications<T extends MilkRequest$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, MilkRequest$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestNotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MilkRequest model
   */ 
  interface MilkRequestFieldRefs {
    readonly id: FieldRef<"MilkRequest", 'Int'>
    readonly requestType: FieldRef<"MilkRequest", 'RequestType'>
    readonly status: FieldRef<"MilkRequest", 'RequestStatus'>
    readonly title: FieldRef<"MilkRequest", 'String'>
    readonly description: FieldRef<"MilkRequest", 'String'>
    readonly quantity: FieldRef<"MilkRequest", 'Float'>
    readonly urgency: FieldRef<"MilkRequest", 'String'>
    readonly requesterId: FieldRef<"MilkRequest", 'Int'>
    readonly donorId: FieldRef<"MilkRequest", 'Int'>
    readonly requesterZipcode: FieldRef<"MilkRequest", 'String'>
    readonly donorZipcode: FieldRef<"MilkRequest", 'String'>
    readonly distance: FieldRef<"MilkRequest", 'Float'>
    readonly neededBy: FieldRef<"MilkRequest", 'DateTime'>
    readonly acceptedAt: FieldRef<"MilkRequest", 'DateTime'>
    readonly completedAt: FieldRef<"MilkRequest", 'DateTime'>
    readonly notes: FieldRef<"MilkRequest", 'String'>
    readonly createdAt: FieldRef<"MilkRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"MilkRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MilkRequest findUnique
   */
  export type MilkRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    /**
     * Filter, which MilkRequest to fetch.
     */
    where: MilkRequestWhereUniqueInput
  }

  /**
   * MilkRequest findUniqueOrThrow
   */
  export type MilkRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    /**
     * Filter, which MilkRequest to fetch.
     */
    where: MilkRequestWhereUniqueInput
  }

  /**
   * MilkRequest findFirst
   */
  export type MilkRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    /**
     * Filter, which MilkRequest to fetch.
     */
    where?: MilkRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MilkRequests to fetch.
     */
    orderBy?: MilkRequestOrderByWithRelationInput | MilkRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MilkRequests.
     */
    cursor?: MilkRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MilkRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MilkRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MilkRequests.
     */
    distinct?: MilkRequestScalarFieldEnum | MilkRequestScalarFieldEnum[]
  }

  /**
   * MilkRequest findFirstOrThrow
   */
  export type MilkRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    /**
     * Filter, which MilkRequest to fetch.
     */
    where?: MilkRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MilkRequests to fetch.
     */
    orderBy?: MilkRequestOrderByWithRelationInput | MilkRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MilkRequests.
     */
    cursor?: MilkRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MilkRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MilkRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MilkRequests.
     */
    distinct?: MilkRequestScalarFieldEnum | MilkRequestScalarFieldEnum[]
  }

  /**
   * MilkRequest findMany
   */
  export type MilkRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    /**
     * Filter, which MilkRequests to fetch.
     */
    where?: MilkRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MilkRequests to fetch.
     */
    orderBy?: MilkRequestOrderByWithRelationInput | MilkRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MilkRequests.
     */
    cursor?: MilkRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MilkRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MilkRequests.
     */
    skip?: number
    distinct?: MilkRequestScalarFieldEnum | MilkRequestScalarFieldEnum[]
  }

  /**
   * MilkRequest create
   */
  export type MilkRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a MilkRequest.
     */
    data: XOR<MilkRequestCreateInput, MilkRequestUncheckedCreateInput>
  }

  /**
   * MilkRequest createMany
   */
  export type MilkRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MilkRequests.
     */
    data: MilkRequestCreateManyInput | MilkRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MilkRequest update
   */
  export type MilkRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a MilkRequest.
     */
    data: XOR<MilkRequestUpdateInput, MilkRequestUncheckedUpdateInput>
    /**
     * Choose, which MilkRequest to update.
     */
    where: MilkRequestWhereUniqueInput
  }

  /**
   * MilkRequest updateMany
   */
  export type MilkRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MilkRequests.
     */
    data: XOR<MilkRequestUpdateManyMutationInput, MilkRequestUncheckedUpdateManyInput>
    /**
     * Filter which MilkRequests to update
     */
    where?: MilkRequestWhereInput
  }

  /**
   * MilkRequest upsert
   */
  export type MilkRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the MilkRequest to update in case it exists.
     */
    where: MilkRequestWhereUniqueInput
    /**
     * In case the MilkRequest found by the `where` argument doesn't exist, create a new MilkRequest with this data.
     */
    create: XOR<MilkRequestCreateInput, MilkRequestUncheckedCreateInput>
    /**
     * In case the MilkRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MilkRequestUpdateInput, MilkRequestUncheckedUpdateInput>
  }

  /**
   * MilkRequest delete
   */
  export type MilkRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    /**
     * Filter which MilkRequest to delete.
     */
    where: MilkRequestWhereUniqueInput
  }

  /**
   * MilkRequest deleteMany
   */
  export type MilkRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MilkRequests to delete
     */
    where?: MilkRequestWhereInput
  }

  /**
   * MilkRequest.donor
   */
  export type MilkRequest$donorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * MilkRequest.notifications
   */
  export type MilkRequest$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
    where?: RequestNotificationWhereInput
    orderBy?: RequestNotificationOrderByWithRelationInput | RequestNotificationOrderByWithRelationInput[]
    cursor?: RequestNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequestNotificationScalarFieldEnum | RequestNotificationScalarFieldEnum[]
  }

  /**
   * MilkRequest without action
   */
  export type MilkRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
  }


  /**
   * Model RequestNotification
   */

  export type AggregateRequestNotification = {
    _count: RequestNotificationCountAggregateOutputType | null
    _avg: RequestNotificationAvgAggregateOutputType | null
    _sum: RequestNotificationSumAggregateOutputType | null
    _min: RequestNotificationMinAggregateOutputType | null
    _max: RequestNotificationMaxAggregateOutputType | null
  }

  export type RequestNotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    requestId: number | null
  }

  export type RequestNotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    requestId: number | null
  }

  export type RequestNotificationMinAggregateOutputType = {
    id: number | null
    title: string | null
    message: string | null
    type: string | null
    userId: number | null
    requestId: number | null
    isRead: boolean | null
    sentAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestNotificationMaxAggregateOutputType = {
    id: number | null
    title: string | null
    message: string | null
    type: string | null
    userId: number | null
    requestId: number | null
    isRead: boolean | null
    sentAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RequestNotificationCountAggregateOutputType = {
    id: number
    title: number
    message: number
    type: number
    userId: number
    requestId: number
    isRead: number
    sentAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RequestNotificationAvgAggregateInputType = {
    id?: true
    userId?: true
    requestId?: true
  }

  export type RequestNotificationSumAggregateInputType = {
    id?: true
    userId?: true
    requestId?: true
  }

  export type RequestNotificationMinAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    userId?: true
    requestId?: true
    isRead?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestNotificationMaxAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    userId?: true
    requestId?: true
    isRead?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RequestNotificationCountAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    userId?: true
    requestId?: true
    isRead?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RequestNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestNotification to aggregate.
     */
    where?: RequestNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestNotifications to fetch.
     */
    orderBy?: RequestNotificationOrderByWithRelationInput | RequestNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RequestNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RequestNotifications
    **/
    _count?: true | RequestNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequestNotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequestNotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequestNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequestNotificationMaxAggregateInputType
  }

  export type GetRequestNotificationAggregateType<T extends RequestNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateRequestNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequestNotification[P]>
      : GetScalarType<T[P], AggregateRequestNotification[P]>
  }




  export type RequestNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RequestNotificationWhereInput
    orderBy?: RequestNotificationOrderByWithAggregationInput | RequestNotificationOrderByWithAggregationInput[]
    by: RequestNotificationScalarFieldEnum[] | RequestNotificationScalarFieldEnum
    having?: RequestNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequestNotificationCountAggregateInputType | true
    _avg?: RequestNotificationAvgAggregateInputType
    _sum?: RequestNotificationSumAggregateInputType
    _min?: RequestNotificationMinAggregateInputType
    _max?: RequestNotificationMaxAggregateInputType
  }

  export type RequestNotificationGroupByOutputType = {
    id: number
    title: string
    message: string
    type: string
    userId: number
    requestId: number | null
    isRead: boolean
    sentAt: Date
    createdAt: Date
    updatedAt: Date
    _count: RequestNotificationCountAggregateOutputType | null
    _avg: RequestNotificationAvgAggregateOutputType | null
    _sum: RequestNotificationSumAggregateOutputType | null
    _min: RequestNotificationMinAggregateOutputType | null
    _max: RequestNotificationMaxAggregateOutputType | null
  }

  type GetRequestNotificationGroupByPayload<T extends RequestNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequestNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequestNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequestNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], RequestNotificationGroupByOutputType[P]>
        }
      >
    >


  export type RequestNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    userId?: boolean
    requestId?: boolean
    isRead?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    request?: boolean | RequestNotification$requestArgs<ExtArgs>
  }, ExtArgs["result"]["requestNotification"]>


  export type RequestNotificationSelectScalar = {
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    userId?: boolean
    requestId?: boolean
    isRead?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RequestNotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    request?: boolean | RequestNotification$requestArgs<ExtArgs>
  }

  export type $RequestNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RequestNotification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      request: Prisma.$MilkRequestPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      message: string
      type: string
      userId: number
      requestId: number | null
      isRead: boolean
      sentAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["requestNotification"]>
    composites: {}
  }

  type RequestNotificationGetPayload<S extends boolean | null | undefined | RequestNotificationDefaultArgs> = $Result.GetResult<Prisma.$RequestNotificationPayload, S>

  type RequestNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RequestNotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RequestNotificationCountAggregateInputType | true
    }

  export interface RequestNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RequestNotification'], meta: { name: 'RequestNotification' } }
    /**
     * Find zero or one RequestNotification that matches the filter.
     * @param {RequestNotificationFindUniqueArgs} args - Arguments to find a RequestNotification
     * @example
     * // Get one RequestNotification
     * const requestNotification = await prisma.requestNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RequestNotificationFindUniqueArgs>(args: SelectSubset<T, RequestNotificationFindUniqueArgs<ExtArgs>>): Prisma__RequestNotificationClient<$Result.GetResult<Prisma.$RequestNotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RequestNotification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RequestNotificationFindUniqueOrThrowArgs} args - Arguments to find a RequestNotification
     * @example
     * // Get one RequestNotification
     * const requestNotification = await prisma.requestNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RequestNotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, RequestNotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RequestNotificationClient<$Result.GetResult<Prisma.$RequestNotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RequestNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNotificationFindFirstArgs} args - Arguments to find a RequestNotification
     * @example
     * // Get one RequestNotification
     * const requestNotification = await prisma.requestNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RequestNotificationFindFirstArgs>(args?: SelectSubset<T, RequestNotificationFindFirstArgs<ExtArgs>>): Prisma__RequestNotificationClient<$Result.GetResult<Prisma.$RequestNotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RequestNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNotificationFindFirstOrThrowArgs} args - Arguments to find a RequestNotification
     * @example
     * // Get one RequestNotification
     * const requestNotification = await prisma.requestNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RequestNotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, RequestNotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__RequestNotificationClient<$Result.GetResult<Prisma.$RequestNotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RequestNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RequestNotifications
     * const requestNotifications = await prisma.requestNotification.findMany()
     * 
     * // Get first 10 RequestNotifications
     * const requestNotifications = await prisma.requestNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requestNotificationWithIdOnly = await prisma.requestNotification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RequestNotificationFindManyArgs>(args?: SelectSubset<T, RequestNotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RequestNotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RequestNotification.
     * @param {RequestNotificationCreateArgs} args - Arguments to create a RequestNotification.
     * @example
     * // Create one RequestNotification
     * const RequestNotification = await prisma.requestNotification.create({
     *   data: {
     *     // ... data to create a RequestNotification
     *   }
     * })
     * 
     */
    create<T extends RequestNotificationCreateArgs>(args: SelectSubset<T, RequestNotificationCreateArgs<ExtArgs>>): Prisma__RequestNotificationClient<$Result.GetResult<Prisma.$RequestNotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RequestNotifications.
     * @param {RequestNotificationCreateManyArgs} args - Arguments to create many RequestNotifications.
     * @example
     * // Create many RequestNotifications
     * const requestNotification = await prisma.requestNotification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RequestNotificationCreateManyArgs>(args?: SelectSubset<T, RequestNotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RequestNotification.
     * @param {RequestNotificationDeleteArgs} args - Arguments to delete one RequestNotification.
     * @example
     * // Delete one RequestNotification
     * const RequestNotification = await prisma.requestNotification.delete({
     *   where: {
     *     // ... filter to delete one RequestNotification
     *   }
     * })
     * 
     */
    delete<T extends RequestNotificationDeleteArgs>(args: SelectSubset<T, RequestNotificationDeleteArgs<ExtArgs>>): Prisma__RequestNotificationClient<$Result.GetResult<Prisma.$RequestNotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RequestNotification.
     * @param {RequestNotificationUpdateArgs} args - Arguments to update one RequestNotification.
     * @example
     * // Update one RequestNotification
     * const requestNotification = await prisma.requestNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RequestNotificationUpdateArgs>(args: SelectSubset<T, RequestNotificationUpdateArgs<ExtArgs>>): Prisma__RequestNotificationClient<$Result.GetResult<Prisma.$RequestNotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RequestNotifications.
     * @param {RequestNotificationDeleteManyArgs} args - Arguments to filter RequestNotifications to delete.
     * @example
     * // Delete a few RequestNotifications
     * const { count } = await prisma.requestNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RequestNotificationDeleteManyArgs>(args?: SelectSubset<T, RequestNotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RequestNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RequestNotifications
     * const requestNotification = await prisma.requestNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RequestNotificationUpdateManyArgs>(args: SelectSubset<T, RequestNotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RequestNotification.
     * @param {RequestNotificationUpsertArgs} args - Arguments to update or create a RequestNotification.
     * @example
     * // Update or create a RequestNotification
     * const requestNotification = await prisma.requestNotification.upsert({
     *   create: {
     *     // ... data to create a RequestNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RequestNotification we want to update
     *   }
     * })
     */
    upsert<T extends RequestNotificationUpsertArgs>(args: SelectSubset<T, RequestNotificationUpsertArgs<ExtArgs>>): Prisma__RequestNotificationClient<$Result.GetResult<Prisma.$RequestNotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RequestNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNotificationCountArgs} args - Arguments to filter RequestNotifications to count.
     * @example
     * // Count the number of RequestNotifications
     * const count = await prisma.requestNotification.count({
     *   where: {
     *     // ... the filter for the RequestNotifications we want to count
     *   }
     * })
    **/
    count<T extends RequestNotificationCountArgs>(
      args?: Subset<T, RequestNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequestNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RequestNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequestNotificationAggregateArgs>(args: Subset<T, RequestNotificationAggregateArgs>): Prisma.PrismaPromise<GetRequestNotificationAggregateType<T>>

    /**
     * Group by RequestNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequestNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RequestNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RequestNotificationGroupByArgs['orderBy'] }
        : { orderBy?: RequestNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RequestNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequestNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RequestNotification model
   */
  readonly fields: RequestNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RequestNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RequestNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    request<T extends RequestNotification$requestArgs<ExtArgs> = {}>(args?: Subset<T, RequestNotification$requestArgs<ExtArgs>>): Prisma__MilkRequestClient<$Result.GetResult<Prisma.$MilkRequestPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RequestNotification model
   */ 
  interface RequestNotificationFieldRefs {
    readonly id: FieldRef<"RequestNotification", 'Int'>
    readonly title: FieldRef<"RequestNotification", 'String'>
    readonly message: FieldRef<"RequestNotification", 'String'>
    readonly type: FieldRef<"RequestNotification", 'String'>
    readonly userId: FieldRef<"RequestNotification", 'Int'>
    readonly requestId: FieldRef<"RequestNotification", 'Int'>
    readonly isRead: FieldRef<"RequestNotification", 'Boolean'>
    readonly sentAt: FieldRef<"RequestNotification", 'DateTime'>
    readonly createdAt: FieldRef<"RequestNotification", 'DateTime'>
    readonly updatedAt: FieldRef<"RequestNotification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RequestNotification findUnique
   */
  export type RequestNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
    /**
     * Filter, which RequestNotification to fetch.
     */
    where: RequestNotificationWhereUniqueInput
  }

  /**
   * RequestNotification findUniqueOrThrow
   */
  export type RequestNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
    /**
     * Filter, which RequestNotification to fetch.
     */
    where: RequestNotificationWhereUniqueInput
  }

  /**
   * RequestNotification findFirst
   */
  export type RequestNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
    /**
     * Filter, which RequestNotification to fetch.
     */
    where?: RequestNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestNotifications to fetch.
     */
    orderBy?: RequestNotificationOrderByWithRelationInput | RequestNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestNotifications.
     */
    cursor?: RequestNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestNotifications.
     */
    distinct?: RequestNotificationScalarFieldEnum | RequestNotificationScalarFieldEnum[]
  }

  /**
   * RequestNotification findFirstOrThrow
   */
  export type RequestNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
    /**
     * Filter, which RequestNotification to fetch.
     */
    where?: RequestNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestNotifications to fetch.
     */
    orderBy?: RequestNotificationOrderByWithRelationInput | RequestNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RequestNotifications.
     */
    cursor?: RequestNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RequestNotifications.
     */
    distinct?: RequestNotificationScalarFieldEnum | RequestNotificationScalarFieldEnum[]
  }

  /**
   * RequestNotification findMany
   */
  export type RequestNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
    /**
     * Filter, which RequestNotifications to fetch.
     */
    where?: RequestNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RequestNotifications to fetch.
     */
    orderBy?: RequestNotificationOrderByWithRelationInput | RequestNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RequestNotifications.
     */
    cursor?: RequestNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RequestNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RequestNotifications.
     */
    skip?: number
    distinct?: RequestNotificationScalarFieldEnum | RequestNotificationScalarFieldEnum[]
  }

  /**
   * RequestNotification create
   */
  export type RequestNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a RequestNotification.
     */
    data: XOR<RequestNotificationCreateInput, RequestNotificationUncheckedCreateInput>
  }

  /**
   * RequestNotification createMany
   */
  export type RequestNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RequestNotifications.
     */
    data: RequestNotificationCreateManyInput | RequestNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RequestNotification update
   */
  export type RequestNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a RequestNotification.
     */
    data: XOR<RequestNotificationUpdateInput, RequestNotificationUncheckedUpdateInput>
    /**
     * Choose, which RequestNotification to update.
     */
    where: RequestNotificationWhereUniqueInput
  }

  /**
   * RequestNotification updateMany
   */
  export type RequestNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RequestNotifications.
     */
    data: XOR<RequestNotificationUpdateManyMutationInput, RequestNotificationUncheckedUpdateManyInput>
    /**
     * Filter which RequestNotifications to update
     */
    where?: RequestNotificationWhereInput
  }

  /**
   * RequestNotification upsert
   */
  export type RequestNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the RequestNotification to update in case it exists.
     */
    where: RequestNotificationWhereUniqueInput
    /**
     * In case the RequestNotification found by the `where` argument doesn't exist, create a new RequestNotification with this data.
     */
    create: XOR<RequestNotificationCreateInput, RequestNotificationUncheckedCreateInput>
    /**
     * In case the RequestNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RequestNotificationUpdateInput, RequestNotificationUncheckedUpdateInput>
  }

  /**
   * RequestNotification delete
   */
  export type RequestNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
    /**
     * Filter which RequestNotification to delete.
     */
    where: RequestNotificationWhereUniqueInput
  }

  /**
   * RequestNotification deleteMany
   */
  export type RequestNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RequestNotifications to delete
     */
    where?: RequestNotificationWhereInput
  }

  /**
   * RequestNotification.request
   */
  export type RequestNotification$requestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MilkRequest
     */
    select?: MilkRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MilkRequestInclude<ExtArgs> | null
    where?: MilkRequestWhereInput
  }

  /**
   * RequestNotification without action
   */
  export type RequestNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RequestNotification
     */
    select?: RequestNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RequestNotificationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    zipcode: 'zipcode',
    userType: 'userType',
    isNew: 'isNew',
    isActive: 'isActive',
    fcmToken: 'fcmToken',
    lastLoginAt: 'lastLoginAt',
    description: 'description',
    bloodGroup: 'bloodGroup',
    babyDeliveryDate: 'babyDeliveryDate',
    healthStyle: 'healthStyle',
    ableToShareMedicalRecord: 'ableToShareMedicalRecord',
    isAvailable: 'isAvailable',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BabyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    gender: 'gender',
    deliveryDate: 'deliveryDate',
    bloodGroup: 'bloodGroup',
    weight: 'weight',
    height: 'height',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BabyScalarFieldEnum = (typeof BabyScalarFieldEnum)[keyof typeof BabyScalarFieldEnum]


  export const FeedLogScalarFieldEnum: {
    id: 'id',
    feedingDate: 'feedingDate',
    startTime: 'startTime',
    endTime: 'endTime',
    feedType: 'feedType',
    position: 'position',
    amount: 'amount',
    note: 'note',
    babyId: 'babyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FeedLogScalarFieldEnum = (typeof FeedLogScalarFieldEnum)[keyof typeof FeedLogScalarFieldEnum]


  export const DiaperLogScalarFieldEnum: {
    id: 'id',
    date: 'date',
    time: 'time',
    diaperType: 'diaperType',
    note: 'note',
    babyId: 'babyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DiaperLogScalarFieldEnum = (typeof DiaperLogScalarFieldEnum)[keyof typeof DiaperLogScalarFieldEnum]


  export const SleepLogScalarFieldEnum: {
    id: 'id',
    date: 'date',
    startTime: 'startTime',
    endTime: 'endTime',
    sleepQuality: 'sleepQuality',
    location: 'location',
    note: 'note',
    babyId: 'babyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SleepLogScalarFieldEnum = (typeof SleepLogScalarFieldEnum)[keyof typeof SleepLogScalarFieldEnum]


  export const OtpVerificationScalarFieldEnum: {
    id: 'id',
    email: 'email',
    otp: 'otp',
    expiresAt: 'expiresAt',
    isUsed: 'isUsed',
    attempts: 'attempts',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OtpVerificationScalarFieldEnum = (typeof OtpVerificationScalarFieldEnum)[keyof typeof OtpVerificationScalarFieldEnum]


  export const ZipCodeScalarFieldEnum: {
    id: 'id',
    country: 'country',
    zipcode: 'zipcode',
    placeName: 'placeName',
    latitude: 'latitude',
    longitude: 'longitude',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ZipCodeScalarFieldEnum = (typeof ZipCodeScalarFieldEnum)[keyof typeof ZipCodeScalarFieldEnum]


  export const MilkRequestScalarFieldEnum: {
    id: 'id',
    requestType: 'requestType',
    status: 'status',
    title: 'title',
    description: 'description',
    quantity: 'quantity',
    urgency: 'urgency',
    requesterId: 'requesterId',
    donorId: 'donorId',
    requesterZipcode: 'requesterZipcode',
    donorZipcode: 'donorZipcode',
    distance: 'distance',
    neededBy: 'neededBy',
    acceptedAt: 'acceptedAt',
    completedAt: 'completedAt',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MilkRequestScalarFieldEnum = (typeof MilkRequestScalarFieldEnum)[keyof typeof MilkRequestScalarFieldEnum]


  export const RequestNotificationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    message: 'message',
    type: 'type',
    userId: 'userId',
    requestId: 'requestId',
    isRead: 'isRead',
    sentAt: 'sentAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RequestNotificationScalarFieldEnum = (typeof RequestNotificationScalarFieldEnum)[keyof typeof RequestNotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'UserType'
   */
  export type EnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'FeedType'
   */
  export type EnumFeedTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FeedType'>
    


  /**
   * Reference to a field of type 'Position'
   */
  export type EnumPositionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Position'>
    


  /**
   * Reference to a field of type 'DiaperType'
   */
  export type EnumDiaperTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DiaperType'>
    


  /**
   * Reference to a field of type 'SleepLocation'
   */
  export type EnumSleepLocationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SleepLocation'>
    


  /**
   * Reference to a field of type 'RequestType'
   */
  export type EnumRequestTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestType'>
    


  /**
   * Reference to a field of type 'RequestStatus'
   */
  export type EnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    zipcode?: StringFilter<"User"> | string
    userType?: EnumUserTypeFilter<"User"> | $Enums.UserType
    isNew?: BoolFilter<"User"> | boolean
    isActive?: BoolFilter<"User"> | boolean
    fcmToken?: StringNullableFilter<"User"> | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    description?: StringNullableFilter<"User"> | string | null
    bloodGroup?: StringNullableFilter<"User"> | string | null
    babyDeliveryDate?: DateTimeNullableFilter<"User"> | Date | string | null
    healthStyle?: StringNullableFilter<"User"> | string | null
    ableToShareMedicalRecord?: BoolNullableFilter<"User"> | boolean | null
    isAvailable?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    babies?: BabyListRelationFilter
    otpVerifications?: OtpVerificationListRelationFilter
    sentRequests?: MilkRequestListRelationFilter
    receivedRequests?: MilkRequestListRelationFilter
    notifications?: RequestNotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    zipcode?: SortOrder
    userType?: SortOrder
    isNew?: SortOrder
    isActive?: SortOrder
    fcmToken?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    bloodGroup?: SortOrderInput | SortOrder
    babyDeliveryDate?: SortOrderInput | SortOrder
    healthStyle?: SortOrderInput | SortOrder
    ableToShareMedicalRecord?: SortOrderInput | SortOrder
    isAvailable?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    babies?: BabyOrderByRelationAggregateInput
    otpVerifications?: OtpVerificationOrderByRelationAggregateInput
    sentRequests?: MilkRequestOrderByRelationAggregateInput
    receivedRequests?: MilkRequestOrderByRelationAggregateInput
    notifications?: RequestNotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    zipcode?: StringFilter<"User"> | string
    userType?: EnumUserTypeFilter<"User"> | $Enums.UserType
    isNew?: BoolFilter<"User"> | boolean
    isActive?: BoolFilter<"User"> | boolean
    fcmToken?: StringNullableFilter<"User"> | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    description?: StringNullableFilter<"User"> | string | null
    bloodGroup?: StringNullableFilter<"User"> | string | null
    babyDeliveryDate?: DateTimeNullableFilter<"User"> | Date | string | null
    healthStyle?: StringNullableFilter<"User"> | string | null
    ableToShareMedicalRecord?: BoolNullableFilter<"User"> | boolean | null
    isAvailable?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    babies?: BabyListRelationFilter
    otpVerifications?: OtpVerificationListRelationFilter
    sentRequests?: MilkRequestListRelationFilter
    receivedRequests?: MilkRequestListRelationFilter
    notifications?: RequestNotificationListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    zipcode?: SortOrder
    userType?: SortOrder
    isNew?: SortOrder
    isActive?: SortOrder
    fcmToken?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    bloodGroup?: SortOrderInput | SortOrder
    babyDeliveryDate?: SortOrderInput | SortOrder
    healthStyle?: SortOrderInput | SortOrder
    ableToShareMedicalRecord?: SortOrderInput | SortOrder
    isAvailable?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    zipcode?: StringWithAggregatesFilter<"User"> | string
    userType?: EnumUserTypeWithAggregatesFilter<"User"> | $Enums.UserType
    isNew?: BoolWithAggregatesFilter<"User"> | boolean
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    fcmToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    description?: StringNullableWithAggregatesFilter<"User"> | string | null
    bloodGroup?: StringNullableWithAggregatesFilter<"User"> | string | null
    babyDeliveryDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    healthStyle?: StringNullableWithAggregatesFilter<"User"> | string | null
    ableToShareMedicalRecord?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    isAvailable?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type BabyWhereInput = {
    AND?: BabyWhereInput | BabyWhereInput[]
    OR?: BabyWhereInput[]
    NOT?: BabyWhereInput | BabyWhereInput[]
    id?: IntFilter<"Baby"> | number
    name?: StringFilter<"Baby"> | string
    gender?: EnumGenderFilter<"Baby"> | $Enums.Gender
    deliveryDate?: DateTimeFilter<"Baby"> | Date | string
    bloodGroup?: StringNullableFilter<"Baby"> | string | null
    weight?: FloatNullableFilter<"Baby"> | number | null
    height?: FloatNullableFilter<"Baby"> | number | null
    userId?: IntFilter<"Baby"> | number
    createdAt?: DateTimeFilter<"Baby"> | Date | string
    updatedAt?: DateTimeFilter<"Baby"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    feedLogs?: FeedLogListRelationFilter
    diaperLogs?: DiaperLogListRelationFilter
    sleepLogs?: SleepLogListRelationFilter
  }

  export type BabyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    deliveryDate?: SortOrder
    bloodGroup?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    feedLogs?: FeedLogOrderByRelationAggregateInput
    diaperLogs?: DiaperLogOrderByRelationAggregateInput
    sleepLogs?: SleepLogOrderByRelationAggregateInput
  }

  export type BabyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BabyWhereInput | BabyWhereInput[]
    OR?: BabyWhereInput[]
    NOT?: BabyWhereInput | BabyWhereInput[]
    name?: StringFilter<"Baby"> | string
    gender?: EnumGenderFilter<"Baby"> | $Enums.Gender
    deliveryDate?: DateTimeFilter<"Baby"> | Date | string
    bloodGroup?: StringNullableFilter<"Baby"> | string | null
    weight?: FloatNullableFilter<"Baby"> | number | null
    height?: FloatNullableFilter<"Baby"> | number | null
    userId?: IntFilter<"Baby"> | number
    createdAt?: DateTimeFilter<"Baby"> | Date | string
    updatedAt?: DateTimeFilter<"Baby"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    feedLogs?: FeedLogListRelationFilter
    diaperLogs?: DiaperLogListRelationFilter
    sleepLogs?: SleepLogListRelationFilter
  }, "id">

  export type BabyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    deliveryDate?: SortOrder
    bloodGroup?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BabyCountOrderByAggregateInput
    _avg?: BabyAvgOrderByAggregateInput
    _max?: BabyMaxOrderByAggregateInput
    _min?: BabyMinOrderByAggregateInput
    _sum?: BabySumOrderByAggregateInput
  }

  export type BabyScalarWhereWithAggregatesInput = {
    AND?: BabyScalarWhereWithAggregatesInput | BabyScalarWhereWithAggregatesInput[]
    OR?: BabyScalarWhereWithAggregatesInput[]
    NOT?: BabyScalarWhereWithAggregatesInput | BabyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Baby"> | number
    name?: StringWithAggregatesFilter<"Baby"> | string
    gender?: EnumGenderWithAggregatesFilter<"Baby"> | $Enums.Gender
    deliveryDate?: DateTimeWithAggregatesFilter<"Baby"> | Date | string
    bloodGroup?: StringNullableWithAggregatesFilter<"Baby"> | string | null
    weight?: FloatNullableWithAggregatesFilter<"Baby"> | number | null
    height?: FloatNullableWithAggregatesFilter<"Baby"> | number | null
    userId?: IntWithAggregatesFilter<"Baby"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Baby"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Baby"> | Date | string
  }

  export type FeedLogWhereInput = {
    AND?: FeedLogWhereInput | FeedLogWhereInput[]
    OR?: FeedLogWhereInput[]
    NOT?: FeedLogWhereInput | FeedLogWhereInput[]
    id?: IntFilter<"FeedLog"> | number
    feedingDate?: DateTimeFilter<"FeedLog"> | Date | string
    startTime?: DateTimeFilter<"FeedLog"> | Date | string
    endTime?: DateTimeFilter<"FeedLog"> | Date | string
    feedType?: EnumFeedTypeFilter<"FeedLog"> | $Enums.FeedType
    position?: EnumPositionNullableFilter<"FeedLog"> | $Enums.Position | null
    amount?: FloatNullableFilter<"FeedLog"> | number | null
    note?: StringNullableFilter<"FeedLog"> | string | null
    babyId?: IntFilter<"FeedLog"> | number
    createdAt?: DateTimeFilter<"FeedLog"> | Date | string
    updatedAt?: DateTimeFilter<"FeedLog"> | Date | string
    baby?: XOR<BabyRelationFilter, BabyWhereInput>
  }

  export type FeedLogOrderByWithRelationInput = {
    id?: SortOrder
    feedingDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    feedType?: SortOrder
    position?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    baby?: BabyOrderByWithRelationInput
  }

  export type FeedLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeedLogWhereInput | FeedLogWhereInput[]
    OR?: FeedLogWhereInput[]
    NOT?: FeedLogWhereInput | FeedLogWhereInput[]
    feedingDate?: DateTimeFilter<"FeedLog"> | Date | string
    startTime?: DateTimeFilter<"FeedLog"> | Date | string
    endTime?: DateTimeFilter<"FeedLog"> | Date | string
    feedType?: EnumFeedTypeFilter<"FeedLog"> | $Enums.FeedType
    position?: EnumPositionNullableFilter<"FeedLog"> | $Enums.Position | null
    amount?: FloatNullableFilter<"FeedLog"> | number | null
    note?: StringNullableFilter<"FeedLog"> | string | null
    babyId?: IntFilter<"FeedLog"> | number
    createdAt?: DateTimeFilter<"FeedLog"> | Date | string
    updatedAt?: DateTimeFilter<"FeedLog"> | Date | string
    baby?: XOR<BabyRelationFilter, BabyWhereInput>
  }, "id">

  export type FeedLogOrderByWithAggregationInput = {
    id?: SortOrder
    feedingDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    feedType?: SortOrder
    position?: SortOrderInput | SortOrder
    amount?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FeedLogCountOrderByAggregateInput
    _avg?: FeedLogAvgOrderByAggregateInput
    _max?: FeedLogMaxOrderByAggregateInput
    _min?: FeedLogMinOrderByAggregateInput
    _sum?: FeedLogSumOrderByAggregateInput
  }

  export type FeedLogScalarWhereWithAggregatesInput = {
    AND?: FeedLogScalarWhereWithAggregatesInput | FeedLogScalarWhereWithAggregatesInput[]
    OR?: FeedLogScalarWhereWithAggregatesInput[]
    NOT?: FeedLogScalarWhereWithAggregatesInput | FeedLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeedLog"> | number
    feedingDate?: DateTimeWithAggregatesFilter<"FeedLog"> | Date | string
    startTime?: DateTimeWithAggregatesFilter<"FeedLog"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"FeedLog"> | Date | string
    feedType?: EnumFeedTypeWithAggregatesFilter<"FeedLog"> | $Enums.FeedType
    position?: EnumPositionNullableWithAggregatesFilter<"FeedLog"> | $Enums.Position | null
    amount?: FloatNullableWithAggregatesFilter<"FeedLog"> | number | null
    note?: StringNullableWithAggregatesFilter<"FeedLog"> | string | null
    babyId?: IntWithAggregatesFilter<"FeedLog"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FeedLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FeedLog"> | Date | string
  }

  export type DiaperLogWhereInput = {
    AND?: DiaperLogWhereInput | DiaperLogWhereInput[]
    OR?: DiaperLogWhereInput[]
    NOT?: DiaperLogWhereInput | DiaperLogWhereInput[]
    id?: IntFilter<"DiaperLog"> | number
    date?: DateTimeFilter<"DiaperLog"> | Date | string
    time?: DateTimeFilter<"DiaperLog"> | Date | string
    diaperType?: EnumDiaperTypeFilter<"DiaperLog"> | $Enums.DiaperType
    note?: StringNullableFilter<"DiaperLog"> | string | null
    babyId?: IntFilter<"DiaperLog"> | number
    createdAt?: DateTimeFilter<"DiaperLog"> | Date | string
    updatedAt?: DateTimeFilter<"DiaperLog"> | Date | string
    baby?: XOR<BabyRelationFilter, BabyWhereInput>
  }

  export type DiaperLogOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    time?: SortOrder
    diaperType?: SortOrder
    note?: SortOrderInput | SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    baby?: BabyOrderByWithRelationInput
  }

  export type DiaperLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DiaperLogWhereInput | DiaperLogWhereInput[]
    OR?: DiaperLogWhereInput[]
    NOT?: DiaperLogWhereInput | DiaperLogWhereInput[]
    date?: DateTimeFilter<"DiaperLog"> | Date | string
    time?: DateTimeFilter<"DiaperLog"> | Date | string
    diaperType?: EnumDiaperTypeFilter<"DiaperLog"> | $Enums.DiaperType
    note?: StringNullableFilter<"DiaperLog"> | string | null
    babyId?: IntFilter<"DiaperLog"> | number
    createdAt?: DateTimeFilter<"DiaperLog"> | Date | string
    updatedAt?: DateTimeFilter<"DiaperLog"> | Date | string
    baby?: XOR<BabyRelationFilter, BabyWhereInput>
  }, "id">

  export type DiaperLogOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    time?: SortOrder
    diaperType?: SortOrder
    note?: SortOrderInput | SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DiaperLogCountOrderByAggregateInput
    _avg?: DiaperLogAvgOrderByAggregateInput
    _max?: DiaperLogMaxOrderByAggregateInput
    _min?: DiaperLogMinOrderByAggregateInput
    _sum?: DiaperLogSumOrderByAggregateInput
  }

  export type DiaperLogScalarWhereWithAggregatesInput = {
    AND?: DiaperLogScalarWhereWithAggregatesInput | DiaperLogScalarWhereWithAggregatesInput[]
    OR?: DiaperLogScalarWhereWithAggregatesInput[]
    NOT?: DiaperLogScalarWhereWithAggregatesInput | DiaperLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DiaperLog"> | number
    date?: DateTimeWithAggregatesFilter<"DiaperLog"> | Date | string
    time?: DateTimeWithAggregatesFilter<"DiaperLog"> | Date | string
    diaperType?: EnumDiaperTypeWithAggregatesFilter<"DiaperLog"> | $Enums.DiaperType
    note?: StringNullableWithAggregatesFilter<"DiaperLog"> | string | null
    babyId?: IntWithAggregatesFilter<"DiaperLog"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DiaperLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DiaperLog"> | Date | string
  }

  export type SleepLogWhereInput = {
    AND?: SleepLogWhereInput | SleepLogWhereInput[]
    OR?: SleepLogWhereInput[]
    NOT?: SleepLogWhereInput | SleepLogWhereInput[]
    id?: IntFilter<"SleepLog"> | number
    date?: DateTimeFilter<"SleepLog"> | Date | string
    startTime?: DateTimeFilter<"SleepLog"> | Date | string
    endTime?: DateTimeFilter<"SleepLog"> | Date | string
    sleepQuality?: StringNullableFilter<"SleepLog"> | string | null
    location?: EnumSleepLocationFilter<"SleepLog"> | $Enums.SleepLocation
    note?: StringNullableFilter<"SleepLog"> | string | null
    babyId?: IntFilter<"SleepLog"> | number
    createdAt?: DateTimeFilter<"SleepLog"> | Date | string
    updatedAt?: DateTimeFilter<"SleepLog"> | Date | string
    baby?: XOR<BabyRelationFilter, BabyWhereInput>
  }

  export type SleepLogOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sleepQuality?: SortOrderInput | SortOrder
    location?: SortOrder
    note?: SortOrderInput | SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    baby?: BabyOrderByWithRelationInput
  }

  export type SleepLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SleepLogWhereInput | SleepLogWhereInput[]
    OR?: SleepLogWhereInput[]
    NOT?: SleepLogWhereInput | SleepLogWhereInput[]
    date?: DateTimeFilter<"SleepLog"> | Date | string
    startTime?: DateTimeFilter<"SleepLog"> | Date | string
    endTime?: DateTimeFilter<"SleepLog"> | Date | string
    sleepQuality?: StringNullableFilter<"SleepLog"> | string | null
    location?: EnumSleepLocationFilter<"SleepLog"> | $Enums.SleepLocation
    note?: StringNullableFilter<"SleepLog"> | string | null
    babyId?: IntFilter<"SleepLog"> | number
    createdAt?: DateTimeFilter<"SleepLog"> | Date | string
    updatedAt?: DateTimeFilter<"SleepLog"> | Date | string
    baby?: XOR<BabyRelationFilter, BabyWhereInput>
  }, "id">

  export type SleepLogOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sleepQuality?: SortOrderInput | SortOrder
    location?: SortOrder
    note?: SortOrderInput | SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SleepLogCountOrderByAggregateInput
    _avg?: SleepLogAvgOrderByAggregateInput
    _max?: SleepLogMaxOrderByAggregateInput
    _min?: SleepLogMinOrderByAggregateInput
    _sum?: SleepLogSumOrderByAggregateInput
  }

  export type SleepLogScalarWhereWithAggregatesInput = {
    AND?: SleepLogScalarWhereWithAggregatesInput | SleepLogScalarWhereWithAggregatesInput[]
    OR?: SleepLogScalarWhereWithAggregatesInput[]
    NOT?: SleepLogScalarWhereWithAggregatesInput | SleepLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SleepLog"> | number
    date?: DateTimeWithAggregatesFilter<"SleepLog"> | Date | string
    startTime?: DateTimeWithAggregatesFilter<"SleepLog"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"SleepLog"> | Date | string
    sleepQuality?: StringNullableWithAggregatesFilter<"SleepLog"> | string | null
    location?: EnumSleepLocationWithAggregatesFilter<"SleepLog"> | $Enums.SleepLocation
    note?: StringNullableWithAggregatesFilter<"SleepLog"> | string | null
    babyId?: IntWithAggregatesFilter<"SleepLog"> | number
    createdAt?: DateTimeWithAggregatesFilter<"SleepLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SleepLog"> | Date | string
  }

  export type OtpVerificationWhereInput = {
    AND?: OtpVerificationWhereInput | OtpVerificationWhereInput[]
    OR?: OtpVerificationWhereInput[]
    NOT?: OtpVerificationWhereInput | OtpVerificationWhereInput[]
    id?: IntFilter<"OtpVerification"> | number
    email?: StringFilter<"OtpVerification"> | string
    otp?: StringFilter<"OtpVerification"> | string
    expiresAt?: DateTimeFilter<"OtpVerification"> | Date | string
    isUsed?: BoolFilter<"OtpVerification"> | boolean
    attempts?: IntFilter<"OtpVerification"> | number
    userId?: IntNullableFilter<"OtpVerification"> | number | null
    createdAt?: DateTimeFilter<"OtpVerification"> | Date | string
    updatedAt?: DateTimeFilter<"OtpVerification"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type OtpVerificationOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    attempts?: SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OtpVerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OtpVerificationWhereInput | OtpVerificationWhereInput[]
    OR?: OtpVerificationWhereInput[]
    NOT?: OtpVerificationWhereInput | OtpVerificationWhereInput[]
    email?: StringFilter<"OtpVerification"> | string
    otp?: StringFilter<"OtpVerification"> | string
    expiresAt?: DateTimeFilter<"OtpVerification"> | Date | string
    isUsed?: BoolFilter<"OtpVerification"> | boolean
    attempts?: IntFilter<"OtpVerification"> | number
    userId?: IntNullableFilter<"OtpVerification"> | number | null
    createdAt?: DateTimeFilter<"OtpVerification"> | Date | string
    updatedAt?: DateTimeFilter<"OtpVerification"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type OtpVerificationOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    attempts?: SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OtpVerificationCountOrderByAggregateInput
    _avg?: OtpVerificationAvgOrderByAggregateInput
    _max?: OtpVerificationMaxOrderByAggregateInput
    _min?: OtpVerificationMinOrderByAggregateInput
    _sum?: OtpVerificationSumOrderByAggregateInput
  }

  export type OtpVerificationScalarWhereWithAggregatesInput = {
    AND?: OtpVerificationScalarWhereWithAggregatesInput | OtpVerificationScalarWhereWithAggregatesInput[]
    OR?: OtpVerificationScalarWhereWithAggregatesInput[]
    NOT?: OtpVerificationScalarWhereWithAggregatesInput | OtpVerificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OtpVerification"> | number
    email?: StringWithAggregatesFilter<"OtpVerification"> | string
    otp?: StringWithAggregatesFilter<"OtpVerification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"OtpVerification"> | Date | string
    isUsed?: BoolWithAggregatesFilter<"OtpVerification"> | boolean
    attempts?: IntWithAggregatesFilter<"OtpVerification"> | number
    userId?: IntNullableWithAggregatesFilter<"OtpVerification"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"OtpVerification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OtpVerification"> | Date | string
  }

  export type ZipCodeWhereInput = {
    AND?: ZipCodeWhereInput | ZipCodeWhereInput[]
    OR?: ZipCodeWhereInput[]
    NOT?: ZipCodeWhereInput | ZipCodeWhereInput[]
    id?: IntFilter<"ZipCode"> | number
    country?: StringFilter<"ZipCode"> | string
    zipcode?: StringFilter<"ZipCode"> | string
    placeName?: StringFilter<"ZipCode"> | string
    latitude?: FloatFilter<"ZipCode"> | number
    longitude?: FloatFilter<"ZipCode"> | number
    createdAt?: DateTimeFilter<"ZipCode"> | Date | string
    updatedAt?: DateTimeFilter<"ZipCode"> | Date | string
  }

  export type ZipCodeOrderByWithRelationInput = {
    id?: SortOrder
    country?: SortOrder
    zipcode?: SortOrder
    placeName?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ZipCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    zipcode?: string
    AND?: ZipCodeWhereInput | ZipCodeWhereInput[]
    OR?: ZipCodeWhereInput[]
    NOT?: ZipCodeWhereInput | ZipCodeWhereInput[]
    country?: StringFilter<"ZipCode"> | string
    placeName?: StringFilter<"ZipCode"> | string
    latitude?: FloatFilter<"ZipCode"> | number
    longitude?: FloatFilter<"ZipCode"> | number
    createdAt?: DateTimeFilter<"ZipCode"> | Date | string
    updatedAt?: DateTimeFilter<"ZipCode"> | Date | string
  }, "id" | "zipcode">

  export type ZipCodeOrderByWithAggregationInput = {
    id?: SortOrder
    country?: SortOrder
    zipcode?: SortOrder
    placeName?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ZipCodeCountOrderByAggregateInput
    _avg?: ZipCodeAvgOrderByAggregateInput
    _max?: ZipCodeMaxOrderByAggregateInput
    _min?: ZipCodeMinOrderByAggregateInput
    _sum?: ZipCodeSumOrderByAggregateInput
  }

  export type ZipCodeScalarWhereWithAggregatesInput = {
    AND?: ZipCodeScalarWhereWithAggregatesInput | ZipCodeScalarWhereWithAggregatesInput[]
    OR?: ZipCodeScalarWhereWithAggregatesInput[]
    NOT?: ZipCodeScalarWhereWithAggregatesInput | ZipCodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ZipCode"> | number
    country?: StringWithAggregatesFilter<"ZipCode"> | string
    zipcode?: StringWithAggregatesFilter<"ZipCode"> | string
    placeName?: StringWithAggregatesFilter<"ZipCode"> | string
    latitude?: FloatWithAggregatesFilter<"ZipCode"> | number
    longitude?: FloatWithAggregatesFilter<"ZipCode"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ZipCode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ZipCode"> | Date | string
  }

  export type MilkRequestWhereInput = {
    AND?: MilkRequestWhereInput | MilkRequestWhereInput[]
    OR?: MilkRequestWhereInput[]
    NOT?: MilkRequestWhereInput | MilkRequestWhereInput[]
    id?: IntFilter<"MilkRequest"> | number
    requestType?: EnumRequestTypeFilter<"MilkRequest"> | $Enums.RequestType
    status?: EnumRequestStatusFilter<"MilkRequest"> | $Enums.RequestStatus
    title?: StringFilter<"MilkRequest"> | string
    description?: StringNullableFilter<"MilkRequest"> | string | null
    quantity?: FloatNullableFilter<"MilkRequest"> | number | null
    urgency?: StringNullableFilter<"MilkRequest"> | string | null
    requesterId?: IntFilter<"MilkRequest"> | number
    donorId?: IntNullableFilter<"MilkRequest"> | number | null
    requesterZipcode?: StringFilter<"MilkRequest"> | string
    donorZipcode?: StringNullableFilter<"MilkRequest"> | string | null
    distance?: FloatNullableFilter<"MilkRequest"> | number | null
    neededBy?: DateTimeNullableFilter<"MilkRequest"> | Date | string | null
    acceptedAt?: DateTimeNullableFilter<"MilkRequest"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"MilkRequest"> | Date | string | null
    notes?: StringNullableFilter<"MilkRequest"> | string | null
    createdAt?: DateTimeFilter<"MilkRequest"> | Date | string
    updatedAt?: DateTimeFilter<"MilkRequest"> | Date | string
    requester?: XOR<UserRelationFilter, UserWhereInput>
    donor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    notifications?: RequestNotificationListRelationFilter
  }

  export type MilkRequestOrderByWithRelationInput = {
    id?: SortOrder
    requestType?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    urgency?: SortOrderInput | SortOrder
    requesterId?: SortOrder
    donorId?: SortOrderInput | SortOrder
    requesterZipcode?: SortOrder
    donorZipcode?: SortOrderInput | SortOrder
    distance?: SortOrderInput | SortOrder
    neededBy?: SortOrderInput | SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requester?: UserOrderByWithRelationInput
    donor?: UserOrderByWithRelationInput
    notifications?: RequestNotificationOrderByRelationAggregateInput
  }

  export type MilkRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MilkRequestWhereInput | MilkRequestWhereInput[]
    OR?: MilkRequestWhereInput[]
    NOT?: MilkRequestWhereInput | MilkRequestWhereInput[]
    requestType?: EnumRequestTypeFilter<"MilkRequest"> | $Enums.RequestType
    status?: EnumRequestStatusFilter<"MilkRequest"> | $Enums.RequestStatus
    title?: StringFilter<"MilkRequest"> | string
    description?: StringNullableFilter<"MilkRequest"> | string | null
    quantity?: FloatNullableFilter<"MilkRequest"> | number | null
    urgency?: StringNullableFilter<"MilkRequest"> | string | null
    requesterId?: IntFilter<"MilkRequest"> | number
    donorId?: IntNullableFilter<"MilkRequest"> | number | null
    requesterZipcode?: StringFilter<"MilkRequest"> | string
    donorZipcode?: StringNullableFilter<"MilkRequest"> | string | null
    distance?: FloatNullableFilter<"MilkRequest"> | number | null
    neededBy?: DateTimeNullableFilter<"MilkRequest"> | Date | string | null
    acceptedAt?: DateTimeNullableFilter<"MilkRequest"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"MilkRequest"> | Date | string | null
    notes?: StringNullableFilter<"MilkRequest"> | string | null
    createdAt?: DateTimeFilter<"MilkRequest"> | Date | string
    updatedAt?: DateTimeFilter<"MilkRequest"> | Date | string
    requester?: XOR<UserRelationFilter, UserWhereInput>
    donor?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    notifications?: RequestNotificationListRelationFilter
  }, "id">

  export type MilkRequestOrderByWithAggregationInput = {
    id?: SortOrder
    requestType?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    urgency?: SortOrderInput | SortOrder
    requesterId?: SortOrder
    donorId?: SortOrderInput | SortOrder
    requesterZipcode?: SortOrder
    donorZipcode?: SortOrderInput | SortOrder
    distance?: SortOrderInput | SortOrder
    neededBy?: SortOrderInput | SortOrder
    acceptedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MilkRequestCountOrderByAggregateInput
    _avg?: MilkRequestAvgOrderByAggregateInput
    _max?: MilkRequestMaxOrderByAggregateInput
    _min?: MilkRequestMinOrderByAggregateInput
    _sum?: MilkRequestSumOrderByAggregateInput
  }

  export type MilkRequestScalarWhereWithAggregatesInput = {
    AND?: MilkRequestScalarWhereWithAggregatesInput | MilkRequestScalarWhereWithAggregatesInput[]
    OR?: MilkRequestScalarWhereWithAggregatesInput[]
    NOT?: MilkRequestScalarWhereWithAggregatesInput | MilkRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MilkRequest"> | number
    requestType?: EnumRequestTypeWithAggregatesFilter<"MilkRequest"> | $Enums.RequestType
    status?: EnumRequestStatusWithAggregatesFilter<"MilkRequest"> | $Enums.RequestStatus
    title?: StringWithAggregatesFilter<"MilkRequest"> | string
    description?: StringNullableWithAggregatesFilter<"MilkRequest"> | string | null
    quantity?: FloatNullableWithAggregatesFilter<"MilkRequest"> | number | null
    urgency?: StringNullableWithAggregatesFilter<"MilkRequest"> | string | null
    requesterId?: IntWithAggregatesFilter<"MilkRequest"> | number
    donorId?: IntNullableWithAggregatesFilter<"MilkRequest"> | number | null
    requesterZipcode?: StringWithAggregatesFilter<"MilkRequest"> | string
    donorZipcode?: StringNullableWithAggregatesFilter<"MilkRequest"> | string | null
    distance?: FloatNullableWithAggregatesFilter<"MilkRequest"> | number | null
    neededBy?: DateTimeNullableWithAggregatesFilter<"MilkRequest"> | Date | string | null
    acceptedAt?: DateTimeNullableWithAggregatesFilter<"MilkRequest"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"MilkRequest"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"MilkRequest"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MilkRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MilkRequest"> | Date | string
  }

  export type RequestNotificationWhereInput = {
    AND?: RequestNotificationWhereInput | RequestNotificationWhereInput[]
    OR?: RequestNotificationWhereInput[]
    NOT?: RequestNotificationWhereInput | RequestNotificationWhereInput[]
    id?: IntFilter<"RequestNotification"> | number
    title?: StringFilter<"RequestNotification"> | string
    message?: StringFilter<"RequestNotification"> | string
    type?: StringFilter<"RequestNotification"> | string
    userId?: IntFilter<"RequestNotification"> | number
    requestId?: IntNullableFilter<"RequestNotification"> | number | null
    isRead?: BoolFilter<"RequestNotification"> | boolean
    sentAt?: DateTimeFilter<"RequestNotification"> | Date | string
    createdAt?: DateTimeFilter<"RequestNotification"> | Date | string
    updatedAt?: DateTimeFilter<"RequestNotification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    request?: XOR<MilkRequestNullableRelationFilter, MilkRequestWhereInput> | null
  }

  export type RequestNotificationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    requestId?: SortOrderInput | SortOrder
    isRead?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    request?: MilkRequestOrderByWithRelationInput
  }

  export type RequestNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RequestNotificationWhereInput | RequestNotificationWhereInput[]
    OR?: RequestNotificationWhereInput[]
    NOT?: RequestNotificationWhereInput | RequestNotificationWhereInput[]
    title?: StringFilter<"RequestNotification"> | string
    message?: StringFilter<"RequestNotification"> | string
    type?: StringFilter<"RequestNotification"> | string
    userId?: IntFilter<"RequestNotification"> | number
    requestId?: IntNullableFilter<"RequestNotification"> | number | null
    isRead?: BoolFilter<"RequestNotification"> | boolean
    sentAt?: DateTimeFilter<"RequestNotification"> | Date | string
    createdAt?: DateTimeFilter<"RequestNotification"> | Date | string
    updatedAt?: DateTimeFilter<"RequestNotification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    request?: XOR<MilkRequestNullableRelationFilter, MilkRequestWhereInput> | null
  }, "id">

  export type RequestNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    requestId?: SortOrderInput | SortOrder
    isRead?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RequestNotificationCountOrderByAggregateInput
    _avg?: RequestNotificationAvgOrderByAggregateInput
    _max?: RequestNotificationMaxOrderByAggregateInput
    _min?: RequestNotificationMinOrderByAggregateInput
    _sum?: RequestNotificationSumOrderByAggregateInput
  }

  export type RequestNotificationScalarWhereWithAggregatesInput = {
    AND?: RequestNotificationScalarWhereWithAggregatesInput | RequestNotificationScalarWhereWithAggregatesInput[]
    OR?: RequestNotificationScalarWhereWithAggregatesInput[]
    NOT?: RequestNotificationScalarWhereWithAggregatesInput | RequestNotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RequestNotification"> | number
    title?: StringWithAggregatesFilter<"RequestNotification"> | string
    message?: StringWithAggregatesFilter<"RequestNotification"> | string
    type?: StringWithAggregatesFilter<"RequestNotification"> | string
    userId?: IntWithAggregatesFilter<"RequestNotification"> | number
    requestId?: IntNullableWithAggregatesFilter<"RequestNotification"> | number | null
    isRead?: BoolWithAggregatesFilter<"RequestNotification"> | boolean
    sentAt?: DateTimeWithAggregatesFilter<"RequestNotification"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"RequestNotification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RequestNotification"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    babies?: BabyCreateNestedManyWithoutUserInput
    otpVerifications?: OtpVerificationCreateNestedManyWithoutUserInput
    sentRequests?: MilkRequestCreateNestedManyWithoutRequesterInput
    receivedRequests?: MilkRequestCreateNestedManyWithoutDonorInput
    notifications?: RequestNotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    babies?: BabyUncheckedCreateNestedManyWithoutUserInput
    otpVerifications?: OtpVerificationUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: MilkRequestUncheckedCreateNestedManyWithoutRequesterInput
    receivedRequests?: MilkRequestUncheckedCreateNestedManyWithoutDonorInput
    notifications?: RequestNotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    babies?: BabyUpdateManyWithoutUserNestedInput
    otpVerifications?: OtpVerificationUpdateManyWithoutUserNestedInput
    sentRequests?: MilkRequestUpdateManyWithoutRequesterNestedInput
    receivedRequests?: MilkRequestUpdateManyWithoutDonorNestedInput
    notifications?: RequestNotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    babies?: BabyUncheckedUpdateManyWithoutUserNestedInput
    otpVerifications?: OtpVerificationUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: MilkRequestUncheckedUpdateManyWithoutRequesterNestedInput
    receivedRequests?: MilkRequestUncheckedUpdateManyWithoutDonorNestedInput
    notifications?: RequestNotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BabyCreateInput = {
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBabiesInput
    feedLogs?: FeedLogCreateNestedManyWithoutBabyInput
    diaperLogs?: DiaperLogCreateNestedManyWithoutBabyInput
    sleepLogs?: SleepLogCreateNestedManyWithoutBabyInput
  }

  export type BabyUncheckedCreateInput = {
    id?: number
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    feedLogs?: FeedLogUncheckedCreateNestedManyWithoutBabyInput
    diaperLogs?: DiaperLogUncheckedCreateNestedManyWithoutBabyInput
    sleepLogs?: SleepLogUncheckedCreateNestedManyWithoutBabyInput
  }

  export type BabyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBabiesNestedInput
    feedLogs?: FeedLogUpdateManyWithoutBabyNestedInput
    diaperLogs?: DiaperLogUpdateManyWithoutBabyNestedInput
    sleepLogs?: SleepLogUpdateManyWithoutBabyNestedInput
  }

  export type BabyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedLogs?: FeedLogUncheckedUpdateManyWithoutBabyNestedInput
    diaperLogs?: DiaperLogUncheckedUpdateManyWithoutBabyNestedInput
    sleepLogs?: SleepLogUncheckedUpdateManyWithoutBabyNestedInput
  }

  export type BabyCreateManyInput = {
    id?: number
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BabyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BabyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLogCreateInput = {
    feedingDate: Date | string
    startTime: Date | string
    endTime: Date | string
    feedType: $Enums.FeedType
    position?: $Enums.Position | null
    amount?: number | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    baby: BabyCreateNestedOneWithoutFeedLogsInput
  }

  export type FeedLogUncheckedCreateInput = {
    id?: number
    feedingDate: Date | string
    startTime: Date | string
    endTime: Date | string
    feedType: $Enums.FeedType
    position?: $Enums.Position | null
    amount?: number | null
    note?: string | null
    babyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedLogUpdateInput = {
    feedingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    feedType?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    position?: NullableEnumPositionFieldUpdateOperationsInput | $Enums.Position | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    baby?: BabyUpdateOneRequiredWithoutFeedLogsNestedInput
  }

  export type FeedLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    feedingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    feedType?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    position?: NullableEnumPositionFieldUpdateOperationsInput | $Enums.Position | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    babyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLogCreateManyInput = {
    id?: number
    feedingDate: Date | string
    startTime: Date | string
    endTime: Date | string
    feedType: $Enums.FeedType
    position?: $Enums.Position | null
    amount?: number | null
    note?: string | null
    babyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedLogUpdateManyMutationInput = {
    feedingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    feedType?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    position?: NullableEnumPositionFieldUpdateOperationsInput | $Enums.Position | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    feedingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    feedType?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    position?: NullableEnumPositionFieldUpdateOperationsInput | $Enums.Position | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    babyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiaperLogCreateInput = {
    date: Date | string
    time: Date | string
    diaperType: $Enums.DiaperType
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    baby: BabyCreateNestedOneWithoutDiaperLogsInput
  }

  export type DiaperLogUncheckedCreateInput = {
    id?: number
    date: Date | string
    time: Date | string
    diaperType: $Enums.DiaperType
    note?: string | null
    babyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiaperLogUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    diaperType?: EnumDiaperTypeFieldUpdateOperationsInput | $Enums.DiaperType
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    baby?: BabyUpdateOneRequiredWithoutDiaperLogsNestedInput
  }

  export type DiaperLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    diaperType?: EnumDiaperTypeFieldUpdateOperationsInput | $Enums.DiaperType
    note?: NullableStringFieldUpdateOperationsInput | string | null
    babyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiaperLogCreateManyInput = {
    id?: number
    date: Date | string
    time: Date | string
    diaperType: $Enums.DiaperType
    note?: string | null
    babyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiaperLogUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    diaperType?: EnumDiaperTypeFieldUpdateOperationsInput | $Enums.DiaperType
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiaperLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    diaperType?: EnumDiaperTypeFieldUpdateOperationsInput | $Enums.DiaperType
    note?: NullableStringFieldUpdateOperationsInput | string | null
    babyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogCreateInput = {
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    sleepQuality?: string | null
    location: $Enums.SleepLocation
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    baby: BabyCreateNestedOneWithoutSleepLogsInput
  }

  export type SleepLogUncheckedCreateInput = {
    id?: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    sleepQuality?: string | null
    location: $Enums.SleepLocation
    note?: string | null
    babyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SleepLogUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sleepQuality?: NullableStringFieldUpdateOperationsInput | string | null
    location?: EnumSleepLocationFieldUpdateOperationsInput | $Enums.SleepLocation
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    baby?: BabyUpdateOneRequiredWithoutSleepLogsNestedInput
  }

  export type SleepLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sleepQuality?: NullableStringFieldUpdateOperationsInput | string | null
    location?: EnumSleepLocationFieldUpdateOperationsInput | $Enums.SleepLocation
    note?: NullableStringFieldUpdateOperationsInput | string | null
    babyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogCreateManyInput = {
    id?: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    sleepQuality?: string | null
    location: $Enums.SleepLocation
    note?: string | null
    babyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SleepLogUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sleepQuality?: NullableStringFieldUpdateOperationsInput | string | null
    location?: EnumSleepLocationFieldUpdateOperationsInput | $Enums.SleepLocation
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sleepQuality?: NullableStringFieldUpdateOperationsInput | string | null
    location?: EnumSleepLocationFieldUpdateOperationsInput | $Enums.SleepLocation
    note?: NullableStringFieldUpdateOperationsInput | string | null
    babyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpVerificationCreateInput = {
    email: string
    otp: string
    expiresAt: Date | string
    isUsed?: boolean
    attempts?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutOtpVerificationsInput
  }

  export type OtpVerificationUncheckedCreateInput = {
    id?: number
    email: string
    otp: string
    expiresAt: Date | string
    isUsed?: boolean
    attempts?: number
    userId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OtpVerificationUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutOtpVerificationsNestedInput
  }

  export type OtpVerificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    attempts?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpVerificationCreateManyInput = {
    id?: number
    email: string
    otp: string
    expiresAt: Date | string
    isUsed?: boolean
    attempts?: number
    userId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OtpVerificationUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpVerificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    attempts?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZipCodeCreateInput = {
    country: string
    zipcode: string
    placeName: string
    latitude: number
    longitude: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZipCodeUncheckedCreateInput = {
    id?: number
    country: string
    zipcode: string
    placeName: string
    latitude: number
    longitude: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZipCodeUpdateInput = {
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    placeName?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZipCodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    placeName?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZipCodeCreateManyInput = {
    id?: number
    country: string
    zipcode: string
    placeName: string
    latitude: number
    longitude: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZipCodeUpdateManyMutationInput = {
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    placeName?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZipCodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    placeName?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MilkRequestCreateInput = {
    requestType?: $Enums.RequestType
    status?: $Enums.RequestStatus
    title: string
    description?: string | null
    quantity?: number | null
    urgency?: string | null
    requesterZipcode: string
    donorZipcode?: string | null
    distance?: number | null
    neededBy?: Date | string | null
    acceptedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutSentRequestsInput
    donor?: UserCreateNestedOneWithoutReceivedRequestsInput
    notifications?: RequestNotificationCreateNestedManyWithoutRequestInput
  }

  export type MilkRequestUncheckedCreateInput = {
    id?: number
    requestType?: $Enums.RequestType
    status?: $Enums.RequestStatus
    title: string
    description?: string | null
    quantity?: number | null
    urgency?: string | null
    requesterId: number
    donorId?: number | null
    requesterZipcode: string
    donorZipcode?: string | null
    distance?: number | null
    neededBy?: Date | string | null
    acceptedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: RequestNotificationUncheckedCreateNestedManyWithoutRequestInput
  }

  export type MilkRequestUpdateInput = {
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutSentRequestsNestedInput
    donor?: UserUpdateOneWithoutReceivedRequestsNestedInput
    notifications?: RequestNotificationUpdateManyWithoutRequestNestedInput
  }

  export type MilkRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: IntFieldUpdateOperationsInput | number
    donorId?: NullableIntFieldUpdateOperationsInput | number | null
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: RequestNotificationUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type MilkRequestCreateManyInput = {
    id?: number
    requestType?: $Enums.RequestType
    status?: $Enums.RequestStatus
    title: string
    description?: string | null
    quantity?: number | null
    urgency?: string | null
    requesterId: number
    donorId?: number | null
    requesterZipcode: string
    donorZipcode?: string | null
    distance?: number | null
    neededBy?: Date | string | null
    acceptedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MilkRequestUpdateManyMutationInput = {
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MilkRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: IntFieldUpdateOperationsInput | number
    donorId?: NullableIntFieldUpdateOperationsInput | number | null
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNotificationCreateInput = {
    title: string
    message: string
    type: string
    isRead?: boolean
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
    request?: MilkRequestCreateNestedOneWithoutNotificationsInput
  }

  export type RequestNotificationUncheckedCreateInput = {
    id?: number
    title: string
    message: string
    type: string
    userId: number
    requestId?: number | null
    isRead?: boolean
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestNotificationUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    request?: MilkRequestUpdateOneWithoutNotificationsNestedInput
  }

  export type RequestNotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    requestId?: NullableIntFieldUpdateOperationsInput | number | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNotificationCreateManyInput = {
    id?: number
    title: string
    message: string
    type: string
    userId: number
    requestId?: number | null
    isRead?: boolean
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestNotificationUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    requestId?: NullableIntFieldUpdateOperationsInput | number | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BabyListRelationFilter = {
    every?: BabyWhereInput
    some?: BabyWhereInput
    none?: BabyWhereInput
  }

  export type OtpVerificationListRelationFilter = {
    every?: OtpVerificationWhereInput
    some?: OtpVerificationWhereInput
    none?: OtpVerificationWhereInput
  }

  export type MilkRequestListRelationFilter = {
    every?: MilkRequestWhereInput
    some?: MilkRequestWhereInput
    none?: MilkRequestWhereInput
  }

  export type RequestNotificationListRelationFilter = {
    every?: RequestNotificationWhereInput
    some?: RequestNotificationWhereInput
    none?: RequestNotificationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BabyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OtpVerificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MilkRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RequestNotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    zipcode?: SortOrder
    userType?: SortOrder
    isNew?: SortOrder
    isActive?: SortOrder
    fcmToken?: SortOrder
    lastLoginAt?: SortOrder
    description?: SortOrder
    bloodGroup?: SortOrder
    babyDeliveryDate?: SortOrder
    healthStyle?: SortOrder
    ableToShareMedicalRecord?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    zipcode?: SortOrder
    userType?: SortOrder
    isNew?: SortOrder
    isActive?: SortOrder
    fcmToken?: SortOrder
    lastLoginAt?: SortOrder
    description?: SortOrder
    bloodGroup?: SortOrder
    babyDeliveryDate?: SortOrder
    healthStyle?: SortOrder
    ableToShareMedicalRecord?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    zipcode?: SortOrder
    userType?: SortOrder
    isNew?: SortOrder
    isActive?: SortOrder
    fcmToken?: SortOrder
    lastLoginAt?: SortOrder
    description?: SortOrder
    bloodGroup?: SortOrder
    babyDeliveryDate?: SortOrder
    healthStyle?: SortOrder
    ableToShareMedicalRecord?: SortOrder
    isAvailable?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FeedLogListRelationFilter = {
    every?: FeedLogWhereInput
    some?: FeedLogWhereInput
    none?: FeedLogWhereInput
  }

  export type DiaperLogListRelationFilter = {
    every?: DiaperLogWhereInput
    some?: DiaperLogWhereInput
    none?: DiaperLogWhereInput
  }

  export type SleepLogListRelationFilter = {
    every?: SleepLogWhereInput
    some?: SleepLogWhereInput
    none?: SleepLogWhereInput
  }

  export type FeedLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DiaperLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SleepLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BabyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    deliveryDate?: SortOrder
    bloodGroup?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BabyAvgOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    userId?: SortOrder
  }

  export type BabyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    deliveryDate?: SortOrder
    bloodGroup?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BabyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    deliveryDate?: SortOrder
    bloodGroup?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BabySumOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    userId?: SortOrder
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumFeedTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedType | EnumFeedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedType[]
    notIn?: $Enums.FeedType[]
    not?: NestedEnumFeedTypeFilter<$PrismaModel> | $Enums.FeedType
  }

  export type EnumPositionNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Position | EnumPositionFieldRefInput<$PrismaModel> | null
    in?: $Enums.Position[] | null
    notIn?: $Enums.Position[] | null
    not?: NestedEnumPositionNullableFilter<$PrismaModel> | $Enums.Position | null
  }

  export type BabyRelationFilter = {
    is?: BabyWhereInput
    isNot?: BabyWhereInput
  }

  export type FeedLogCountOrderByAggregateInput = {
    id?: SortOrder
    feedingDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    feedType?: SortOrder
    position?: SortOrder
    amount?: SortOrder
    note?: SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedLogAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    babyId?: SortOrder
  }

  export type FeedLogMaxOrderByAggregateInput = {
    id?: SortOrder
    feedingDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    feedType?: SortOrder
    position?: SortOrder
    amount?: SortOrder
    note?: SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedLogMinOrderByAggregateInput = {
    id?: SortOrder
    feedingDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    feedType?: SortOrder
    position?: SortOrder
    amount?: SortOrder
    note?: SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedLogSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    babyId?: SortOrder
  }

  export type EnumFeedTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedType | EnumFeedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedType[]
    notIn?: $Enums.FeedType[]
    not?: NestedEnumFeedTypeWithAggregatesFilter<$PrismaModel> | $Enums.FeedType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFeedTypeFilter<$PrismaModel>
    _max?: NestedEnumFeedTypeFilter<$PrismaModel>
  }

  export type EnumPositionNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Position | EnumPositionFieldRefInput<$PrismaModel> | null
    in?: $Enums.Position[] | null
    notIn?: $Enums.Position[] | null
    not?: NestedEnumPositionNullableWithAggregatesFilter<$PrismaModel> | $Enums.Position | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPositionNullableFilter<$PrismaModel>
    _max?: NestedEnumPositionNullableFilter<$PrismaModel>
  }

  export type EnumDiaperTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DiaperType | EnumDiaperTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DiaperType[]
    notIn?: $Enums.DiaperType[]
    not?: NestedEnumDiaperTypeFilter<$PrismaModel> | $Enums.DiaperType
  }

  export type DiaperLogCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    time?: SortOrder
    diaperType?: SortOrder
    note?: SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiaperLogAvgOrderByAggregateInput = {
    id?: SortOrder
    babyId?: SortOrder
  }

  export type DiaperLogMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    time?: SortOrder
    diaperType?: SortOrder
    note?: SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiaperLogMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    time?: SortOrder
    diaperType?: SortOrder
    note?: SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DiaperLogSumOrderByAggregateInput = {
    id?: SortOrder
    babyId?: SortOrder
  }

  export type EnumDiaperTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DiaperType | EnumDiaperTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DiaperType[]
    notIn?: $Enums.DiaperType[]
    not?: NestedEnumDiaperTypeWithAggregatesFilter<$PrismaModel> | $Enums.DiaperType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDiaperTypeFilter<$PrismaModel>
    _max?: NestedEnumDiaperTypeFilter<$PrismaModel>
  }

  export type EnumSleepLocationFilter<$PrismaModel = never> = {
    equals?: $Enums.SleepLocation | EnumSleepLocationFieldRefInput<$PrismaModel>
    in?: $Enums.SleepLocation[]
    notIn?: $Enums.SleepLocation[]
    not?: NestedEnumSleepLocationFilter<$PrismaModel> | $Enums.SleepLocation
  }

  export type SleepLogCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sleepQuality?: SortOrder
    location?: SortOrder
    note?: SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SleepLogAvgOrderByAggregateInput = {
    id?: SortOrder
    babyId?: SortOrder
  }

  export type SleepLogMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sleepQuality?: SortOrder
    location?: SortOrder
    note?: SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SleepLogMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    sleepQuality?: SortOrder
    location?: SortOrder
    note?: SortOrder
    babyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SleepLogSumOrderByAggregateInput = {
    id?: SortOrder
    babyId?: SortOrder
  }

  export type EnumSleepLocationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SleepLocation | EnumSleepLocationFieldRefInput<$PrismaModel>
    in?: $Enums.SleepLocation[]
    notIn?: $Enums.SleepLocation[]
    not?: NestedEnumSleepLocationWithAggregatesFilter<$PrismaModel> | $Enums.SleepLocation
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSleepLocationFilter<$PrismaModel>
    _max?: NestedEnumSleepLocationFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type OtpVerificationCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    attempts?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OtpVerificationAvgOrderByAggregateInput = {
    id?: SortOrder
    attempts?: SortOrder
    userId?: SortOrder
  }

  export type OtpVerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    attempts?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OtpVerificationMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    otp?: SortOrder
    expiresAt?: SortOrder
    isUsed?: SortOrder
    attempts?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OtpVerificationSumOrderByAggregateInput = {
    id?: SortOrder
    attempts?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ZipCodeCountOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    zipcode?: SortOrder
    placeName?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ZipCodeAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ZipCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    zipcode?: SortOrder
    placeName?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ZipCodeMinOrderByAggregateInput = {
    id?: SortOrder
    country?: SortOrder
    zipcode?: SortOrder
    placeName?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ZipCodeSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumRequestTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestType | EnumRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RequestType[]
    notIn?: $Enums.RequestType[]
    not?: NestedEnumRequestTypeFilter<$PrismaModel> | $Enums.RequestType
  }

  export type EnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[]
    notIn?: $Enums.RequestStatus[]
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type MilkRequestCountOrderByAggregateInput = {
    id?: SortOrder
    requestType?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    urgency?: SortOrder
    requesterId?: SortOrder
    donorId?: SortOrder
    requesterZipcode?: SortOrder
    donorZipcode?: SortOrder
    distance?: SortOrder
    neededBy?: SortOrder
    acceptedAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MilkRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    requesterId?: SortOrder
    donorId?: SortOrder
    distance?: SortOrder
  }

  export type MilkRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    requestType?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    urgency?: SortOrder
    requesterId?: SortOrder
    donorId?: SortOrder
    requesterZipcode?: SortOrder
    donorZipcode?: SortOrder
    distance?: SortOrder
    neededBy?: SortOrder
    acceptedAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MilkRequestMinOrderByAggregateInput = {
    id?: SortOrder
    requestType?: SortOrder
    status?: SortOrder
    title?: SortOrder
    description?: SortOrder
    quantity?: SortOrder
    urgency?: SortOrder
    requesterId?: SortOrder
    donorId?: SortOrder
    requesterZipcode?: SortOrder
    donorZipcode?: SortOrder
    distance?: SortOrder
    neededBy?: SortOrder
    acceptedAt?: SortOrder
    completedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MilkRequestSumOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    requesterId?: SortOrder
    donorId?: SortOrder
    distance?: SortOrder
  }

  export type EnumRequestTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestType | EnumRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RequestType[]
    notIn?: $Enums.RequestType[]
    not?: NestedEnumRequestTypeWithAggregatesFilter<$PrismaModel> | $Enums.RequestType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestTypeFilter<$PrismaModel>
    _max?: NestedEnumRequestTypeFilter<$PrismaModel>
  }

  export type EnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[]
    notIn?: $Enums.RequestStatus[]
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type MilkRequestNullableRelationFilter = {
    is?: MilkRequestWhereInput | null
    isNot?: MilkRequestWhereInput | null
  }

  export type RequestNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    requestId?: SortOrder
    isRead?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestNotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    requestId?: SortOrder
  }

  export type RequestNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    requestId?: SortOrder
    isRead?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    userId?: SortOrder
    requestId?: SortOrder
    isRead?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RequestNotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    requestId?: SortOrder
  }

  export type BabyCreateNestedManyWithoutUserInput = {
    create?: XOR<BabyCreateWithoutUserInput, BabyUncheckedCreateWithoutUserInput> | BabyCreateWithoutUserInput[] | BabyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BabyCreateOrConnectWithoutUserInput | BabyCreateOrConnectWithoutUserInput[]
    createMany?: BabyCreateManyUserInputEnvelope
    connect?: BabyWhereUniqueInput | BabyWhereUniqueInput[]
  }

  export type OtpVerificationCreateNestedManyWithoutUserInput = {
    create?: XOR<OtpVerificationCreateWithoutUserInput, OtpVerificationUncheckedCreateWithoutUserInput> | OtpVerificationCreateWithoutUserInput[] | OtpVerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpVerificationCreateOrConnectWithoutUserInput | OtpVerificationCreateOrConnectWithoutUserInput[]
    createMany?: OtpVerificationCreateManyUserInputEnvelope
    connect?: OtpVerificationWhereUniqueInput | OtpVerificationWhereUniqueInput[]
  }

  export type MilkRequestCreateNestedManyWithoutRequesterInput = {
    create?: XOR<MilkRequestCreateWithoutRequesterInput, MilkRequestUncheckedCreateWithoutRequesterInput> | MilkRequestCreateWithoutRequesterInput[] | MilkRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: MilkRequestCreateOrConnectWithoutRequesterInput | MilkRequestCreateOrConnectWithoutRequesterInput[]
    createMany?: MilkRequestCreateManyRequesterInputEnvelope
    connect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
  }

  export type MilkRequestCreateNestedManyWithoutDonorInput = {
    create?: XOR<MilkRequestCreateWithoutDonorInput, MilkRequestUncheckedCreateWithoutDonorInput> | MilkRequestCreateWithoutDonorInput[] | MilkRequestUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: MilkRequestCreateOrConnectWithoutDonorInput | MilkRequestCreateOrConnectWithoutDonorInput[]
    createMany?: MilkRequestCreateManyDonorInputEnvelope
    connect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
  }

  export type RequestNotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<RequestNotificationCreateWithoutUserInput, RequestNotificationUncheckedCreateWithoutUserInput> | RequestNotificationCreateWithoutUserInput[] | RequestNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestNotificationCreateOrConnectWithoutUserInput | RequestNotificationCreateOrConnectWithoutUserInput[]
    createMany?: RequestNotificationCreateManyUserInputEnvelope
    connect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
  }

  export type BabyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BabyCreateWithoutUserInput, BabyUncheckedCreateWithoutUserInput> | BabyCreateWithoutUserInput[] | BabyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BabyCreateOrConnectWithoutUserInput | BabyCreateOrConnectWithoutUserInput[]
    createMany?: BabyCreateManyUserInputEnvelope
    connect?: BabyWhereUniqueInput | BabyWhereUniqueInput[]
  }

  export type OtpVerificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OtpVerificationCreateWithoutUserInput, OtpVerificationUncheckedCreateWithoutUserInput> | OtpVerificationCreateWithoutUserInput[] | OtpVerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpVerificationCreateOrConnectWithoutUserInput | OtpVerificationCreateOrConnectWithoutUserInput[]
    createMany?: OtpVerificationCreateManyUserInputEnvelope
    connect?: OtpVerificationWhereUniqueInput | OtpVerificationWhereUniqueInput[]
  }

  export type MilkRequestUncheckedCreateNestedManyWithoutRequesterInput = {
    create?: XOR<MilkRequestCreateWithoutRequesterInput, MilkRequestUncheckedCreateWithoutRequesterInput> | MilkRequestCreateWithoutRequesterInput[] | MilkRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: MilkRequestCreateOrConnectWithoutRequesterInput | MilkRequestCreateOrConnectWithoutRequesterInput[]
    createMany?: MilkRequestCreateManyRequesterInputEnvelope
    connect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
  }

  export type MilkRequestUncheckedCreateNestedManyWithoutDonorInput = {
    create?: XOR<MilkRequestCreateWithoutDonorInput, MilkRequestUncheckedCreateWithoutDonorInput> | MilkRequestCreateWithoutDonorInput[] | MilkRequestUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: MilkRequestCreateOrConnectWithoutDonorInput | MilkRequestCreateOrConnectWithoutDonorInput[]
    createMany?: MilkRequestCreateManyDonorInputEnvelope
    connect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
  }

  export type RequestNotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RequestNotificationCreateWithoutUserInput, RequestNotificationUncheckedCreateWithoutUserInput> | RequestNotificationCreateWithoutUserInput[] | RequestNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestNotificationCreateOrConnectWithoutUserInput | RequestNotificationCreateOrConnectWithoutUserInput[]
    createMany?: RequestNotificationCreateManyUserInputEnvelope
    connect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: $Enums.UserType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BabyUpdateManyWithoutUserNestedInput = {
    create?: XOR<BabyCreateWithoutUserInput, BabyUncheckedCreateWithoutUserInput> | BabyCreateWithoutUserInput[] | BabyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BabyCreateOrConnectWithoutUserInput | BabyCreateOrConnectWithoutUserInput[]
    upsert?: BabyUpsertWithWhereUniqueWithoutUserInput | BabyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BabyCreateManyUserInputEnvelope
    set?: BabyWhereUniqueInput | BabyWhereUniqueInput[]
    disconnect?: BabyWhereUniqueInput | BabyWhereUniqueInput[]
    delete?: BabyWhereUniqueInput | BabyWhereUniqueInput[]
    connect?: BabyWhereUniqueInput | BabyWhereUniqueInput[]
    update?: BabyUpdateWithWhereUniqueWithoutUserInput | BabyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BabyUpdateManyWithWhereWithoutUserInput | BabyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BabyScalarWhereInput | BabyScalarWhereInput[]
  }

  export type OtpVerificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<OtpVerificationCreateWithoutUserInput, OtpVerificationUncheckedCreateWithoutUserInput> | OtpVerificationCreateWithoutUserInput[] | OtpVerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpVerificationCreateOrConnectWithoutUserInput | OtpVerificationCreateOrConnectWithoutUserInput[]
    upsert?: OtpVerificationUpsertWithWhereUniqueWithoutUserInput | OtpVerificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OtpVerificationCreateManyUserInputEnvelope
    set?: OtpVerificationWhereUniqueInput | OtpVerificationWhereUniqueInput[]
    disconnect?: OtpVerificationWhereUniqueInput | OtpVerificationWhereUniqueInput[]
    delete?: OtpVerificationWhereUniqueInput | OtpVerificationWhereUniqueInput[]
    connect?: OtpVerificationWhereUniqueInput | OtpVerificationWhereUniqueInput[]
    update?: OtpVerificationUpdateWithWhereUniqueWithoutUserInput | OtpVerificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OtpVerificationUpdateManyWithWhereWithoutUserInput | OtpVerificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OtpVerificationScalarWhereInput | OtpVerificationScalarWhereInput[]
  }

  export type MilkRequestUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<MilkRequestCreateWithoutRequesterInput, MilkRequestUncheckedCreateWithoutRequesterInput> | MilkRequestCreateWithoutRequesterInput[] | MilkRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: MilkRequestCreateOrConnectWithoutRequesterInput | MilkRequestCreateOrConnectWithoutRequesterInput[]
    upsert?: MilkRequestUpsertWithWhereUniqueWithoutRequesterInput | MilkRequestUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: MilkRequestCreateManyRequesterInputEnvelope
    set?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    disconnect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    delete?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    connect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    update?: MilkRequestUpdateWithWhereUniqueWithoutRequesterInput | MilkRequestUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: MilkRequestUpdateManyWithWhereWithoutRequesterInput | MilkRequestUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: MilkRequestScalarWhereInput | MilkRequestScalarWhereInput[]
  }

  export type MilkRequestUpdateManyWithoutDonorNestedInput = {
    create?: XOR<MilkRequestCreateWithoutDonorInput, MilkRequestUncheckedCreateWithoutDonorInput> | MilkRequestCreateWithoutDonorInput[] | MilkRequestUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: MilkRequestCreateOrConnectWithoutDonorInput | MilkRequestCreateOrConnectWithoutDonorInput[]
    upsert?: MilkRequestUpsertWithWhereUniqueWithoutDonorInput | MilkRequestUpsertWithWhereUniqueWithoutDonorInput[]
    createMany?: MilkRequestCreateManyDonorInputEnvelope
    set?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    disconnect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    delete?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    connect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    update?: MilkRequestUpdateWithWhereUniqueWithoutDonorInput | MilkRequestUpdateWithWhereUniqueWithoutDonorInput[]
    updateMany?: MilkRequestUpdateManyWithWhereWithoutDonorInput | MilkRequestUpdateManyWithWhereWithoutDonorInput[]
    deleteMany?: MilkRequestScalarWhereInput | MilkRequestScalarWhereInput[]
  }

  export type RequestNotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<RequestNotificationCreateWithoutUserInput, RequestNotificationUncheckedCreateWithoutUserInput> | RequestNotificationCreateWithoutUserInput[] | RequestNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestNotificationCreateOrConnectWithoutUserInput | RequestNotificationCreateOrConnectWithoutUserInput[]
    upsert?: RequestNotificationUpsertWithWhereUniqueWithoutUserInput | RequestNotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RequestNotificationCreateManyUserInputEnvelope
    set?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    disconnect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    delete?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    connect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    update?: RequestNotificationUpdateWithWhereUniqueWithoutUserInput | RequestNotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RequestNotificationUpdateManyWithWhereWithoutUserInput | RequestNotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RequestNotificationScalarWhereInput | RequestNotificationScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BabyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BabyCreateWithoutUserInput, BabyUncheckedCreateWithoutUserInput> | BabyCreateWithoutUserInput[] | BabyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BabyCreateOrConnectWithoutUserInput | BabyCreateOrConnectWithoutUserInput[]
    upsert?: BabyUpsertWithWhereUniqueWithoutUserInput | BabyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BabyCreateManyUserInputEnvelope
    set?: BabyWhereUniqueInput | BabyWhereUniqueInput[]
    disconnect?: BabyWhereUniqueInput | BabyWhereUniqueInput[]
    delete?: BabyWhereUniqueInput | BabyWhereUniqueInput[]
    connect?: BabyWhereUniqueInput | BabyWhereUniqueInput[]
    update?: BabyUpdateWithWhereUniqueWithoutUserInput | BabyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BabyUpdateManyWithWhereWithoutUserInput | BabyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BabyScalarWhereInput | BabyScalarWhereInput[]
  }

  export type OtpVerificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OtpVerificationCreateWithoutUserInput, OtpVerificationUncheckedCreateWithoutUserInput> | OtpVerificationCreateWithoutUserInput[] | OtpVerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OtpVerificationCreateOrConnectWithoutUserInput | OtpVerificationCreateOrConnectWithoutUserInput[]
    upsert?: OtpVerificationUpsertWithWhereUniqueWithoutUserInput | OtpVerificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OtpVerificationCreateManyUserInputEnvelope
    set?: OtpVerificationWhereUniqueInput | OtpVerificationWhereUniqueInput[]
    disconnect?: OtpVerificationWhereUniqueInput | OtpVerificationWhereUniqueInput[]
    delete?: OtpVerificationWhereUniqueInput | OtpVerificationWhereUniqueInput[]
    connect?: OtpVerificationWhereUniqueInput | OtpVerificationWhereUniqueInput[]
    update?: OtpVerificationUpdateWithWhereUniqueWithoutUserInput | OtpVerificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OtpVerificationUpdateManyWithWhereWithoutUserInput | OtpVerificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OtpVerificationScalarWhereInput | OtpVerificationScalarWhereInput[]
  }

  export type MilkRequestUncheckedUpdateManyWithoutRequesterNestedInput = {
    create?: XOR<MilkRequestCreateWithoutRequesterInput, MilkRequestUncheckedCreateWithoutRequesterInput> | MilkRequestCreateWithoutRequesterInput[] | MilkRequestUncheckedCreateWithoutRequesterInput[]
    connectOrCreate?: MilkRequestCreateOrConnectWithoutRequesterInput | MilkRequestCreateOrConnectWithoutRequesterInput[]
    upsert?: MilkRequestUpsertWithWhereUniqueWithoutRequesterInput | MilkRequestUpsertWithWhereUniqueWithoutRequesterInput[]
    createMany?: MilkRequestCreateManyRequesterInputEnvelope
    set?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    disconnect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    delete?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    connect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    update?: MilkRequestUpdateWithWhereUniqueWithoutRequesterInput | MilkRequestUpdateWithWhereUniqueWithoutRequesterInput[]
    updateMany?: MilkRequestUpdateManyWithWhereWithoutRequesterInput | MilkRequestUpdateManyWithWhereWithoutRequesterInput[]
    deleteMany?: MilkRequestScalarWhereInput | MilkRequestScalarWhereInput[]
  }

  export type MilkRequestUncheckedUpdateManyWithoutDonorNestedInput = {
    create?: XOR<MilkRequestCreateWithoutDonorInput, MilkRequestUncheckedCreateWithoutDonorInput> | MilkRequestCreateWithoutDonorInput[] | MilkRequestUncheckedCreateWithoutDonorInput[]
    connectOrCreate?: MilkRequestCreateOrConnectWithoutDonorInput | MilkRequestCreateOrConnectWithoutDonorInput[]
    upsert?: MilkRequestUpsertWithWhereUniqueWithoutDonorInput | MilkRequestUpsertWithWhereUniqueWithoutDonorInput[]
    createMany?: MilkRequestCreateManyDonorInputEnvelope
    set?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    disconnect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    delete?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    connect?: MilkRequestWhereUniqueInput | MilkRequestWhereUniqueInput[]
    update?: MilkRequestUpdateWithWhereUniqueWithoutDonorInput | MilkRequestUpdateWithWhereUniqueWithoutDonorInput[]
    updateMany?: MilkRequestUpdateManyWithWhereWithoutDonorInput | MilkRequestUpdateManyWithWhereWithoutDonorInput[]
    deleteMany?: MilkRequestScalarWhereInput | MilkRequestScalarWhereInput[]
  }

  export type RequestNotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RequestNotificationCreateWithoutUserInput, RequestNotificationUncheckedCreateWithoutUserInput> | RequestNotificationCreateWithoutUserInput[] | RequestNotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RequestNotificationCreateOrConnectWithoutUserInput | RequestNotificationCreateOrConnectWithoutUserInput[]
    upsert?: RequestNotificationUpsertWithWhereUniqueWithoutUserInput | RequestNotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RequestNotificationCreateManyUserInputEnvelope
    set?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    disconnect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    delete?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    connect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    update?: RequestNotificationUpdateWithWhereUniqueWithoutUserInput | RequestNotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RequestNotificationUpdateManyWithWhereWithoutUserInput | RequestNotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RequestNotificationScalarWhereInput | RequestNotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBabiesInput = {
    create?: XOR<UserCreateWithoutBabiesInput, UserUncheckedCreateWithoutBabiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBabiesInput
    connect?: UserWhereUniqueInput
  }

  export type FeedLogCreateNestedManyWithoutBabyInput = {
    create?: XOR<FeedLogCreateWithoutBabyInput, FeedLogUncheckedCreateWithoutBabyInput> | FeedLogCreateWithoutBabyInput[] | FeedLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: FeedLogCreateOrConnectWithoutBabyInput | FeedLogCreateOrConnectWithoutBabyInput[]
    createMany?: FeedLogCreateManyBabyInputEnvelope
    connect?: FeedLogWhereUniqueInput | FeedLogWhereUniqueInput[]
  }

  export type DiaperLogCreateNestedManyWithoutBabyInput = {
    create?: XOR<DiaperLogCreateWithoutBabyInput, DiaperLogUncheckedCreateWithoutBabyInput> | DiaperLogCreateWithoutBabyInput[] | DiaperLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: DiaperLogCreateOrConnectWithoutBabyInput | DiaperLogCreateOrConnectWithoutBabyInput[]
    createMany?: DiaperLogCreateManyBabyInputEnvelope
    connect?: DiaperLogWhereUniqueInput | DiaperLogWhereUniqueInput[]
  }

  export type SleepLogCreateNestedManyWithoutBabyInput = {
    create?: XOR<SleepLogCreateWithoutBabyInput, SleepLogUncheckedCreateWithoutBabyInput> | SleepLogCreateWithoutBabyInput[] | SleepLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: SleepLogCreateOrConnectWithoutBabyInput | SleepLogCreateOrConnectWithoutBabyInput[]
    createMany?: SleepLogCreateManyBabyInputEnvelope
    connect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
  }

  export type FeedLogUncheckedCreateNestedManyWithoutBabyInput = {
    create?: XOR<FeedLogCreateWithoutBabyInput, FeedLogUncheckedCreateWithoutBabyInput> | FeedLogCreateWithoutBabyInput[] | FeedLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: FeedLogCreateOrConnectWithoutBabyInput | FeedLogCreateOrConnectWithoutBabyInput[]
    createMany?: FeedLogCreateManyBabyInputEnvelope
    connect?: FeedLogWhereUniqueInput | FeedLogWhereUniqueInput[]
  }

  export type DiaperLogUncheckedCreateNestedManyWithoutBabyInput = {
    create?: XOR<DiaperLogCreateWithoutBabyInput, DiaperLogUncheckedCreateWithoutBabyInput> | DiaperLogCreateWithoutBabyInput[] | DiaperLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: DiaperLogCreateOrConnectWithoutBabyInput | DiaperLogCreateOrConnectWithoutBabyInput[]
    createMany?: DiaperLogCreateManyBabyInputEnvelope
    connect?: DiaperLogWhereUniqueInput | DiaperLogWhereUniqueInput[]
  }

  export type SleepLogUncheckedCreateNestedManyWithoutBabyInput = {
    create?: XOR<SleepLogCreateWithoutBabyInput, SleepLogUncheckedCreateWithoutBabyInput> | SleepLogCreateWithoutBabyInput[] | SleepLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: SleepLogCreateOrConnectWithoutBabyInput | SleepLogCreateOrConnectWithoutBabyInput[]
    createMany?: SleepLogCreateManyBabyInputEnvelope
    connect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutBabiesNestedInput = {
    create?: XOR<UserCreateWithoutBabiesInput, UserUncheckedCreateWithoutBabiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBabiesInput
    upsert?: UserUpsertWithoutBabiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBabiesInput, UserUpdateWithoutBabiesInput>, UserUncheckedUpdateWithoutBabiesInput>
  }

  export type FeedLogUpdateManyWithoutBabyNestedInput = {
    create?: XOR<FeedLogCreateWithoutBabyInput, FeedLogUncheckedCreateWithoutBabyInput> | FeedLogCreateWithoutBabyInput[] | FeedLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: FeedLogCreateOrConnectWithoutBabyInput | FeedLogCreateOrConnectWithoutBabyInput[]
    upsert?: FeedLogUpsertWithWhereUniqueWithoutBabyInput | FeedLogUpsertWithWhereUniqueWithoutBabyInput[]
    createMany?: FeedLogCreateManyBabyInputEnvelope
    set?: FeedLogWhereUniqueInput | FeedLogWhereUniqueInput[]
    disconnect?: FeedLogWhereUniqueInput | FeedLogWhereUniqueInput[]
    delete?: FeedLogWhereUniqueInput | FeedLogWhereUniqueInput[]
    connect?: FeedLogWhereUniqueInput | FeedLogWhereUniqueInput[]
    update?: FeedLogUpdateWithWhereUniqueWithoutBabyInput | FeedLogUpdateWithWhereUniqueWithoutBabyInput[]
    updateMany?: FeedLogUpdateManyWithWhereWithoutBabyInput | FeedLogUpdateManyWithWhereWithoutBabyInput[]
    deleteMany?: FeedLogScalarWhereInput | FeedLogScalarWhereInput[]
  }

  export type DiaperLogUpdateManyWithoutBabyNestedInput = {
    create?: XOR<DiaperLogCreateWithoutBabyInput, DiaperLogUncheckedCreateWithoutBabyInput> | DiaperLogCreateWithoutBabyInput[] | DiaperLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: DiaperLogCreateOrConnectWithoutBabyInput | DiaperLogCreateOrConnectWithoutBabyInput[]
    upsert?: DiaperLogUpsertWithWhereUniqueWithoutBabyInput | DiaperLogUpsertWithWhereUniqueWithoutBabyInput[]
    createMany?: DiaperLogCreateManyBabyInputEnvelope
    set?: DiaperLogWhereUniqueInput | DiaperLogWhereUniqueInput[]
    disconnect?: DiaperLogWhereUniqueInput | DiaperLogWhereUniqueInput[]
    delete?: DiaperLogWhereUniqueInput | DiaperLogWhereUniqueInput[]
    connect?: DiaperLogWhereUniqueInput | DiaperLogWhereUniqueInput[]
    update?: DiaperLogUpdateWithWhereUniqueWithoutBabyInput | DiaperLogUpdateWithWhereUniqueWithoutBabyInput[]
    updateMany?: DiaperLogUpdateManyWithWhereWithoutBabyInput | DiaperLogUpdateManyWithWhereWithoutBabyInput[]
    deleteMany?: DiaperLogScalarWhereInput | DiaperLogScalarWhereInput[]
  }

  export type SleepLogUpdateManyWithoutBabyNestedInput = {
    create?: XOR<SleepLogCreateWithoutBabyInput, SleepLogUncheckedCreateWithoutBabyInput> | SleepLogCreateWithoutBabyInput[] | SleepLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: SleepLogCreateOrConnectWithoutBabyInput | SleepLogCreateOrConnectWithoutBabyInput[]
    upsert?: SleepLogUpsertWithWhereUniqueWithoutBabyInput | SleepLogUpsertWithWhereUniqueWithoutBabyInput[]
    createMany?: SleepLogCreateManyBabyInputEnvelope
    set?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    disconnect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    delete?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    connect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    update?: SleepLogUpdateWithWhereUniqueWithoutBabyInput | SleepLogUpdateWithWhereUniqueWithoutBabyInput[]
    updateMany?: SleepLogUpdateManyWithWhereWithoutBabyInput | SleepLogUpdateManyWithWhereWithoutBabyInput[]
    deleteMany?: SleepLogScalarWhereInput | SleepLogScalarWhereInput[]
  }

  export type FeedLogUncheckedUpdateManyWithoutBabyNestedInput = {
    create?: XOR<FeedLogCreateWithoutBabyInput, FeedLogUncheckedCreateWithoutBabyInput> | FeedLogCreateWithoutBabyInput[] | FeedLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: FeedLogCreateOrConnectWithoutBabyInput | FeedLogCreateOrConnectWithoutBabyInput[]
    upsert?: FeedLogUpsertWithWhereUniqueWithoutBabyInput | FeedLogUpsertWithWhereUniqueWithoutBabyInput[]
    createMany?: FeedLogCreateManyBabyInputEnvelope
    set?: FeedLogWhereUniqueInput | FeedLogWhereUniqueInput[]
    disconnect?: FeedLogWhereUniqueInput | FeedLogWhereUniqueInput[]
    delete?: FeedLogWhereUniqueInput | FeedLogWhereUniqueInput[]
    connect?: FeedLogWhereUniqueInput | FeedLogWhereUniqueInput[]
    update?: FeedLogUpdateWithWhereUniqueWithoutBabyInput | FeedLogUpdateWithWhereUniqueWithoutBabyInput[]
    updateMany?: FeedLogUpdateManyWithWhereWithoutBabyInput | FeedLogUpdateManyWithWhereWithoutBabyInput[]
    deleteMany?: FeedLogScalarWhereInput | FeedLogScalarWhereInput[]
  }

  export type DiaperLogUncheckedUpdateManyWithoutBabyNestedInput = {
    create?: XOR<DiaperLogCreateWithoutBabyInput, DiaperLogUncheckedCreateWithoutBabyInput> | DiaperLogCreateWithoutBabyInput[] | DiaperLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: DiaperLogCreateOrConnectWithoutBabyInput | DiaperLogCreateOrConnectWithoutBabyInput[]
    upsert?: DiaperLogUpsertWithWhereUniqueWithoutBabyInput | DiaperLogUpsertWithWhereUniqueWithoutBabyInput[]
    createMany?: DiaperLogCreateManyBabyInputEnvelope
    set?: DiaperLogWhereUniqueInput | DiaperLogWhereUniqueInput[]
    disconnect?: DiaperLogWhereUniqueInput | DiaperLogWhereUniqueInput[]
    delete?: DiaperLogWhereUniqueInput | DiaperLogWhereUniqueInput[]
    connect?: DiaperLogWhereUniqueInput | DiaperLogWhereUniqueInput[]
    update?: DiaperLogUpdateWithWhereUniqueWithoutBabyInput | DiaperLogUpdateWithWhereUniqueWithoutBabyInput[]
    updateMany?: DiaperLogUpdateManyWithWhereWithoutBabyInput | DiaperLogUpdateManyWithWhereWithoutBabyInput[]
    deleteMany?: DiaperLogScalarWhereInput | DiaperLogScalarWhereInput[]
  }

  export type SleepLogUncheckedUpdateManyWithoutBabyNestedInput = {
    create?: XOR<SleepLogCreateWithoutBabyInput, SleepLogUncheckedCreateWithoutBabyInput> | SleepLogCreateWithoutBabyInput[] | SleepLogUncheckedCreateWithoutBabyInput[]
    connectOrCreate?: SleepLogCreateOrConnectWithoutBabyInput | SleepLogCreateOrConnectWithoutBabyInput[]
    upsert?: SleepLogUpsertWithWhereUniqueWithoutBabyInput | SleepLogUpsertWithWhereUniqueWithoutBabyInput[]
    createMany?: SleepLogCreateManyBabyInputEnvelope
    set?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    disconnect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    delete?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    connect?: SleepLogWhereUniqueInput | SleepLogWhereUniqueInput[]
    update?: SleepLogUpdateWithWhereUniqueWithoutBabyInput | SleepLogUpdateWithWhereUniqueWithoutBabyInput[]
    updateMany?: SleepLogUpdateManyWithWhereWithoutBabyInput | SleepLogUpdateManyWithWhereWithoutBabyInput[]
    deleteMany?: SleepLogScalarWhereInput | SleepLogScalarWhereInput[]
  }

  export type BabyCreateNestedOneWithoutFeedLogsInput = {
    create?: XOR<BabyCreateWithoutFeedLogsInput, BabyUncheckedCreateWithoutFeedLogsInput>
    connectOrCreate?: BabyCreateOrConnectWithoutFeedLogsInput
    connect?: BabyWhereUniqueInput
  }

  export type EnumFeedTypeFieldUpdateOperationsInput = {
    set?: $Enums.FeedType
  }

  export type NullableEnumPositionFieldUpdateOperationsInput = {
    set?: $Enums.Position | null
  }

  export type BabyUpdateOneRequiredWithoutFeedLogsNestedInput = {
    create?: XOR<BabyCreateWithoutFeedLogsInput, BabyUncheckedCreateWithoutFeedLogsInput>
    connectOrCreate?: BabyCreateOrConnectWithoutFeedLogsInput
    upsert?: BabyUpsertWithoutFeedLogsInput
    connect?: BabyWhereUniqueInput
    update?: XOR<XOR<BabyUpdateToOneWithWhereWithoutFeedLogsInput, BabyUpdateWithoutFeedLogsInput>, BabyUncheckedUpdateWithoutFeedLogsInput>
  }

  export type BabyCreateNestedOneWithoutDiaperLogsInput = {
    create?: XOR<BabyCreateWithoutDiaperLogsInput, BabyUncheckedCreateWithoutDiaperLogsInput>
    connectOrCreate?: BabyCreateOrConnectWithoutDiaperLogsInput
    connect?: BabyWhereUniqueInput
  }

  export type EnumDiaperTypeFieldUpdateOperationsInput = {
    set?: $Enums.DiaperType
  }

  export type BabyUpdateOneRequiredWithoutDiaperLogsNestedInput = {
    create?: XOR<BabyCreateWithoutDiaperLogsInput, BabyUncheckedCreateWithoutDiaperLogsInput>
    connectOrCreate?: BabyCreateOrConnectWithoutDiaperLogsInput
    upsert?: BabyUpsertWithoutDiaperLogsInput
    connect?: BabyWhereUniqueInput
    update?: XOR<XOR<BabyUpdateToOneWithWhereWithoutDiaperLogsInput, BabyUpdateWithoutDiaperLogsInput>, BabyUncheckedUpdateWithoutDiaperLogsInput>
  }

  export type BabyCreateNestedOneWithoutSleepLogsInput = {
    create?: XOR<BabyCreateWithoutSleepLogsInput, BabyUncheckedCreateWithoutSleepLogsInput>
    connectOrCreate?: BabyCreateOrConnectWithoutSleepLogsInput
    connect?: BabyWhereUniqueInput
  }

  export type EnumSleepLocationFieldUpdateOperationsInput = {
    set?: $Enums.SleepLocation
  }

  export type BabyUpdateOneRequiredWithoutSleepLogsNestedInput = {
    create?: XOR<BabyCreateWithoutSleepLogsInput, BabyUncheckedCreateWithoutSleepLogsInput>
    connectOrCreate?: BabyCreateOrConnectWithoutSleepLogsInput
    upsert?: BabyUpsertWithoutSleepLogsInput
    connect?: BabyWhereUniqueInput
    update?: XOR<XOR<BabyUpdateToOneWithWhereWithoutSleepLogsInput, BabyUpdateWithoutSleepLogsInput>, BabyUncheckedUpdateWithoutSleepLogsInput>
  }

  export type UserCreateNestedOneWithoutOtpVerificationsInput = {
    create?: XOR<UserCreateWithoutOtpVerificationsInput, UserUncheckedCreateWithoutOtpVerificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpVerificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutOtpVerificationsNestedInput = {
    create?: XOR<UserCreateWithoutOtpVerificationsInput, UserUncheckedCreateWithoutOtpVerificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpVerificationsInput
    upsert?: UserUpsertWithoutOtpVerificationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOtpVerificationsInput, UserUpdateWithoutOtpVerificationsInput>, UserUncheckedUpdateWithoutOtpVerificationsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutSentRequestsInput = {
    create?: XOR<UserCreateWithoutSentRequestsInput, UserUncheckedCreateWithoutSentRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedRequestsInput = {
    create?: XOR<UserCreateWithoutReceivedRequestsInput, UserUncheckedCreateWithoutReceivedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type RequestNotificationCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestNotificationCreateWithoutRequestInput, RequestNotificationUncheckedCreateWithoutRequestInput> | RequestNotificationCreateWithoutRequestInput[] | RequestNotificationUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestNotificationCreateOrConnectWithoutRequestInput | RequestNotificationCreateOrConnectWithoutRequestInput[]
    createMany?: RequestNotificationCreateManyRequestInputEnvelope
    connect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
  }

  export type RequestNotificationUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<RequestNotificationCreateWithoutRequestInput, RequestNotificationUncheckedCreateWithoutRequestInput> | RequestNotificationCreateWithoutRequestInput[] | RequestNotificationUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestNotificationCreateOrConnectWithoutRequestInput | RequestNotificationCreateOrConnectWithoutRequestInput[]
    createMany?: RequestNotificationCreateManyRequestInputEnvelope
    connect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
  }

  export type EnumRequestTypeFieldUpdateOperationsInput = {
    set?: $Enums.RequestType
  }

  export type EnumRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.RequestStatus
  }

  export type UserUpdateOneRequiredWithoutSentRequestsNestedInput = {
    create?: XOR<UserCreateWithoutSentRequestsInput, UserUncheckedCreateWithoutSentRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentRequestsInput
    upsert?: UserUpsertWithoutSentRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentRequestsInput, UserUpdateWithoutSentRequestsInput>, UserUncheckedUpdateWithoutSentRequestsInput>
  }

  export type UserUpdateOneWithoutReceivedRequestsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedRequestsInput, UserUncheckedCreateWithoutReceivedRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedRequestsInput
    upsert?: UserUpsertWithoutReceivedRequestsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedRequestsInput, UserUpdateWithoutReceivedRequestsInput>, UserUncheckedUpdateWithoutReceivedRequestsInput>
  }

  export type RequestNotificationUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestNotificationCreateWithoutRequestInput, RequestNotificationUncheckedCreateWithoutRequestInput> | RequestNotificationCreateWithoutRequestInput[] | RequestNotificationUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestNotificationCreateOrConnectWithoutRequestInput | RequestNotificationCreateOrConnectWithoutRequestInput[]
    upsert?: RequestNotificationUpsertWithWhereUniqueWithoutRequestInput | RequestNotificationUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestNotificationCreateManyRequestInputEnvelope
    set?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    disconnect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    delete?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    connect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    update?: RequestNotificationUpdateWithWhereUniqueWithoutRequestInput | RequestNotificationUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestNotificationUpdateManyWithWhereWithoutRequestInput | RequestNotificationUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestNotificationScalarWhereInput | RequestNotificationScalarWhereInput[]
  }

  export type RequestNotificationUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<RequestNotificationCreateWithoutRequestInput, RequestNotificationUncheckedCreateWithoutRequestInput> | RequestNotificationCreateWithoutRequestInput[] | RequestNotificationUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: RequestNotificationCreateOrConnectWithoutRequestInput | RequestNotificationCreateOrConnectWithoutRequestInput[]
    upsert?: RequestNotificationUpsertWithWhereUniqueWithoutRequestInput | RequestNotificationUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: RequestNotificationCreateManyRequestInputEnvelope
    set?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    disconnect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    delete?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    connect?: RequestNotificationWhereUniqueInput | RequestNotificationWhereUniqueInput[]
    update?: RequestNotificationUpdateWithWhereUniqueWithoutRequestInput | RequestNotificationUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: RequestNotificationUpdateManyWithWhereWithoutRequestInput | RequestNotificationUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: RequestNotificationScalarWhereInput | RequestNotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type MilkRequestCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<MilkRequestCreateWithoutNotificationsInput, MilkRequestUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: MilkRequestCreateOrConnectWithoutNotificationsInput
    connect?: MilkRequestWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type MilkRequestUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<MilkRequestCreateWithoutNotificationsInput, MilkRequestUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: MilkRequestCreateOrConnectWithoutNotificationsInput
    upsert?: MilkRequestUpsertWithoutNotificationsInput
    disconnect?: MilkRequestWhereInput | boolean
    delete?: MilkRequestWhereInput | boolean
    connect?: MilkRequestWhereUniqueInput
    update?: XOR<XOR<MilkRequestUpdateToOneWithWhereWithoutNotificationsInput, MilkRequestUpdateWithoutNotificationsInput>, MilkRequestUncheckedUpdateWithoutNotificationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[]
    notIn?: $Enums.UserType[]
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumFeedTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedType | EnumFeedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedType[]
    notIn?: $Enums.FeedType[]
    not?: NestedEnumFeedTypeFilter<$PrismaModel> | $Enums.FeedType
  }

  export type NestedEnumPositionNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Position | EnumPositionFieldRefInput<$PrismaModel> | null
    in?: $Enums.Position[] | null
    notIn?: $Enums.Position[] | null
    not?: NestedEnumPositionNullableFilter<$PrismaModel> | $Enums.Position | null
  }

  export type NestedEnumFeedTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FeedType | EnumFeedTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FeedType[]
    notIn?: $Enums.FeedType[]
    not?: NestedEnumFeedTypeWithAggregatesFilter<$PrismaModel> | $Enums.FeedType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFeedTypeFilter<$PrismaModel>
    _max?: NestedEnumFeedTypeFilter<$PrismaModel>
  }

  export type NestedEnumPositionNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Position | EnumPositionFieldRefInput<$PrismaModel> | null
    in?: $Enums.Position[] | null
    notIn?: $Enums.Position[] | null
    not?: NestedEnumPositionNullableWithAggregatesFilter<$PrismaModel> | $Enums.Position | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPositionNullableFilter<$PrismaModel>
    _max?: NestedEnumPositionNullableFilter<$PrismaModel>
  }

  export type NestedEnumDiaperTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DiaperType | EnumDiaperTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DiaperType[]
    notIn?: $Enums.DiaperType[]
    not?: NestedEnumDiaperTypeFilter<$PrismaModel> | $Enums.DiaperType
  }

  export type NestedEnumDiaperTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DiaperType | EnumDiaperTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DiaperType[]
    notIn?: $Enums.DiaperType[]
    not?: NestedEnumDiaperTypeWithAggregatesFilter<$PrismaModel> | $Enums.DiaperType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDiaperTypeFilter<$PrismaModel>
    _max?: NestedEnumDiaperTypeFilter<$PrismaModel>
  }

  export type NestedEnumSleepLocationFilter<$PrismaModel = never> = {
    equals?: $Enums.SleepLocation | EnumSleepLocationFieldRefInput<$PrismaModel>
    in?: $Enums.SleepLocation[]
    notIn?: $Enums.SleepLocation[]
    not?: NestedEnumSleepLocationFilter<$PrismaModel> | $Enums.SleepLocation
  }

  export type NestedEnumSleepLocationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SleepLocation | EnumSleepLocationFieldRefInput<$PrismaModel>
    in?: $Enums.SleepLocation[]
    notIn?: $Enums.SleepLocation[]
    not?: NestedEnumSleepLocationWithAggregatesFilter<$PrismaModel> | $Enums.SleepLocation
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSleepLocationFilter<$PrismaModel>
    _max?: NestedEnumSleepLocationFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumRequestTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestType | EnumRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RequestType[]
    notIn?: $Enums.RequestType[]
    not?: NestedEnumRequestTypeFilter<$PrismaModel> | $Enums.RequestType
  }

  export type NestedEnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[]
    notIn?: $Enums.RequestStatus[]
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type NestedEnumRequestTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestType | EnumRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RequestType[]
    notIn?: $Enums.RequestType[]
    not?: NestedEnumRequestTypeWithAggregatesFilter<$PrismaModel> | $Enums.RequestType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestTypeFilter<$PrismaModel>
    _max?: NestedEnumRequestTypeFilter<$PrismaModel>
  }

  export type NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[]
    notIn?: $Enums.RequestStatus[]
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type BabyCreateWithoutUserInput = {
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    feedLogs?: FeedLogCreateNestedManyWithoutBabyInput
    diaperLogs?: DiaperLogCreateNestedManyWithoutBabyInput
    sleepLogs?: SleepLogCreateNestedManyWithoutBabyInput
  }

  export type BabyUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    feedLogs?: FeedLogUncheckedCreateNestedManyWithoutBabyInput
    diaperLogs?: DiaperLogUncheckedCreateNestedManyWithoutBabyInput
    sleepLogs?: SleepLogUncheckedCreateNestedManyWithoutBabyInput
  }

  export type BabyCreateOrConnectWithoutUserInput = {
    where: BabyWhereUniqueInput
    create: XOR<BabyCreateWithoutUserInput, BabyUncheckedCreateWithoutUserInput>
  }

  export type BabyCreateManyUserInputEnvelope = {
    data: BabyCreateManyUserInput | BabyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OtpVerificationCreateWithoutUserInput = {
    email: string
    otp: string
    expiresAt: Date | string
    isUsed?: boolean
    attempts?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OtpVerificationUncheckedCreateWithoutUserInput = {
    id?: number
    email: string
    otp: string
    expiresAt: Date | string
    isUsed?: boolean
    attempts?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OtpVerificationCreateOrConnectWithoutUserInput = {
    where: OtpVerificationWhereUniqueInput
    create: XOR<OtpVerificationCreateWithoutUserInput, OtpVerificationUncheckedCreateWithoutUserInput>
  }

  export type OtpVerificationCreateManyUserInputEnvelope = {
    data: OtpVerificationCreateManyUserInput | OtpVerificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MilkRequestCreateWithoutRequesterInput = {
    requestType?: $Enums.RequestType
    status?: $Enums.RequestStatus
    title: string
    description?: string | null
    quantity?: number | null
    urgency?: string | null
    requesterZipcode: string
    donorZipcode?: string | null
    distance?: number | null
    neededBy?: Date | string | null
    acceptedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    donor?: UserCreateNestedOneWithoutReceivedRequestsInput
    notifications?: RequestNotificationCreateNestedManyWithoutRequestInput
  }

  export type MilkRequestUncheckedCreateWithoutRequesterInput = {
    id?: number
    requestType?: $Enums.RequestType
    status?: $Enums.RequestStatus
    title: string
    description?: string | null
    quantity?: number | null
    urgency?: string | null
    donorId?: number | null
    requesterZipcode: string
    donorZipcode?: string | null
    distance?: number | null
    neededBy?: Date | string | null
    acceptedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: RequestNotificationUncheckedCreateNestedManyWithoutRequestInput
  }

  export type MilkRequestCreateOrConnectWithoutRequesterInput = {
    where: MilkRequestWhereUniqueInput
    create: XOR<MilkRequestCreateWithoutRequesterInput, MilkRequestUncheckedCreateWithoutRequesterInput>
  }

  export type MilkRequestCreateManyRequesterInputEnvelope = {
    data: MilkRequestCreateManyRequesterInput | MilkRequestCreateManyRequesterInput[]
    skipDuplicates?: boolean
  }

  export type MilkRequestCreateWithoutDonorInput = {
    requestType?: $Enums.RequestType
    status?: $Enums.RequestStatus
    title: string
    description?: string | null
    quantity?: number | null
    urgency?: string | null
    requesterZipcode: string
    donorZipcode?: string | null
    distance?: number | null
    neededBy?: Date | string | null
    acceptedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutSentRequestsInput
    notifications?: RequestNotificationCreateNestedManyWithoutRequestInput
  }

  export type MilkRequestUncheckedCreateWithoutDonorInput = {
    id?: number
    requestType?: $Enums.RequestType
    status?: $Enums.RequestStatus
    title: string
    description?: string | null
    quantity?: number | null
    urgency?: string | null
    requesterId: number
    requesterZipcode: string
    donorZipcode?: string | null
    distance?: number | null
    neededBy?: Date | string | null
    acceptedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: RequestNotificationUncheckedCreateNestedManyWithoutRequestInput
  }

  export type MilkRequestCreateOrConnectWithoutDonorInput = {
    where: MilkRequestWhereUniqueInput
    create: XOR<MilkRequestCreateWithoutDonorInput, MilkRequestUncheckedCreateWithoutDonorInput>
  }

  export type MilkRequestCreateManyDonorInputEnvelope = {
    data: MilkRequestCreateManyDonorInput | MilkRequestCreateManyDonorInput[]
    skipDuplicates?: boolean
  }

  export type RequestNotificationCreateWithoutUserInput = {
    title: string
    message: string
    type: string
    isRead?: boolean
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    request?: MilkRequestCreateNestedOneWithoutNotificationsInput
  }

  export type RequestNotificationUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    message: string
    type: string
    requestId?: number | null
    isRead?: boolean
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestNotificationCreateOrConnectWithoutUserInput = {
    where: RequestNotificationWhereUniqueInput
    create: XOR<RequestNotificationCreateWithoutUserInput, RequestNotificationUncheckedCreateWithoutUserInput>
  }

  export type RequestNotificationCreateManyUserInputEnvelope = {
    data: RequestNotificationCreateManyUserInput | RequestNotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BabyUpsertWithWhereUniqueWithoutUserInput = {
    where: BabyWhereUniqueInput
    update: XOR<BabyUpdateWithoutUserInput, BabyUncheckedUpdateWithoutUserInput>
    create: XOR<BabyCreateWithoutUserInput, BabyUncheckedCreateWithoutUserInput>
  }

  export type BabyUpdateWithWhereUniqueWithoutUserInput = {
    where: BabyWhereUniqueInput
    data: XOR<BabyUpdateWithoutUserInput, BabyUncheckedUpdateWithoutUserInput>
  }

  export type BabyUpdateManyWithWhereWithoutUserInput = {
    where: BabyScalarWhereInput
    data: XOR<BabyUpdateManyMutationInput, BabyUncheckedUpdateManyWithoutUserInput>
  }

  export type BabyScalarWhereInput = {
    AND?: BabyScalarWhereInput | BabyScalarWhereInput[]
    OR?: BabyScalarWhereInput[]
    NOT?: BabyScalarWhereInput | BabyScalarWhereInput[]
    id?: IntFilter<"Baby"> | number
    name?: StringFilter<"Baby"> | string
    gender?: EnumGenderFilter<"Baby"> | $Enums.Gender
    deliveryDate?: DateTimeFilter<"Baby"> | Date | string
    bloodGroup?: StringNullableFilter<"Baby"> | string | null
    weight?: FloatNullableFilter<"Baby"> | number | null
    height?: FloatNullableFilter<"Baby"> | number | null
    userId?: IntFilter<"Baby"> | number
    createdAt?: DateTimeFilter<"Baby"> | Date | string
    updatedAt?: DateTimeFilter<"Baby"> | Date | string
  }

  export type OtpVerificationUpsertWithWhereUniqueWithoutUserInput = {
    where: OtpVerificationWhereUniqueInput
    update: XOR<OtpVerificationUpdateWithoutUserInput, OtpVerificationUncheckedUpdateWithoutUserInput>
    create: XOR<OtpVerificationCreateWithoutUserInput, OtpVerificationUncheckedCreateWithoutUserInput>
  }

  export type OtpVerificationUpdateWithWhereUniqueWithoutUserInput = {
    where: OtpVerificationWhereUniqueInput
    data: XOR<OtpVerificationUpdateWithoutUserInput, OtpVerificationUncheckedUpdateWithoutUserInput>
  }

  export type OtpVerificationUpdateManyWithWhereWithoutUserInput = {
    where: OtpVerificationScalarWhereInput
    data: XOR<OtpVerificationUpdateManyMutationInput, OtpVerificationUncheckedUpdateManyWithoutUserInput>
  }

  export type OtpVerificationScalarWhereInput = {
    AND?: OtpVerificationScalarWhereInput | OtpVerificationScalarWhereInput[]
    OR?: OtpVerificationScalarWhereInput[]
    NOT?: OtpVerificationScalarWhereInput | OtpVerificationScalarWhereInput[]
    id?: IntFilter<"OtpVerification"> | number
    email?: StringFilter<"OtpVerification"> | string
    otp?: StringFilter<"OtpVerification"> | string
    expiresAt?: DateTimeFilter<"OtpVerification"> | Date | string
    isUsed?: BoolFilter<"OtpVerification"> | boolean
    attempts?: IntFilter<"OtpVerification"> | number
    userId?: IntNullableFilter<"OtpVerification"> | number | null
    createdAt?: DateTimeFilter<"OtpVerification"> | Date | string
    updatedAt?: DateTimeFilter<"OtpVerification"> | Date | string
  }

  export type MilkRequestUpsertWithWhereUniqueWithoutRequesterInput = {
    where: MilkRequestWhereUniqueInput
    update: XOR<MilkRequestUpdateWithoutRequesterInput, MilkRequestUncheckedUpdateWithoutRequesterInput>
    create: XOR<MilkRequestCreateWithoutRequesterInput, MilkRequestUncheckedCreateWithoutRequesterInput>
  }

  export type MilkRequestUpdateWithWhereUniqueWithoutRequesterInput = {
    where: MilkRequestWhereUniqueInput
    data: XOR<MilkRequestUpdateWithoutRequesterInput, MilkRequestUncheckedUpdateWithoutRequesterInput>
  }

  export type MilkRequestUpdateManyWithWhereWithoutRequesterInput = {
    where: MilkRequestScalarWhereInput
    data: XOR<MilkRequestUpdateManyMutationInput, MilkRequestUncheckedUpdateManyWithoutRequesterInput>
  }

  export type MilkRequestScalarWhereInput = {
    AND?: MilkRequestScalarWhereInput | MilkRequestScalarWhereInput[]
    OR?: MilkRequestScalarWhereInput[]
    NOT?: MilkRequestScalarWhereInput | MilkRequestScalarWhereInput[]
    id?: IntFilter<"MilkRequest"> | number
    requestType?: EnumRequestTypeFilter<"MilkRequest"> | $Enums.RequestType
    status?: EnumRequestStatusFilter<"MilkRequest"> | $Enums.RequestStatus
    title?: StringFilter<"MilkRequest"> | string
    description?: StringNullableFilter<"MilkRequest"> | string | null
    quantity?: FloatNullableFilter<"MilkRequest"> | number | null
    urgency?: StringNullableFilter<"MilkRequest"> | string | null
    requesterId?: IntFilter<"MilkRequest"> | number
    donorId?: IntNullableFilter<"MilkRequest"> | number | null
    requesterZipcode?: StringFilter<"MilkRequest"> | string
    donorZipcode?: StringNullableFilter<"MilkRequest"> | string | null
    distance?: FloatNullableFilter<"MilkRequest"> | number | null
    neededBy?: DateTimeNullableFilter<"MilkRequest"> | Date | string | null
    acceptedAt?: DateTimeNullableFilter<"MilkRequest"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"MilkRequest"> | Date | string | null
    notes?: StringNullableFilter<"MilkRequest"> | string | null
    createdAt?: DateTimeFilter<"MilkRequest"> | Date | string
    updatedAt?: DateTimeFilter<"MilkRequest"> | Date | string
  }

  export type MilkRequestUpsertWithWhereUniqueWithoutDonorInput = {
    where: MilkRequestWhereUniqueInput
    update: XOR<MilkRequestUpdateWithoutDonorInput, MilkRequestUncheckedUpdateWithoutDonorInput>
    create: XOR<MilkRequestCreateWithoutDonorInput, MilkRequestUncheckedCreateWithoutDonorInput>
  }

  export type MilkRequestUpdateWithWhereUniqueWithoutDonorInput = {
    where: MilkRequestWhereUniqueInput
    data: XOR<MilkRequestUpdateWithoutDonorInput, MilkRequestUncheckedUpdateWithoutDonorInput>
  }

  export type MilkRequestUpdateManyWithWhereWithoutDonorInput = {
    where: MilkRequestScalarWhereInput
    data: XOR<MilkRequestUpdateManyMutationInput, MilkRequestUncheckedUpdateManyWithoutDonorInput>
  }

  export type RequestNotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: RequestNotificationWhereUniqueInput
    update: XOR<RequestNotificationUpdateWithoutUserInput, RequestNotificationUncheckedUpdateWithoutUserInput>
    create: XOR<RequestNotificationCreateWithoutUserInput, RequestNotificationUncheckedCreateWithoutUserInput>
  }

  export type RequestNotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: RequestNotificationWhereUniqueInput
    data: XOR<RequestNotificationUpdateWithoutUserInput, RequestNotificationUncheckedUpdateWithoutUserInput>
  }

  export type RequestNotificationUpdateManyWithWhereWithoutUserInput = {
    where: RequestNotificationScalarWhereInput
    data: XOR<RequestNotificationUpdateManyMutationInput, RequestNotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type RequestNotificationScalarWhereInput = {
    AND?: RequestNotificationScalarWhereInput | RequestNotificationScalarWhereInput[]
    OR?: RequestNotificationScalarWhereInput[]
    NOT?: RequestNotificationScalarWhereInput | RequestNotificationScalarWhereInput[]
    id?: IntFilter<"RequestNotification"> | number
    title?: StringFilter<"RequestNotification"> | string
    message?: StringFilter<"RequestNotification"> | string
    type?: StringFilter<"RequestNotification"> | string
    userId?: IntFilter<"RequestNotification"> | number
    requestId?: IntNullableFilter<"RequestNotification"> | number | null
    isRead?: BoolFilter<"RequestNotification"> | boolean
    sentAt?: DateTimeFilter<"RequestNotification"> | Date | string
    createdAt?: DateTimeFilter<"RequestNotification"> | Date | string
    updatedAt?: DateTimeFilter<"RequestNotification"> | Date | string
  }

  export type UserCreateWithoutBabiesInput = {
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otpVerifications?: OtpVerificationCreateNestedManyWithoutUserInput
    sentRequests?: MilkRequestCreateNestedManyWithoutRequesterInput
    receivedRequests?: MilkRequestCreateNestedManyWithoutDonorInput
    notifications?: RequestNotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBabiesInput = {
    id?: number
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    otpVerifications?: OtpVerificationUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: MilkRequestUncheckedCreateNestedManyWithoutRequesterInput
    receivedRequests?: MilkRequestUncheckedCreateNestedManyWithoutDonorInput
    notifications?: RequestNotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBabiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBabiesInput, UserUncheckedCreateWithoutBabiesInput>
  }

  export type FeedLogCreateWithoutBabyInput = {
    feedingDate: Date | string
    startTime: Date | string
    endTime: Date | string
    feedType: $Enums.FeedType
    position?: $Enums.Position | null
    amount?: number | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedLogUncheckedCreateWithoutBabyInput = {
    id?: number
    feedingDate: Date | string
    startTime: Date | string
    endTime: Date | string
    feedType: $Enums.FeedType
    position?: $Enums.Position | null
    amount?: number | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedLogCreateOrConnectWithoutBabyInput = {
    where: FeedLogWhereUniqueInput
    create: XOR<FeedLogCreateWithoutBabyInput, FeedLogUncheckedCreateWithoutBabyInput>
  }

  export type FeedLogCreateManyBabyInputEnvelope = {
    data: FeedLogCreateManyBabyInput | FeedLogCreateManyBabyInput[]
    skipDuplicates?: boolean
  }

  export type DiaperLogCreateWithoutBabyInput = {
    date: Date | string
    time: Date | string
    diaperType: $Enums.DiaperType
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiaperLogUncheckedCreateWithoutBabyInput = {
    id?: number
    date: Date | string
    time: Date | string
    diaperType: $Enums.DiaperType
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiaperLogCreateOrConnectWithoutBabyInput = {
    where: DiaperLogWhereUniqueInput
    create: XOR<DiaperLogCreateWithoutBabyInput, DiaperLogUncheckedCreateWithoutBabyInput>
  }

  export type DiaperLogCreateManyBabyInputEnvelope = {
    data: DiaperLogCreateManyBabyInput | DiaperLogCreateManyBabyInput[]
    skipDuplicates?: boolean
  }

  export type SleepLogCreateWithoutBabyInput = {
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    sleepQuality?: string | null
    location: $Enums.SleepLocation
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SleepLogUncheckedCreateWithoutBabyInput = {
    id?: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    sleepQuality?: string | null
    location: $Enums.SleepLocation
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SleepLogCreateOrConnectWithoutBabyInput = {
    where: SleepLogWhereUniqueInput
    create: XOR<SleepLogCreateWithoutBabyInput, SleepLogUncheckedCreateWithoutBabyInput>
  }

  export type SleepLogCreateManyBabyInputEnvelope = {
    data: SleepLogCreateManyBabyInput | SleepLogCreateManyBabyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBabiesInput = {
    update: XOR<UserUpdateWithoutBabiesInput, UserUncheckedUpdateWithoutBabiesInput>
    create: XOR<UserCreateWithoutBabiesInput, UserUncheckedCreateWithoutBabiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBabiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBabiesInput, UserUncheckedUpdateWithoutBabiesInput>
  }

  export type UserUpdateWithoutBabiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otpVerifications?: OtpVerificationUpdateManyWithoutUserNestedInput
    sentRequests?: MilkRequestUpdateManyWithoutRequesterNestedInput
    receivedRequests?: MilkRequestUpdateManyWithoutDonorNestedInput
    notifications?: RequestNotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBabiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otpVerifications?: OtpVerificationUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: MilkRequestUncheckedUpdateManyWithoutRequesterNestedInput
    receivedRequests?: MilkRequestUncheckedUpdateManyWithoutDonorNestedInput
    notifications?: RequestNotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FeedLogUpsertWithWhereUniqueWithoutBabyInput = {
    where: FeedLogWhereUniqueInput
    update: XOR<FeedLogUpdateWithoutBabyInput, FeedLogUncheckedUpdateWithoutBabyInput>
    create: XOR<FeedLogCreateWithoutBabyInput, FeedLogUncheckedCreateWithoutBabyInput>
  }

  export type FeedLogUpdateWithWhereUniqueWithoutBabyInput = {
    where: FeedLogWhereUniqueInput
    data: XOR<FeedLogUpdateWithoutBabyInput, FeedLogUncheckedUpdateWithoutBabyInput>
  }

  export type FeedLogUpdateManyWithWhereWithoutBabyInput = {
    where: FeedLogScalarWhereInput
    data: XOR<FeedLogUpdateManyMutationInput, FeedLogUncheckedUpdateManyWithoutBabyInput>
  }

  export type FeedLogScalarWhereInput = {
    AND?: FeedLogScalarWhereInput | FeedLogScalarWhereInput[]
    OR?: FeedLogScalarWhereInput[]
    NOT?: FeedLogScalarWhereInput | FeedLogScalarWhereInput[]
    id?: IntFilter<"FeedLog"> | number
    feedingDate?: DateTimeFilter<"FeedLog"> | Date | string
    startTime?: DateTimeFilter<"FeedLog"> | Date | string
    endTime?: DateTimeFilter<"FeedLog"> | Date | string
    feedType?: EnumFeedTypeFilter<"FeedLog"> | $Enums.FeedType
    position?: EnumPositionNullableFilter<"FeedLog"> | $Enums.Position | null
    amount?: FloatNullableFilter<"FeedLog"> | number | null
    note?: StringNullableFilter<"FeedLog"> | string | null
    babyId?: IntFilter<"FeedLog"> | number
    createdAt?: DateTimeFilter<"FeedLog"> | Date | string
    updatedAt?: DateTimeFilter<"FeedLog"> | Date | string
  }

  export type DiaperLogUpsertWithWhereUniqueWithoutBabyInput = {
    where: DiaperLogWhereUniqueInput
    update: XOR<DiaperLogUpdateWithoutBabyInput, DiaperLogUncheckedUpdateWithoutBabyInput>
    create: XOR<DiaperLogCreateWithoutBabyInput, DiaperLogUncheckedCreateWithoutBabyInput>
  }

  export type DiaperLogUpdateWithWhereUniqueWithoutBabyInput = {
    where: DiaperLogWhereUniqueInput
    data: XOR<DiaperLogUpdateWithoutBabyInput, DiaperLogUncheckedUpdateWithoutBabyInput>
  }

  export type DiaperLogUpdateManyWithWhereWithoutBabyInput = {
    where: DiaperLogScalarWhereInput
    data: XOR<DiaperLogUpdateManyMutationInput, DiaperLogUncheckedUpdateManyWithoutBabyInput>
  }

  export type DiaperLogScalarWhereInput = {
    AND?: DiaperLogScalarWhereInput | DiaperLogScalarWhereInput[]
    OR?: DiaperLogScalarWhereInput[]
    NOT?: DiaperLogScalarWhereInput | DiaperLogScalarWhereInput[]
    id?: IntFilter<"DiaperLog"> | number
    date?: DateTimeFilter<"DiaperLog"> | Date | string
    time?: DateTimeFilter<"DiaperLog"> | Date | string
    diaperType?: EnumDiaperTypeFilter<"DiaperLog"> | $Enums.DiaperType
    note?: StringNullableFilter<"DiaperLog"> | string | null
    babyId?: IntFilter<"DiaperLog"> | number
    createdAt?: DateTimeFilter<"DiaperLog"> | Date | string
    updatedAt?: DateTimeFilter<"DiaperLog"> | Date | string
  }

  export type SleepLogUpsertWithWhereUniqueWithoutBabyInput = {
    where: SleepLogWhereUniqueInput
    update: XOR<SleepLogUpdateWithoutBabyInput, SleepLogUncheckedUpdateWithoutBabyInput>
    create: XOR<SleepLogCreateWithoutBabyInput, SleepLogUncheckedCreateWithoutBabyInput>
  }

  export type SleepLogUpdateWithWhereUniqueWithoutBabyInput = {
    where: SleepLogWhereUniqueInput
    data: XOR<SleepLogUpdateWithoutBabyInput, SleepLogUncheckedUpdateWithoutBabyInput>
  }

  export type SleepLogUpdateManyWithWhereWithoutBabyInput = {
    where: SleepLogScalarWhereInput
    data: XOR<SleepLogUpdateManyMutationInput, SleepLogUncheckedUpdateManyWithoutBabyInput>
  }

  export type SleepLogScalarWhereInput = {
    AND?: SleepLogScalarWhereInput | SleepLogScalarWhereInput[]
    OR?: SleepLogScalarWhereInput[]
    NOT?: SleepLogScalarWhereInput | SleepLogScalarWhereInput[]
    id?: IntFilter<"SleepLog"> | number
    date?: DateTimeFilter<"SleepLog"> | Date | string
    startTime?: DateTimeFilter<"SleepLog"> | Date | string
    endTime?: DateTimeFilter<"SleepLog"> | Date | string
    sleepQuality?: StringNullableFilter<"SleepLog"> | string | null
    location?: EnumSleepLocationFilter<"SleepLog"> | $Enums.SleepLocation
    note?: StringNullableFilter<"SleepLog"> | string | null
    babyId?: IntFilter<"SleepLog"> | number
    createdAt?: DateTimeFilter<"SleepLog"> | Date | string
    updatedAt?: DateTimeFilter<"SleepLog"> | Date | string
  }

  export type BabyCreateWithoutFeedLogsInput = {
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBabiesInput
    diaperLogs?: DiaperLogCreateNestedManyWithoutBabyInput
    sleepLogs?: SleepLogCreateNestedManyWithoutBabyInput
  }

  export type BabyUncheckedCreateWithoutFeedLogsInput = {
    id?: number
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    diaperLogs?: DiaperLogUncheckedCreateNestedManyWithoutBabyInput
    sleepLogs?: SleepLogUncheckedCreateNestedManyWithoutBabyInput
  }

  export type BabyCreateOrConnectWithoutFeedLogsInput = {
    where: BabyWhereUniqueInput
    create: XOR<BabyCreateWithoutFeedLogsInput, BabyUncheckedCreateWithoutFeedLogsInput>
  }

  export type BabyUpsertWithoutFeedLogsInput = {
    update: XOR<BabyUpdateWithoutFeedLogsInput, BabyUncheckedUpdateWithoutFeedLogsInput>
    create: XOR<BabyCreateWithoutFeedLogsInput, BabyUncheckedCreateWithoutFeedLogsInput>
    where?: BabyWhereInput
  }

  export type BabyUpdateToOneWithWhereWithoutFeedLogsInput = {
    where?: BabyWhereInput
    data: XOR<BabyUpdateWithoutFeedLogsInput, BabyUncheckedUpdateWithoutFeedLogsInput>
  }

  export type BabyUpdateWithoutFeedLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBabiesNestedInput
    diaperLogs?: DiaperLogUpdateManyWithoutBabyNestedInput
    sleepLogs?: SleepLogUpdateManyWithoutBabyNestedInput
  }

  export type BabyUncheckedUpdateWithoutFeedLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    diaperLogs?: DiaperLogUncheckedUpdateManyWithoutBabyNestedInput
    sleepLogs?: SleepLogUncheckedUpdateManyWithoutBabyNestedInput
  }

  export type BabyCreateWithoutDiaperLogsInput = {
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBabiesInput
    feedLogs?: FeedLogCreateNestedManyWithoutBabyInput
    sleepLogs?: SleepLogCreateNestedManyWithoutBabyInput
  }

  export type BabyUncheckedCreateWithoutDiaperLogsInput = {
    id?: number
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    feedLogs?: FeedLogUncheckedCreateNestedManyWithoutBabyInput
    sleepLogs?: SleepLogUncheckedCreateNestedManyWithoutBabyInput
  }

  export type BabyCreateOrConnectWithoutDiaperLogsInput = {
    where: BabyWhereUniqueInput
    create: XOR<BabyCreateWithoutDiaperLogsInput, BabyUncheckedCreateWithoutDiaperLogsInput>
  }

  export type BabyUpsertWithoutDiaperLogsInput = {
    update: XOR<BabyUpdateWithoutDiaperLogsInput, BabyUncheckedUpdateWithoutDiaperLogsInput>
    create: XOR<BabyCreateWithoutDiaperLogsInput, BabyUncheckedCreateWithoutDiaperLogsInput>
    where?: BabyWhereInput
  }

  export type BabyUpdateToOneWithWhereWithoutDiaperLogsInput = {
    where?: BabyWhereInput
    data: XOR<BabyUpdateWithoutDiaperLogsInput, BabyUncheckedUpdateWithoutDiaperLogsInput>
  }

  export type BabyUpdateWithoutDiaperLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBabiesNestedInput
    feedLogs?: FeedLogUpdateManyWithoutBabyNestedInput
    sleepLogs?: SleepLogUpdateManyWithoutBabyNestedInput
  }

  export type BabyUncheckedUpdateWithoutDiaperLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedLogs?: FeedLogUncheckedUpdateManyWithoutBabyNestedInput
    sleepLogs?: SleepLogUncheckedUpdateManyWithoutBabyNestedInput
  }

  export type BabyCreateWithoutSleepLogsInput = {
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBabiesInput
    feedLogs?: FeedLogCreateNestedManyWithoutBabyInput
    diaperLogs?: DiaperLogCreateNestedManyWithoutBabyInput
  }

  export type BabyUncheckedCreateWithoutSleepLogsInput = {
    id?: number
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    feedLogs?: FeedLogUncheckedCreateNestedManyWithoutBabyInput
    diaperLogs?: DiaperLogUncheckedCreateNestedManyWithoutBabyInput
  }

  export type BabyCreateOrConnectWithoutSleepLogsInput = {
    where: BabyWhereUniqueInput
    create: XOR<BabyCreateWithoutSleepLogsInput, BabyUncheckedCreateWithoutSleepLogsInput>
  }

  export type BabyUpsertWithoutSleepLogsInput = {
    update: XOR<BabyUpdateWithoutSleepLogsInput, BabyUncheckedUpdateWithoutSleepLogsInput>
    create: XOR<BabyCreateWithoutSleepLogsInput, BabyUncheckedCreateWithoutSleepLogsInput>
    where?: BabyWhereInput
  }

  export type BabyUpdateToOneWithWhereWithoutSleepLogsInput = {
    where?: BabyWhereInput
    data: XOR<BabyUpdateWithoutSleepLogsInput, BabyUncheckedUpdateWithoutSleepLogsInput>
  }

  export type BabyUpdateWithoutSleepLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBabiesNestedInput
    feedLogs?: FeedLogUpdateManyWithoutBabyNestedInput
    diaperLogs?: DiaperLogUpdateManyWithoutBabyNestedInput
  }

  export type BabyUncheckedUpdateWithoutSleepLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedLogs?: FeedLogUncheckedUpdateManyWithoutBabyNestedInput
    diaperLogs?: DiaperLogUncheckedUpdateManyWithoutBabyNestedInput
  }

  export type UserCreateWithoutOtpVerificationsInput = {
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    babies?: BabyCreateNestedManyWithoutUserInput
    sentRequests?: MilkRequestCreateNestedManyWithoutRequesterInput
    receivedRequests?: MilkRequestCreateNestedManyWithoutDonorInput
    notifications?: RequestNotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOtpVerificationsInput = {
    id?: number
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    babies?: BabyUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: MilkRequestUncheckedCreateNestedManyWithoutRequesterInput
    receivedRequests?: MilkRequestUncheckedCreateNestedManyWithoutDonorInput
    notifications?: RequestNotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOtpVerificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOtpVerificationsInput, UserUncheckedCreateWithoutOtpVerificationsInput>
  }

  export type UserUpsertWithoutOtpVerificationsInput = {
    update: XOR<UserUpdateWithoutOtpVerificationsInput, UserUncheckedUpdateWithoutOtpVerificationsInput>
    create: XOR<UserCreateWithoutOtpVerificationsInput, UserUncheckedCreateWithoutOtpVerificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOtpVerificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOtpVerificationsInput, UserUncheckedUpdateWithoutOtpVerificationsInput>
  }

  export type UserUpdateWithoutOtpVerificationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    babies?: BabyUpdateManyWithoutUserNestedInput
    sentRequests?: MilkRequestUpdateManyWithoutRequesterNestedInput
    receivedRequests?: MilkRequestUpdateManyWithoutDonorNestedInput
    notifications?: RequestNotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOtpVerificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    babies?: BabyUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: MilkRequestUncheckedUpdateManyWithoutRequesterNestedInput
    receivedRequests?: MilkRequestUncheckedUpdateManyWithoutDonorNestedInput
    notifications?: RequestNotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSentRequestsInput = {
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    babies?: BabyCreateNestedManyWithoutUserInput
    otpVerifications?: OtpVerificationCreateNestedManyWithoutUserInput
    receivedRequests?: MilkRequestCreateNestedManyWithoutDonorInput
    notifications?: RequestNotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentRequestsInput = {
    id?: number
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    babies?: BabyUncheckedCreateNestedManyWithoutUserInput
    otpVerifications?: OtpVerificationUncheckedCreateNestedManyWithoutUserInput
    receivedRequests?: MilkRequestUncheckedCreateNestedManyWithoutDonorInput
    notifications?: RequestNotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentRequestsInput, UserUncheckedCreateWithoutSentRequestsInput>
  }

  export type UserCreateWithoutReceivedRequestsInput = {
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    babies?: BabyCreateNestedManyWithoutUserInput
    otpVerifications?: OtpVerificationCreateNestedManyWithoutUserInput
    sentRequests?: MilkRequestCreateNestedManyWithoutRequesterInput
    notifications?: RequestNotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedRequestsInput = {
    id?: number
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    babies?: BabyUncheckedCreateNestedManyWithoutUserInput
    otpVerifications?: OtpVerificationUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: MilkRequestUncheckedCreateNestedManyWithoutRequesterInput
    notifications?: RequestNotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedRequestsInput, UserUncheckedCreateWithoutReceivedRequestsInput>
  }

  export type RequestNotificationCreateWithoutRequestInput = {
    title: string
    message: string
    type: string
    isRead?: boolean
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type RequestNotificationUncheckedCreateWithoutRequestInput = {
    id?: number
    title: string
    message: string
    type: string
    userId: number
    isRead?: boolean
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestNotificationCreateOrConnectWithoutRequestInput = {
    where: RequestNotificationWhereUniqueInput
    create: XOR<RequestNotificationCreateWithoutRequestInput, RequestNotificationUncheckedCreateWithoutRequestInput>
  }

  export type RequestNotificationCreateManyRequestInputEnvelope = {
    data: RequestNotificationCreateManyRequestInput | RequestNotificationCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSentRequestsInput = {
    update: XOR<UserUpdateWithoutSentRequestsInput, UserUncheckedUpdateWithoutSentRequestsInput>
    create: XOR<UserCreateWithoutSentRequestsInput, UserUncheckedCreateWithoutSentRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentRequestsInput, UserUncheckedUpdateWithoutSentRequestsInput>
  }

  export type UserUpdateWithoutSentRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    babies?: BabyUpdateManyWithoutUserNestedInput
    otpVerifications?: OtpVerificationUpdateManyWithoutUserNestedInput
    receivedRequests?: MilkRequestUpdateManyWithoutDonorNestedInput
    notifications?: RequestNotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    babies?: BabyUncheckedUpdateManyWithoutUserNestedInput
    otpVerifications?: OtpVerificationUncheckedUpdateManyWithoutUserNestedInput
    receivedRequests?: MilkRequestUncheckedUpdateManyWithoutDonorNestedInput
    notifications?: RequestNotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceivedRequestsInput = {
    update: XOR<UserUpdateWithoutReceivedRequestsInput, UserUncheckedUpdateWithoutReceivedRequestsInput>
    create: XOR<UserCreateWithoutReceivedRequestsInput, UserUncheckedCreateWithoutReceivedRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedRequestsInput, UserUncheckedUpdateWithoutReceivedRequestsInput>
  }

  export type UserUpdateWithoutReceivedRequestsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    babies?: BabyUpdateManyWithoutUserNestedInput
    otpVerifications?: OtpVerificationUpdateManyWithoutUserNestedInput
    sentRequests?: MilkRequestUpdateManyWithoutRequesterNestedInput
    notifications?: RequestNotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    babies?: BabyUncheckedUpdateManyWithoutUserNestedInput
    otpVerifications?: OtpVerificationUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: MilkRequestUncheckedUpdateManyWithoutRequesterNestedInput
    notifications?: RequestNotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RequestNotificationUpsertWithWhereUniqueWithoutRequestInput = {
    where: RequestNotificationWhereUniqueInput
    update: XOR<RequestNotificationUpdateWithoutRequestInput, RequestNotificationUncheckedUpdateWithoutRequestInput>
    create: XOR<RequestNotificationCreateWithoutRequestInput, RequestNotificationUncheckedCreateWithoutRequestInput>
  }

  export type RequestNotificationUpdateWithWhereUniqueWithoutRequestInput = {
    where: RequestNotificationWhereUniqueInput
    data: XOR<RequestNotificationUpdateWithoutRequestInput, RequestNotificationUncheckedUpdateWithoutRequestInput>
  }

  export type RequestNotificationUpdateManyWithWhereWithoutRequestInput = {
    where: RequestNotificationScalarWhereInput
    data: XOR<RequestNotificationUpdateManyMutationInput, RequestNotificationUncheckedUpdateManyWithoutRequestInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    babies?: BabyCreateNestedManyWithoutUserInput
    otpVerifications?: OtpVerificationCreateNestedManyWithoutUserInput
    sentRequests?: MilkRequestCreateNestedManyWithoutRequesterInput
    receivedRequests?: MilkRequestCreateNestedManyWithoutDonorInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    name: string
    email: string
    phone: string
    zipcode: string
    userType: $Enums.UserType
    isNew?: boolean
    isActive?: boolean
    fcmToken?: string | null
    lastLoginAt?: Date | string | null
    description?: string | null
    bloodGroup?: string | null
    babyDeliveryDate?: Date | string | null
    healthStyle?: string | null
    ableToShareMedicalRecord?: boolean | null
    isAvailable?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    babies?: BabyUncheckedCreateNestedManyWithoutUserInput
    otpVerifications?: OtpVerificationUncheckedCreateNestedManyWithoutUserInput
    sentRequests?: MilkRequestUncheckedCreateNestedManyWithoutRequesterInput
    receivedRequests?: MilkRequestUncheckedCreateNestedManyWithoutDonorInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type MilkRequestCreateWithoutNotificationsInput = {
    requestType?: $Enums.RequestType
    status?: $Enums.RequestStatus
    title: string
    description?: string | null
    quantity?: number | null
    urgency?: string | null
    requesterZipcode: string
    donorZipcode?: string | null
    distance?: number | null
    neededBy?: Date | string | null
    acceptedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requester: UserCreateNestedOneWithoutSentRequestsInput
    donor?: UserCreateNestedOneWithoutReceivedRequestsInput
  }

  export type MilkRequestUncheckedCreateWithoutNotificationsInput = {
    id?: number
    requestType?: $Enums.RequestType
    status?: $Enums.RequestStatus
    title: string
    description?: string | null
    quantity?: number | null
    urgency?: string | null
    requesterId: number
    donorId?: number | null
    requesterZipcode: string
    donorZipcode?: string | null
    distance?: number | null
    neededBy?: Date | string | null
    acceptedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MilkRequestCreateOrConnectWithoutNotificationsInput = {
    where: MilkRequestWhereUniqueInput
    create: XOR<MilkRequestCreateWithoutNotificationsInput, MilkRequestUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    babies?: BabyUpdateManyWithoutUserNestedInput
    otpVerifications?: OtpVerificationUpdateManyWithoutUserNestedInput
    sentRequests?: MilkRequestUpdateManyWithoutRequesterNestedInput
    receivedRequests?: MilkRequestUpdateManyWithoutDonorNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    userType?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    isNew?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    fcmToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    babyDeliveryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    healthStyle?: NullableStringFieldUpdateOperationsInput | string | null
    ableToShareMedicalRecord?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isAvailable?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    babies?: BabyUncheckedUpdateManyWithoutUserNestedInput
    otpVerifications?: OtpVerificationUncheckedUpdateManyWithoutUserNestedInput
    sentRequests?: MilkRequestUncheckedUpdateManyWithoutRequesterNestedInput
    receivedRequests?: MilkRequestUncheckedUpdateManyWithoutDonorNestedInput
  }

  export type MilkRequestUpsertWithoutNotificationsInput = {
    update: XOR<MilkRequestUpdateWithoutNotificationsInput, MilkRequestUncheckedUpdateWithoutNotificationsInput>
    create: XOR<MilkRequestCreateWithoutNotificationsInput, MilkRequestUncheckedCreateWithoutNotificationsInput>
    where?: MilkRequestWhereInput
  }

  export type MilkRequestUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: MilkRequestWhereInput
    data: XOR<MilkRequestUpdateWithoutNotificationsInput, MilkRequestUncheckedUpdateWithoutNotificationsInput>
  }

  export type MilkRequestUpdateWithoutNotificationsInput = {
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutSentRequestsNestedInput
    donor?: UserUpdateOneWithoutReceivedRequestsNestedInput
  }

  export type MilkRequestUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: IntFieldUpdateOperationsInput | number
    donorId?: NullableIntFieldUpdateOperationsInput | number | null
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BabyCreateManyUserInput = {
    id?: number
    name: string
    gender: $Enums.Gender
    deliveryDate: Date | string
    bloodGroup?: string | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OtpVerificationCreateManyUserInput = {
    id?: number
    email: string
    otp: string
    expiresAt: Date | string
    isUsed?: boolean
    attempts?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MilkRequestCreateManyRequesterInput = {
    id?: number
    requestType?: $Enums.RequestType
    status?: $Enums.RequestStatus
    title: string
    description?: string | null
    quantity?: number | null
    urgency?: string | null
    donorId?: number | null
    requesterZipcode: string
    donorZipcode?: string | null
    distance?: number | null
    neededBy?: Date | string | null
    acceptedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MilkRequestCreateManyDonorInput = {
    id?: number
    requestType?: $Enums.RequestType
    status?: $Enums.RequestStatus
    title: string
    description?: string | null
    quantity?: number | null
    urgency?: string | null
    requesterId: number
    requesterZipcode: string
    donorZipcode?: string | null
    distance?: number | null
    neededBy?: Date | string | null
    acceptedAt?: Date | string | null
    completedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestNotificationCreateManyUserInput = {
    id?: number
    title: string
    message: string
    type: string
    requestId?: number | null
    isRead?: boolean
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BabyUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedLogs?: FeedLogUpdateManyWithoutBabyNestedInput
    diaperLogs?: DiaperLogUpdateManyWithoutBabyNestedInput
    sleepLogs?: SleepLogUpdateManyWithoutBabyNestedInput
  }

  export type BabyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedLogs?: FeedLogUncheckedUpdateManyWithoutBabyNestedInput
    diaperLogs?: DiaperLogUncheckedUpdateManyWithoutBabyNestedInput
    sleepLogs?: SleepLogUncheckedUpdateManyWithoutBabyNestedInput
  }

  export type BabyUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    deliveryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    bloodGroup?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpVerificationUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpVerificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpVerificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isUsed?: BoolFieldUpdateOperationsInput | boolean
    attempts?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MilkRequestUpdateWithoutRequesterInput = {
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    donor?: UserUpdateOneWithoutReceivedRequestsNestedInput
    notifications?: RequestNotificationUpdateManyWithoutRequestNestedInput
  }

  export type MilkRequestUncheckedUpdateWithoutRequesterInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    donorId?: NullableIntFieldUpdateOperationsInput | number | null
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: RequestNotificationUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type MilkRequestUncheckedUpdateManyWithoutRequesterInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    donorId?: NullableIntFieldUpdateOperationsInput | number | null
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MilkRequestUpdateWithoutDonorInput = {
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requester?: UserUpdateOneRequiredWithoutSentRequestsNestedInput
    notifications?: RequestNotificationUpdateManyWithoutRequestNestedInput
  }

  export type MilkRequestUncheckedUpdateWithoutDonorInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: IntFieldUpdateOperationsInput | number
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: RequestNotificationUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type MilkRequestUncheckedUpdateManyWithoutDonorInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestType?: EnumRequestTypeFieldUpdateOperationsInput | $Enums.RequestType
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableFloatFieldUpdateOperationsInput | number | null
    urgency?: NullableStringFieldUpdateOperationsInput | string | null
    requesterId?: IntFieldUpdateOperationsInput | number
    requesterZipcode?: StringFieldUpdateOperationsInput | string
    donorZipcode?: NullableStringFieldUpdateOperationsInput | string | null
    distance?: NullableFloatFieldUpdateOperationsInput | number | null
    neededBy?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    acceptedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNotificationUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: MilkRequestUpdateOneWithoutNotificationsNestedInput
  }

  export type RequestNotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    requestId?: NullableIntFieldUpdateOperationsInput | number | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    requestId?: NullableIntFieldUpdateOperationsInput | number | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLogCreateManyBabyInput = {
    id?: number
    feedingDate: Date | string
    startTime: Date | string
    endTime: Date | string
    feedType: $Enums.FeedType
    position?: $Enums.Position | null
    amount?: number | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DiaperLogCreateManyBabyInput = {
    id?: number
    date: Date | string
    time: Date | string
    diaperType: $Enums.DiaperType
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SleepLogCreateManyBabyInput = {
    id?: number
    date: Date | string
    startTime: Date | string
    endTime: Date | string
    sleepQuality?: string | null
    location: $Enums.SleepLocation
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FeedLogUpdateWithoutBabyInput = {
    feedingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    feedType?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    position?: NullableEnumPositionFieldUpdateOperationsInput | $Enums.Position | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLogUncheckedUpdateWithoutBabyInput = {
    id?: IntFieldUpdateOperationsInput | number
    feedingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    feedType?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    position?: NullableEnumPositionFieldUpdateOperationsInput | $Enums.Position | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedLogUncheckedUpdateManyWithoutBabyInput = {
    id?: IntFieldUpdateOperationsInput | number
    feedingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    feedType?: EnumFeedTypeFieldUpdateOperationsInput | $Enums.FeedType
    position?: NullableEnumPositionFieldUpdateOperationsInput | $Enums.Position | null
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiaperLogUpdateWithoutBabyInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    diaperType?: EnumDiaperTypeFieldUpdateOperationsInput | $Enums.DiaperType
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiaperLogUncheckedUpdateWithoutBabyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    diaperType?: EnumDiaperTypeFieldUpdateOperationsInput | $Enums.DiaperType
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DiaperLogUncheckedUpdateManyWithoutBabyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    diaperType?: EnumDiaperTypeFieldUpdateOperationsInput | $Enums.DiaperType
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogUpdateWithoutBabyInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sleepQuality?: NullableStringFieldUpdateOperationsInput | string | null
    location?: EnumSleepLocationFieldUpdateOperationsInput | $Enums.SleepLocation
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogUncheckedUpdateWithoutBabyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sleepQuality?: NullableStringFieldUpdateOperationsInput | string | null
    location?: EnumSleepLocationFieldUpdateOperationsInput | $Enums.SleepLocation
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SleepLogUncheckedUpdateManyWithoutBabyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sleepQuality?: NullableStringFieldUpdateOperationsInput | string | null
    location?: EnumSleepLocationFieldUpdateOperationsInput | $Enums.SleepLocation
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNotificationCreateManyRequestInput = {
    id?: number
    title: string
    message: string
    type: string
    userId: number
    isRead?: boolean
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RequestNotificationUpdateWithoutRequestInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type RequestNotificationUncheckedUpdateWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RequestNotificationUncheckedUpdateManyWithoutRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BabyCountOutputTypeDefaultArgs instead
     */
    export type BabyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BabyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MilkRequestCountOutputTypeDefaultArgs instead
     */
    export type MilkRequestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MilkRequestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BabyDefaultArgs instead
     */
    export type BabyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BabyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedLogDefaultArgs instead
     */
    export type FeedLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiaperLogDefaultArgs instead
     */
    export type DiaperLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiaperLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SleepLogDefaultArgs instead
     */
    export type SleepLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SleepLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OtpVerificationDefaultArgs instead
     */
    export type OtpVerificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OtpVerificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ZipCodeDefaultArgs instead
     */
    export type ZipCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ZipCodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MilkRequestDefaultArgs instead
     */
    export type MilkRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MilkRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RequestNotificationDefaultArgs instead
     */
    export type RequestNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RequestNotificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}