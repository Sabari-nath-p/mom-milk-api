import { UsersService } from './users.service';
import { CreateUserDto, UpdateUserDto } from './dto/user.dto';
export declare class UsersController {
    private readonly usersService;
    constructor(usersService: UsersService);
    create(createUserDto: CreateUserDto): Promise<{
        name: string;
        email: string;
        phone: string;
        zipcode: string;
        userType: import(".prisma/client").$Enums.UserType;
        isNew: boolean;
        isActive: boolean;
        fcmToken: string | null;
        lastLoginAt: Date | null;
        description: string | null;
        bloodGroup: string | null;
        babyDeliveryDate: Date | null;
        healthStyle: string | null;
        ableToShareMedicalRecord: boolean | null;
        isAvailable: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
    }>;
    findAll(): Promise<({
        babies: {
            name: string;
            bloodGroup: string | null;
            createdAt: Date;
            updatedAt: Date;
            id: number;
            gender: import(".prisma/client").$Enums.Gender;
            deliveryDate: Date;
            weight: number | null;
            height: number | null;
            userId: number;
        }[];
    } & {
        name: string;
        email: string;
        phone: string;
        zipcode: string;
        userType: import(".prisma/client").$Enums.UserType;
        isNew: boolean;
        isActive: boolean;
        fcmToken: string | null;
        lastLoginAt: Date | null;
        description: string | null;
        bloodGroup: string | null;
        babyDeliveryDate: Date | null;
        healthStyle: string | null;
        ableToShareMedicalRecord: boolean | null;
        isAvailable: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
    })[]>;
    findDonors(): Promise<{
        name: string;
        email: string;
        phone: string;
        zipcode: string;
        userType: import(".prisma/client").$Enums.UserType;
        isNew: boolean;
        isActive: boolean;
        fcmToken: string | null;
        lastLoginAt: Date | null;
        description: string | null;
        bloodGroup: string | null;
        babyDeliveryDate: Date | null;
        healthStyle: string | null;
        ableToShareMedicalRecord: boolean | null;
        isAvailable: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
    }[]>;
    findBuyers(): Promise<{
        name: string;
        email: string;
        phone: string;
        zipcode: string;
        userType: import(".prisma/client").$Enums.UserType;
        isNew: boolean;
        isActive: boolean;
        fcmToken: string | null;
        lastLoginAt: Date | null;
        description: string | null;
        bloodGroup: string | null;
        babyDeliveryDate: Date | null;
        healthStyle: string | null;
        ableToShareMedicalRecord: boolean | null;
        isAvailable: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
    }[]>;
    findAdmins(): Promise<{
        name: string;
        email: string;
        phone: string;
        zipcode: string;
        userType: import(".prisma/client").$Enums.UserType;
        isNew: boolean;
        isActive: boolean;
        fcmToken: string | null;
        lastLoginAt: Date | null;
        description: string | null;
        bloodGroup: string | null;
        babyDeliveryDate: Date | null;
        healthStyle: string | null;
        ableToShareMedicalRecord: boolean | null;
        isAvailable: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
    }[]>;
    findDonorsByZipcode(zipcode: string): Promise<{
        name: string;
        email: string;
        phone: string;
        zipcode: string;
        userType: import(".prisma/client").$Enums.UserType;
        isNew: boolean;
        isActive: boolean;
        fcmToken: string | null;
        lastLoginAt: Date | null;
        description: string | null;
        bloodGroup: string | null;
        babyDeliveryDate: Date | null;
        healthStyle: string | null;
        ableToShareMedicalRecord: boolean | null;
        isAvailable: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
    }[]>;
    findDonorsWillingToShareMedicalRecord(): Promise<{
        name: string;
        email: string;
        phone: string;
        zipcode: string;
        userType: import(".prisma/client").$Enums.UserType;
        isNew: boolean;
        isActive: boolean;
        fcmToken: string | null;
        lastLoginAt: Date | null;
        description: string | null;
        bloodGroup: string | null;
        babyDeliveryDate: Date | null;
        healthStyle: string | null;
        ableToShareMedicalRecord: boolean | null;
        isAvailable: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
    }[]>;
    findByEmail(email: string): Promise<{
        name: string;
        email: string;
        phone: string;
        zipcode: string;
        userType: import(".prisma/client").$Enums.UserType;
        isNew: boolean;
        isActive: boolean;
        fcmToken: string | null;
        lastLoginAt: Date | null;
        description: string | null;
        bloodGroup: string | null;
        babyDeliveryDate: Date | null;
        healthStyle: string | null;
        ableToShareMedicalRecord: boolean | null;
        isAvailable: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
    }>;
    findOne(id: number): Promise<{
        babies: {
            name: string;
            bloodGroup: string | null;
            createdAt: Date;
            updatedAt: Date;
            id: number;
            gender: import(".prisma/client").$Enums.Gender;
            deliveryDate: Date;
            weight: number | null;
            height: number | null;
            userId: number;
        }[];
    } & {
        name: string;
        email: string;
        phone: string;
        zipcode: string;
        userType: import(".prisma/client").$Enums.UserType;
        isNew: boolean;
        isActive: boolean;
        fcmToken: string | null;
        lastLoginAt: Date | null;
        description: string | null;
        bloodGroup: string | null;
        babyDeliveryDate: Date | null;
        healthStyle: string | null;
        ableToShareMedicalRecord: boolean | null;
        isAvailable: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
    }>;
    update(id: number, updateUserDto: UpdateUserDto): Promise<{
        name: string;
        email: string;
        phone: string;
        zipcode: string;
        userType: import(".prisma/client").$Enums.UserType;
        isNew: boolean;
        isActive: boolean;
        fcmToken: string | null;
        lastLoginAt: Date | null;
        description: string | null;
        bloodGroup: string | null;
        babyDeliveryDate: Date | null;
        healthStyle: string | null;
        ableToShareMedicalRecord: boolean | null;
        isAvailable: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
    }>;
    remove(id: number): Promise<{
        name: string;
        email: string;
        phone: string;
        zipcode: string;
        userType: import(".prisma/client").$Enums.UserType;
        isNew: boolean;
        isActive: boolean;
        fcmToken: string | null;
        lastLoginAt: Date | null;
        description: string | null;
        bloodGroup: string | null;
        babyDeliveryDate: Date | null;
        healthStyle: string | null;
        ableToShareMedicalRecord: boolean | null;
        isAvailable: boolean | null;
        createdAt: Date;
        updatedAt: Date;
        id: number;
    }>;
}
